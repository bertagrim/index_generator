,content,page_number,real_page_num,section_level_1,section_level_2,section_level_3,clean_content
0,"1

Introduction

1.1

Semantics and semantic theory

In its broadest sense, semantics is the study of meaning and linguistic semantics is the study of meaning as expressed by the words, phrases and sentences of human languages.
It is, however, more usual within linguistics to interpret the term more narrowly, as concerning the study of those aspects of meaning encoded in linguistic expressions that are independent of their use on particular occasions by particular individuals within a particular speech community.
In other words, semantics is the study of meaning abstracted away from those aspects that are derived from the intentions of speakers, their psychological states and the socio-cultural aspects of the context in which their utterances are made.
A further narrowing of the term is also commonly made in separating the study of semantics from that of pragmatics.
Unfortunately, the nature of the object of inquiry of the discipline (what constitutes semantic meaning, as opposed to pragmatic meaning) and the domain of the inquiry
(what aspects of meaning should be addressed by the discipline) remain difficult and controversial questions.
There are, however, three central aspects of the meaning of linguistic expressions that are currently accepted by most semanticists as forming the core concern of linguistic semantics.
These central concerns of semantic theory, adapted from Kempson (1977:4), are stated in (1) and may be adopted as criteria for ascertaining the adequacy of semantic theories which apply in addition to the general conditions on scientific theories of falsifiability and rigour.
(1)
1.
2.
3.

A semantic theory must: capture for any language the nature of the meaning of words, phrases and sentences and explain the nature of the relation between them; be able to predict the ambiguities in the expressions of a language; characterise and explain the systematic meaning relations between the words, the phrases and the sentences of a language.

One may add to these the condition that a semantic theory should provide an account of the relation between linguistic expressions and what may be called 'things in the world'.
In other words, it is a primary concern of a semantic theory to explain how human beings can use their language to convey information about the external world.
We may thus require a semantic theory to conform also to the criterion of adequacy in (2).
(2)

A semantic theory must provide an account of the relation between linguistic expressions and the things that they can be used to talk about.

There are many other aspects of meaning that can be included in the domain of linguistic semantics, but a theory conforming to the four criteria in (1) and (2) will cover the main ground of the discipline and provide a firm basis for further research.
In this book, we will be looking at a particular theory of semantics that goes a long way towards satisfying these criteria and that has been very influential in linguistic
1",19,1,1 Introduction,No info,No info,semantics semantic theory broadest sense semantics meaning linguistic semantics study meaning word phrase sentence human language usual linguistics term study aspect meaning linguistic expression independent use particular occasion particular individual particular speech community word semantics study meaning intention speaker psychological state aspect context utterance term study semantics pragmatic inquiry discipline semantic meaning pragmatic meaning domain inquiry aspect meaning discipline difficult controversial question central aspect meaning linguistic expression semanticist core concern linguistic semantics central concern semantic theory kempson criterion adequacy semantic theory addition general condition scientific theory falsifiability semantic theory language nature word phrase sentence nature relation able predict ambiguity expression language systematic meaning relation word phrase sentence language condition semantic theory account relation linguistic expression world word primary concern semantic theory human use language convey information external world semantic theory conform adequacy semantic theory account relation linguistic expression thing many aspect meaning domain linguistic semantics theory criterion cover main ground discipline firm basis research book particular theory semantics long way criterion influential linguistic
1,"1 Introduction semantics over the last two decades.
This theory is a formal theory of semantics and is distinguished from general linguistic semantics by its greater use of mathematical techniques and reliance on logical precision.
This is not to say that formal semantics and general linguistic semantics are completely separate disciplines.
It sometimes appears that these two approaches to the semantics of natural languages are mutually incompatible, but this is not obviously true.
The former draws heavily on the long tradition of research in the latter which in turn benefits from the greater precision of the former.
Both approaches enable us to understand more about meaning and greater integration between them would doubtless bring greater benefits to the discipline.
Formal semantics itself was devised as a means of providing a precise interpretation for formal languages, i.e. the logical and mathematical languages that are opposed to natural languages that are spoken or written as the native languages of human beings.
Many logicians considered it to be impossible to apply the same rigour to the semantics of human languages, because of their supposedly inexact syntax, their vagueness and their ambiguity.
In the late nineteen-sixties, however, the philosopher Richard Montague asserted that it was possible to use the same techniques in analysing the meanings of sentences in English.
In three articles, English as a formal language, Universal grammar and The proper treatment of quantification in
English, all published or presented in 1970, Montague gave arguments for his hypothesis that:
There is in my opinion no important theoretical difference between natural languages and the artificial languages of logicians; indeed, I consider it possible to comprehend the syntax and semantics of both kinds of language within a single, natural and mathematically precise theory.
Montague (1974: 222)
Throughout the nineteen-seventies, after his tragic death in 1971, Montague's work had a radical effect on the study of semantics in linguistics.
Indeed, his ideas on the semantics of human languages have become central to the understanding of many of the questions and theories being discussed in linguistic semantics today.
Owing to the relatively recent application of the tools of formal semantics to the analysis of natural languages, however, there are many topics in linguistic semantics that have not yet been formally analysed, but it is hoped that ultimately a good deal of linguistic meaning will be amenable to the sort of rigorous treatment envisaged by Montague.
It is the exposition of Montague's theory in its now classical form that constitutes the subject matter of this book, but, before the main points of his semantic theory are introduced, the four criteria of adequacy in (1) and (2) above will be discussed in more detail in order to provide a clearer idea of the fundamental issues that underlie the development of the theory in later chapters.
1.1.1

Compositionality

A fundamental property that any semantic theory must have is the ability to pair the syntactic expressions of a language with their meanings.
In the first condition of adequacy in (l.a), above, this property is characterised as a requirement that a semantic theory account for the nature of the meaning of linguistic expressions and be able to pair every expression in a language (words, phrases and sentences) with an appropriate meaning.
As already mentioned, the characterisation of meaning is a",20,2,1 Introduction,No info,No info,semantics last decade theory formal theory semantics general linguistic semantics greater mathematical technique reliance logical precision formal semantics general linguistic semantics separate discipline approach semantics natural language incompatible true former draw long tradition research latter turn benefit greater precision former approach enable meaning greater integration greater benefit discipline formal semantics mean precise interpretation formal language logical mathematical language natural language native language human many logician impossible rigour semantics human language inexact syntax vagueness ambiguity philosopher richard montague possible use technique meaning sentence english article english formal language universal proper treatment quantification english montague argument hypothesis opinion important theoretical difference natural language artificial language logician possible syntax semantics kind language single natural precise theory montague tragic death montague work radical effect study semantics linguistics semantics human language central many question theory linguistic semantics recent application tool formal semantics analysis natural language many topic linguistic semantics good deal linguistic amenable sort rigorous treatment montague exposition montague theory classical form subject matter book main point semantic theory criterion adequacy detail order clearer idea fundamental issue underlie development theory chapter compositionality fundamental property semantic theory syntactic expression language first condition adequacy property requirement semantic theory account nature linguistic expression able pair expression language word phrase sentence appropriate meaning characterisation meaning
2,"Semantics and semantic theory controversial matter, but whatever meanings are taken to be within a theory, it is obvious that there must be some way of associating them with appropriate linguistic expressions.
This is not a trivial matter, however, and there are a number of important points that need to be discussed with respect to this property.
In the first place, let us consider more closely what it is that is to be assigned meanings by a semantic theory.
Condition (l.a) refers to words and sentences as the carriers of meaning.
The term sentence here is being used in its abstract sense, common in linguistics, as the largest unit of syntactic description, independently of its realisation in spoken or written texts.
Like the term sentence, word is also ambiguous in everyday English.
Within semantics, the notion of word that is most useful is that of the lexeme which is an abstract grammatical construct that underlies a set of word forms which are recognised as representatives of 'the same word' in different syntactic environments.
For example, the word forms sing, sings, singing, sang and sung are particular inflectional variants of a lexeme which we may represent for the time being as SING.
It is to lexemes and not to word forms that meanings should be assigned, because while the inflectional properties of the verb SING may vary in different syntactic environments, the sort of action described by the verb remains the same.
For this reason, the meaning of words is referred to in this book as lexical meaning, rather than word meaning.
Although it is possible for the meanings assigned to lexemes and sentences to be very different from each other, it is reasonable to expect the meanings of sentences to be related to the meanings of the lexemes underlying the word-forms they contain.
It is intuitively implausible for there to be a language where the relation between the meaning of a sentence and the meanings of its component lexemes is entirely random.
While languages do contain idiomatic phrases and sentences where lexical and sentential meaning are not transparently related (e.g. kick the bucket meaning the same as DIE in English), this is never the general situation.
If there were no direct relation between lexical and sentential meaning, of course, the meaning of each sentence in a language would have to be listed.
Since the number of sentences that make up a language is infinite, this would mean that no human being would be able to determine the meanings of all the sentences of any language owing to the finite resources of the brain.
This is absurd, of course, and just as sentences are defined recursively by syntactic rules, taking words (or morphemes) as their basis, so their meanings should also be defined recursively from the meanings ascribed to the lexemes they contain.
Thus, in addition to associating each expression in a language with a meaning, an adequate semantic theory must also be able to explain how the meanings of smaller expressions contribute to the meanings of larger ones that contain them.
A theory that derives the meaning of larger expressions from those of smaller ones is said to be compositional.
The Principle of Compositionaiity, given an initial definition in (3), is generally attributed to the German philosopher Gottlob Frege, and is thus sometimes referred to as the Fregean Principle of Compositionaiity or just the
Fregean Principle, although it is unlikely that he ever stated the principle in precisely this way.
(3)

The meaning of an expression is a function of the meaning of its parts.

The notion of a function will be discussed in more detail in Chapter 4, but essentially it is an operation that derives a single result given a specified input.
Thus,",21,3,1 Introduction,No info,No info,semantics semantic theory controversial matter meaning theory obvious appropriate linguistic expression trivial matter number important point respect property first place semantic theory condition word sentence carrier meaning term sentence abstract sense common linguistics largest unit syntactic description realisation text term sentence word ambiguous everyday english semantics notion word useful lexeme abstract grammatical construct underlies word form representative word different syntactic environment word form sing sings sung particular inflectional variant lexeme time lexeme word form meaning inflectional property verb sing different syntactic environment sort action verb reason meaning word book lexical meaning word meaning possible lexeme sentence different reasonable sentence lexeme underlying contain implausible language relation sentence meaning component lexeme random language idiomatic phrase sentence lexical sentential meaning related kick bucket meaning english general situation direct relation lexical sentential meaning course meaning sentence language number sentence language infinite human able sentence language owing finite resource brain absurd course sentence syntactic rule word morpheme basis meaning ascribed lexeme contain addition expression language adequate semantic theory able smaller expression larger contain theory larger expression smaller compositional principle compositionaiity initial german philosopher gottlob frege fregean principle compositionaiity principle unlikely principle way expression function part notion function detail operation single result input
3,"1 Introduction the principle (3) minimally requires that the meaning of a larger expression be uniquely determined from the meanings of its component parts.
This cannot be all there is to compositionality, however, since, otherwise, we would expect that sentences containing the same words mean the same thing.
This is, of course, not true.
The sentence Jo kicked Chester does not mean the same as Chester kicked Jo.
It must also be the case, therefore, that the syntactic structure of an expression is relevant to the derivation of its meaning.
Indeed, we may strengthen the principle of compositionality so that, in deriving the meaning of a composite expression, the meaning of its component expressions are combined in some way that refers to the way they are combined by the syntax.
This implies that wherever meanings are combined in a particular way to derive the meaning of a composite expression, all other composite expressions of the same sort have their meanings determined in the same way.
In other words, the construction of meanings is rule-governed, in the same way that the construction of the well-formed syntactic expressions of a language is rule-governed.
For example, whatever rule derives the meaning of the sentence Jo sang from the subject Jo and intransitive verb sang applies to all declarative sentences derived by combining a subject noun phrase with the appropriate form of an intransitive verb.
Furthermore, it is a general property of human languages that all the sub-expressions of a grammatically well-formed phrase have a role to play in the interpretation of a sentence, even if, on occasions, this role is predictably redundant
(as, for example, in double negative constructions in certain dialects of English like
/ never did nothing where the second negative expression merely reinforces the idea of negation introduced by the first).
Semantic rules should, therefore, not be allowed to delete meanings during the derivation of the meaning of a composite expression.
The effect of this restriction is to make the creation of the meanings of larger expressions monotonic with respect to their component parts where a derivation is said to be monotonic if all properties of previous parts of a derivation are maintained throughout.
In other words, once information is introduced into a monotonic derivation, it is not lost thereafter.
The initial definition of compositionality in (3) may thus be strengthened to give the statement in (4).
(4)

The principle of compositionality: The meaning of an expression is a monotonic function of the meaning of its parts and the way they are put together.

The implications of this interpretation of the principle of compositionality is that meanings should be ascribed not only to lexemes and sentences but also to other syntactic constituents.
It is thus generally assumed that meanings should be assigned to all the well-formed constituents of a language, not just to its words (lexemes) and sentences.
Indeed, the concept of syntax as a bridge between phonology and semantics, current in many grammatical theories, would seem to require that all constituents be assigned a meaning by the semantics and, furthermore, that (surface) syntactic structure should directly determine how the meanings of sentences are derived.
It is common to assume that semantic constituency parallels syntactic constituency and hence that an adequate semantic theory must be able to ascribe appropriate meanings to noun phrases like the old cat, Jo's mother, Chester and verb phrases like sang, kicked the cat, ran slowly, etc, according to their syntactic structure.",22,4,1 Introduction,No info,No info,principle larger expression component part compositionality sentence word course true sentence chester mean chester syntactic structure expression relevant derivation meaning principle compositionality composite expression meaning component expression way syntax particular way meaning composite expression composite expression sort meaning way word construction meaning way construction syntactic expression language rule sentence subject intransitive verb declarative sentence subject noun phrase appropriate form intransitive verb furthermore general property human language role play interpretation sentence occasion role redundant double negative construction certain dialect english nothing second negative expression idea negation first semantic rule delete meaning derivation meaning composite expression effect restriction creation larger expression monotonic respect component part derivation monotonic property previous part derivation word information monotonic derivation initial compositionality give statement principle compositionality expression monotonic function part implication interpretation principle compositionality meaning ascribed lexeme sentence syntactic constituent assigned constituent language word lexeme sentence concept syntax bridge phonology semantics current many grammatical theory constituent meaning semantics syntactic structure sentence common semantic constituency parallel syntactic constituency adequate semantic theory able appropriate meaning noun phrase old cat mother chester verb phrase cat syntactic structure
4,"Semantics and semantic theory
One way in which this may be achieved is to adopt the hypothesis that for each syntactic rule of the grammar (or syntactic structure admitted by the grammar) there is a corresponding semantic rule that derives the meaning of the resultant expression
(or structure).
For example, assuming that there is a rule that defines a sentence in
English as consisting of a noun phrase plus a verb phrase, then the adoption of the rule-to-rule hypothesis in (5), together with the principle of compositionality in (4), requires that there be a corresponding semantic rule deriving the meaning of the sentence from the meanings of its immediate constituents, NP and VP.
(5)

Rule-to-rule hypothesis: For each syntactic rule there is a corresponding semantic rule.

The principle of compositionality in (4) is assumed to be a constraint on semantic theories and, indeed, will be seen to be the primary motivator behind much of the discussion in later chapters.
The rule-to-rule hypothesis, on the other hand, is not a necessary requirement of a semantic theory, but a means of achieving compositionality.
We will have cause to question the validity of this hypothesis in the later chapters of this book, but it is used in the earlier chapters to maintain a transparent relation between syntactic structures and semantic representations.
1.1.2

Meaning relations

Another aspect of meaning that must be accounted for by any semantic theory is the systematic relations that hold between different expressions in a language.
According to the condition of adequacy in (1 .b), a theory must satisfactorily analyse the intuitions speakers of English have about the semantic relations between lexemes and between sentences.
This assumes that expressions in a language which may not be syntactically related may be related semantically and, indeed, such is the case.
Consider the sentences in (6).
Assuming that the reference of the name Jo and the discourse context are held constant for all the sentences in (6), then the sentences in (6.b) to (6.i) are semantically related to that in (6.a), even though it is not always the case that there is a direct syntactic relation between them.
(6) a.
b.
c.
d.
e.
f.
g.
h.
i.

Jo stroked a cat.
A cat was stroked.
There was a cat.
No-one stroked a cat.
There are no such things as cats.
A cat was stroked by Jo.
It was Jo who stroked the cat.
Jo touched a cat.
Jo stroked an animal.

The relation between the sentences in (6.a) and those in (6.b) and (6.c) is one of entailment, as it is intuitively impossible for it to be true that Jo stroked a cat on some occasion without it also being true that a cat was stroked or that there existed a cat to be stroked on that occasion.
We may thus define a sentence S, as entailing a sentence S2 if the latter truly describes a situation whenever the former also does.
The",23,5,1 Introduction,No info,No info,semantics semantic theory way hypothesis syntactic rule syntactic structure semantic rule resultant expression structure rule defines sentence english noun phrase verb phrase adoption hypothesis principle compositionality semantic rule meaning sentence immediate constituent hypothesis syntactic rule semantic rule principle compositionality constraint semantic theory primary motivator much discussion chapter hypothesis hand necessary requirement semantic theory compositionality question validity hypothesis chapter book earlier chapter transparent relation syntactic structure semantic representation meaning relation aspect meaning semantic theory systematic relation different expression language condition adequacy theory intuition speaker english semantic relation lexeme sentence expression language may sentence reference name discourse context constant sentence sentence direct syntactic relation cat cat cat cat thing cat cat cat cat animal relation sentence entailment impossible true stroked cat occasion true cat existed cat occasion sentence sentence latter situation
5,"I Introduction negation of an entailment always derives a contradiction and a sentence Si may be said to contradict a sentence S2 if the former must be false when the latter is true (or vice versa).
For example, the assertion that Jo stroked a cat is contradicted by the non-existence of cats, making (6.e) a contradiction of (6.a).
The relation between (6.a) and the sentences in (6.f) and (6.g) is also primarily semantic, although most syntactic theories recognise a syntactic relation between the sentences as well.
Using a common term in a technical way, we may say these sentences are paraphrases of each other, since they all have the same core meaning.
Another way of putting this is to say that they mutually entail each other.
Hence, we may say that a sentence Si is a paraphrase of a sentence S2 if Si entails S2 and S2 entails S,.
An adequate theory of semantics must, therefore, provide an account of entailment, contradiction and paraphrase that allows one to identify which sentences are entailed by, or contradict or paraphrase, another in a language.
Indeed, this concern, along with compositionality, is a major motivation for the theoretical programme developed in this book.
Other sorts of implication between sentences are also recognised in general linguistic semantics.
Some of these derive from lexical meaning as in (6.h) and (6.i) which are related to (6.a) by virtue of the meanings of the lexemes STROKE and CAT, respectively.
It is part of the meaning of the lexeme STROKE thai an action of stroking also involves an action of touching, so that (6.a) implies (6.h).
Furthermore, it is part of the meaning of CAT that anything that is a cat is also an animal and thus (6.a) implies (6.i).
The meaning relations that hold between the lexemes of a language (or between lexemes and larger expressions) are called sense relations and include hyponymy, which holds if the sense of one lexeme includes that of another (e.g.
between CAT and ANIMAL); synonymy, where two lexemes have the same sense (e.g.
betv/eenMERCURYand QUICKSILVER); and oppositeness, where two lexemes have opposing senses (e.g. BIG and SMALL and DEAD and ALIVE).
Hence, an adequate theory of semantics must give some account of lexical meaning and, in particular, of the sense relations that hold between lexemes in a particular language.
Other implicational meaning relations hold between sentences in addition to those that have been noted above.
One of these is so-called conversational implicature, which is derived not from the conventional meanings of words or sentences, but from principles of discourse and context.
For example, in the exchange in (7), the apparent irrelevance of Ethel's reply in (7.b) to Bertie's question in (7.a) leads the latter to infer (7.c).
The reason behind inference has to do with Bertie's expectations about Ethel's co-operativeness in providing him with the information he needs.
The fact that she has not given a straight answer leads Bertie, not to assume that she is being deliberately unhelpful, but to look for some piece of information that is relevant to his question that is indirectly implied by Ethel's response.
This example is discussed in more detail in Section 1.3.1 below.
(7) a.
b.
c.

Bertie: Is Fiona a good lecturer?
Ethel: She has a good line in sweaters.
Bertie (thinks): Fiona is not a good lecturer.

Another sort of implication between sentences is called presupposition.
A sentence is said to presuppose another if its truth and that of its negation both imply that the presupposed sentence is also true.
In other words, presupposition deals with aspects of meaning that are assumed to hold of a situation when a sentence is uttered",24,6,1 Introduction,No info,No info,negation entailment contradiction sentence contradict sentence former latter true vice assertion cat cat contradiction relation sentence semantic syntactic theory syntactic relation sentence common term technical way sentence paraphrase core way entail sentence paraphrase sentence entail entail adequate theory semantics account entailment contradiction paraphrase identify sentence contradict paraphrase language concern compositionality major motivation theoretical programme book sort implication sentence general linguistic semantics lexical meaning virtue lexeme stroke cat lexeme stroke thai action stroking action touching part cat cat animal relation hold lexeme language lexeme larger expression sense relation hyponymy sense lexeme cat animal synonymy lexeme sense quicksilver oppositeness lexeme sens big small dead alive adequate theory semantics account lexical meaning particular sense relation hold lexeme particular language implicational meaning relation sentence addition conversational implicature conventional meaning word sentence principle discourse context exchange apparent irrelevance ethel reply bertie question lead latter infer reason inference bertie expectation ethel information fact straight answer lead bertie unhelpful look piece information relevant question ethel response detail bertie fiona good lecturer ethel good line sweater bertie fiona good lecturer sort implication sentence presupposition sentence truth negation imply presupposed sentence true word presupposition deal aspect meaning hold situation sentence
6,"Semantics and semantic theory to describe that situation.
For example, the use of the definite article in a noun phrase is said to presuppose the existence of something that has the property described by the common noun in the same NP.
This is illustrated in (8) where the truth of the sentences in (8.c) and (8.d) is presupposed by that of (8.a) and its negation in (8.b), because of the use of the in the subject noun phrase.
(8.c) is not implied by (8.e) which replaces the in the subject NP by every (as shown by the bracketed causal clause which denies the truth of (8.c), apparently without contradiction) and, while (8.f) implies (indeed, according to the discussion above, entails) (8.c), its negation in (8.g) does not.
(8) a.
b.
c.
d.
e.
f.
g.

The Duchess of Muckhart terrorised the village.
The Duchess of Muckhart didn't terrorise the village.
There is a Duchess of Muckhart.
There is a village.
Every Duchess of Muckhart terrorised the village (because there is no
Duchess of Muckhart).
A Duchess of Muckhart terrorised the village.
A Duchess of Muckhart didn't terrorise the village.

It is usually assumed that implicatures such as that in (7) result from principles of conversation and thus form part of the domain of pragmatics rather than semantics
(see Chapter 7 for some further discussion).
More controversial, however, is the status of presupposition.
Whether it should be included in semantic or pragmatic theory is an extremely vexed question, as indeed is the definition and status of the phenomenon itself.
As the inclusion of this topic would require considerable discussion, it is omitted from consideration in this book.
This is for convenience only and should not be taken to reflect on the importance of the topic, only on the controversiality of its analysis.
The reader is referred for further information on this vexed topic to the books and articles mentioned at the end of this chapter.
In addition to accounting for these semantic relations, a semantic theory may also be required to provide some account of anomaly in the meaning of expressions in some language.
It should, therefore, be able to explain why certain expressions which are syntactically well-formed are unacceptable or deviant from the semantic point of view.
For example, the sentence in (9.a) is syntactically well-formed and semantically coherent in English.
Those in (9.b) and (9.c), however, are semantically anomalous despite the fact that they have the same syntactic structure as (9.a).
Such sentences can, however, be given some sort of non-literal interpretation (although (9.c) is harder to find an interpretation for than (9.b)), unlike the completely ill-formed expression in (9.d) which is simply not English.
This decline in acceptability from
(9.a) to (9.c) and the incoherence of (9.d) should thus be explained by an adequate theory of semantics.
(9) a.
b.
c.
d.

Green Wellington boots are very popular now.
Green ideas are very popular now.
Green corollaries are very popular now.
*very Wellington are boots popular now green.",25,7,1 Introduction,No info,No info,semantics semantic theory situation definite article noun phrase presuppose existence property common noun truth sentence negation use subject noun phrase replaces subject causal clause truth contradiction discussion entail negation duchess muckhart village duchess muckhart terrorise village duchess muckhart village duchess muckhart village duchess muckhart duchess muckhart village duchess muckhart terrorise village implicatures principle conversation form part domain pragmatic semantics discussion controversial status presupposition semantic pragmatic theory vexed question status phenomenon inclusion topic considerable discussion consideration book convenience importance topic controversiality analysis reader information topic book article end addition semantic relation semantic theory account expression language able certain expression unacceptable deviant semantic point view sentence coherent english anomalous fact syntactic structure sentence interpretation interpretation expression english decline acceptability incoherence adequate theory semantics green wellington popular green idea popular green corollary popular wellington boot popular green
7,"1 Introduction
1.1.3

Ambiguity

The third area of meaning that Kempson (1977) suggests must be explained by a semantic theory is ambiguity.
A sentence is said to be ambiguous whenever it can be associated with two or more different meanings.
Ambiguity can arise in a sentence for a number of reasons: through the ascription of multiple meanings to single words
(e.g. (lO.a)); through the assignment of different syntactic structures to a sentence
(e.g. (lO.b)); or through the use of certain expressions that may have different semantic scope (e.g. (lO.c)).
(10) a.
b.
c.

Ethel's punch was impressive.
The strike was called by radical lecturers and students.
Every good politician loves a cause.

The first sort of ambiguity occurs where an expression is associated with two or more unrelated meanings, as in (10.a) where the word punch may be interpreted as a drink or as an action.
Lexemes whose word forms have this property are called homonyms and can be subdivided into homophones, where the forms of the lexeme sound the same but may be written differently, e.g. draft and draught which can both be represented phonemically as /draft/, and homographs, e.g. lead, which are written the same, but which are pronounced differently.
Some lexemes are both homophones and homographs, like PUNCH.
Homonyms can be divided into full homonyms (like
BANK, PUNCH), where all of the lexeme's associated word forms are phonetically or orthographically identical, and partial homonyms (like FIND, FOUND), where just some of its word forms are identical.
Homonymy is often contrasted with polysemy.
A polysemous lexeme is one that is interpreted as having multiple senses that are not entirely distinct, as is the case in the standard examples of homonyms.
The classic example of a poly seme in English is the lexeme MOUTH which has different interpretations depending on what sort of entity is described as having a mouth.
There are, for example, human mouths, mouths of caves, mouths of bottles, mouths of rivers, and so on.
In each of these cases, the properties of the entity described by MOUTH are different, but not absolutely different, as each one refers to an opening of some sort.
The difference between homonymy and polysemy is one of degree, and precise definitions of these terms are difficult and controversial.
As this book is not primarily concerned with lexical meaning, no attempt will be made to differentiate the two notions or to incorporate polysemy within the theory at all.
As will be seen in Chapter 2, the approach to homonymy taken here is very simplistic: the senses of homonymous lexemes are simply differentiated formally by the use of superscripts, where necessary.
Although an account of polysemy and a better approach to homonymy may be possible within the theory of formal semantics presented in later chapters, these matters are not central to the concerns of this book and an adequate discussion of the issues involved would only serve to increase the size of the book without serving any great purpose.
The decision to exclude polysemy from consideration and to take a simplistic view of homonymy is taken on the grounds of expository convenience and readers are again referred to the further reading noted at the end of the chapter.
A more interesting source of ambiguity from the point of view of the formal",26,8,1 Introduction,No info,No info,ambiguity third area meaning kempson semantic theory ambiguity sentence ambiguous associated different meaning ambiguity sentence number reason ascription multiple single word assignment different syntactic structure sentence certain expression different semantic scope ethel punch impressive strike radical lecturer student good politician love first sort ambiguity expression unrelated meaning word punch action lexeme word form property homonym homophone form lexeme sound draught homograph lead lexeme homophone homograph punch homonym full homonym bank punch lexeme associated word form identical partial homonym find word form identical homonymy polysemy polysemous lexeme multiple sens distinct standard example homonym classic poly seme english lexeme mouth different interpretation sort entity mouth human mouth mouth cave mouth bottle mouth river case property entity mouth different one opening sort difference homonymy polysemy degree precise definition term difficult controversial book lexical meaning attempt differentiate notion incorporate polysemy theory approach homonymy simplistic sens homonymous lexeme superscript necessary account polysemy better approach homonymy possible theory formal semantics later chapter matter central concern book adequate discussion issue increase size book great purpose decision exclude polysemy consideration simplistic view homonymy ground expository convenience reader reading end interesting source ambiguity point view formal
8,"Semantics and semantic theory semanticist is illustrated in (lO.b).
Here the ambiguity results from the possibility of assigning two or more syntactic structures to a single grammatical string of words.
To ascertain the meaning of (lO.b), for example, it is necessary to know whether the adjective radical modifies the nominal phrase, lecturers and students, in which case both the lecturers and the students who called the strike are all radical, or whether it modifies just the noun lecturers, in which case the lecturers who called the strike are said to be radical but the political attitude of the students who did so is not specified.
These two readings are illustrated in (11) where the labelled bracketings of the agentive noun phrase in (ll.b) and (ll.d) correspond to the readings indicated in
(1 l.a) and (1 l.c), respectively.
(11) a.
b.
c.
d.

The strike was called by lecturers who are radical and by students.
[Np [NI [NI radical lecturers] and students]].
The strike was called by lecturers who are radical and by students who are radical.
[NP [Ni radical [N1 lecturers and students]]].

In the above example, what is at issue is the scope of the adjective, radical.
In
(ll.a), it modifies, and thus has scope over, the noun lecturers, while in (ll.b) its scope is the nominal phrase lecturers and students.
Scope is an important concept in semantics and a primary source of ambiguity which involves not only adjectives, but also conjunctions, like and, or, etc and quantifiers, like every, all, and some in
English.
Structural ambiguity of this sort thus has its source in the syntax of a language, but there are other scope ambiguities that do not directly depend on the syntactic structure of a sentence.
Such ambiguity usually involves negation (not), quantification (every, some) and other elements like tense, which do not vary their syntactic position according to the reading of the sentence.
For example, the two readings of the sentence in (lO.c) can be made clear by those in (12).
In (12.a), there is only one cause that every good politician loves, while in (12.b) each politician may love a different cause.
The sentence in (lO.c), however, is usually only assigned a single surface constituent structure, so that this ambiguity cannot be directly attributed to a syntactic source and is referred to as a semantic scope ambiguity.
(12) a.
b.

Every politician loves a cause and that is their own career.
Every good politician loves a cause and each one loves a cause that everyone else loathes.
An adequate semantic theory must thus be able to predict where structural ambiguity is likely to arise in a language and provide a means of differentiating the interpretations of the different structures to an ambiguous sentence by the grammar, where this is relevant.
It should also ensure that sentences that have two (or more) syntactic derivations, but only one semantic interpretation, are not assigned more than one meaning (see Chapter 3 for examples involving the conjunctions and and or).
The theory should also provide an account of scope ambiguities where these are not directly reflected in syntactic derivations, and be able to differentiate the scopes of particular expressions independently of the syntax.",27,9,1 Introduction,No info,No info,semantics semantic theory semanticist ambiguity result possibility syntactic structure single grammatical string word ascertain meaning necessary adjective radical modifies nominal phrase lecturer student lecturer student strike radical modifies noun lecturer lecturer strike radical political attitude student bracketings agentive noun phrase correspond reading strike lecturer radical student radical lecturer student strike lecturer radical student radical radical lecturer student issue scope adjective radical modifies scope noun lecturer scope nominal phrase lecturer student scope important concept semantics primary source ambiguity adjective conjunction quantifier english structural ambiguity sort source syntax language scope ambiguity syntactic structure sentence ambiguity negation quantification element tense syntactic position sentence sentence clear good politician love politician different cause sentence single surface constituent structure ambiguity syntactic source semantic scope ambiguity politician love career good politician love love everyone adequate semantic theory able structural ambiguity language mean interpretation different structure ambiguous sentence relevant syntactic derivation semantic interpretation example conjunction theory account scope ambiguity syntactic derivation able differentiate scope particular expression syntax
9,"1 Introduction
1.1.4

Denotation

The final criterion of adequacy that is considered here is stated in (2), above, and is the most important for our purposes, since it forms the basis of the semantic theory to be proposed in the rest of this book.
This criterion requires a semantic theory to give an account of the relation between linguistic expressions and what they can be used to talk about.
Since language can be used to talk about what is outside the linguistic system, it is essential that a semantic theory should be able to associate linguistic expressions with extra-linguistic objects.
Language is not used solely to talk about itself, but rather it is most commonly used to convey information about the situations in which human beings find themselves.
Since a listener can in general understand the meaning of what is being said by a speaker, meanings must be publicly accessible in some sense.
One way that this public accessibility must be realised is in the association of linguistic expressions with publicly identifiable entities and situations.
For example, the utterance of a sentence like The book is on the table conveys information about two entities, one of which is conventionally called a book in
English and one of which is conventionally called a table, and the relation between them.
Someone who hears an utterance of this sentence associates it with the situation pictorially represented in (13).
Although (13) is itself a representation of an actual (or possible) situation, it is nonetheless a non-linguistic representation and a theory of semantics should be capable of relating the meaning of the sentence to the picture and, indeed, to concrete, non-representational situations where there is a (single) book on the table.
The association between the sentence The book is on the table and the situation represented in (13) depends in part on there being, in the situation described, an instance of a thing that is conventionally called a book and one that is conventionally called a table in English.
In other words, part of the meaning of the sentence depends on the sorts of extra-linguistic entities that can be referred to by the lexemes BOOK and TABLE.
The aspect of the meaning of an expression that concerns its relation to such objects is called its denotation and an expression is said to denote particular sorts of extra-linguistic objects.
Although this relation has often been called the reference of an expression, this book follows the usage of Lyons (1977) and reserves this latter term for the act of picking out a particular entity denoted by the expression through the utterance of that expression on some occasion.
For example, in uttering the sentence The book is on the table, a speaker is said to be referring to two particular, contextually unique, entities.
The entities being referred to by the use of the definite noun phrases, the book and the table, are single elements in the class of entities denoted by the lexemes BOOK and TABLE.
Thus, a speaker may use linguistic expressions to refer, but linguistic expressions themselves denote.
No more will be said here about the act of reference, and the differences between denotation and reference, but for more details the reader is urged to consult the further reading at the end of this chapter.
Informally, we may think of the denotation as the relation between an expression and a class of various sorts of individuals, events, properties and relations that may be referred to by the use of the expression on some particular occasion.
The lexeme
BOOK may, therefore, be thought of as denoting the set of all books, TABLE as denoting the set of all tables, while the preposition ON may be thought of as denoting
10",28,10,1 Introduction,No info,No info,denotation final criterion adequacy important purpose form basis semantic theory rest book criterion semantic theory account relation linguistic expression talk language talk linguistic system essential semantic theory able associate linguistic expression object language convey information situation human find listener general understand meaning speaker meaning sense way public accessibility association linguistic expression identifiable entity situation utterance sentence book table information entity book english table relation someone utterance sentence associate situation representation actual possible situation representation theory semantics capable meaning sentence picture concrete situation single book table association sentence book table situation part situation instance book table english word part meaning sentence entity lexeme book table aspect expression concern relation object denotation expression denote particular sort object relation reference expression book usage lyon reserve latter term act particular entity expression utterance expression occasion sentence book table speaker particular unique entity entity definite noun phrase book table single element class entity lexeme book table speaker linguistic expression linguistic expression denote act reference difference denotation reference detail reader consult end denotation relation expression class various sort individual event property relation expression particular occasion lexeme book book table denoting set table preposition
10,"Semantics and semantic theory
The book is on the table the set of all the pairs of entities of which one is on the other.
It is easy to grasp the notion of denotation with respect to lexemes that denote concrete entities like books and tables, but the question arises about whether abstract lexemes like LOVE,
KNOWLEDGE or THEOREM or ones denoting fictitious entities like UNICORN or
HOBBIThzve denotations in the same way.
The answer is, as might be expected, controversial, but here the position is taken that there is no essential difference between such expressions and those that denote concrete entities.
Thus, the noun
LOVE is taken to denote a set of entities just like BOOK.
The difference between them is that the entities denoted by the former are abstract while those denoted by the latter are concrete.
Although the postulation of abstract entities of this sort may cause problems from a philosophical point of view, it does have the advantage of reflecting the fact that the same sorts of linguistic expressions (e.g. nouns) are used in many, if not all, languages to refer to both abstract and concrete things.
In a similar fashion, lexemes describing fictitious entities like hobbits, or entities that are no longer extant like dodos, are also assumed to have a denotation.
It is, however, useful to distinguish between the denotations of lexemes that may be used to refer to entities that exist in the real world (including abstract ones) and those that do not.
We can do this by making a distinction between two aspects of denotation.
Nouns like BOOK may be used to refer to entities in the world, but the entities of which one can truthfully say That is a book all share a certain common property, their
'bookness', so to speak.
In the same way, the set of entities that are red all have the property of redness and the set of entities that run all have the property of running.
In other words, we distinguish between the property denoted by a common noun like
BOOK, adjective like RED or intransitive verb like RUN and the entities it can be used to refer to.
The former part of the meaning of the lexeme is often referred to as its sense and is opposed to the idea of its reference.
However, just as the latter term is used here for a different notion, so too is that of sense which is used solely with respect to the sense relations that hold between the lexemes of a language (see Section
1.2 and Chapter 7).
The distinction between the different aspects of the meaning of
BOOK noted above are treated as a distinction between the intension of an expression
11",29,11,1 Introduction,No info,No info,semantics semantic theory book table pair entity easy grasp notion denotation respect lexeme denote concrete entity book table question abstract lexeme love knowledge theorem fictitious entity unicorn hobbithzve denotation way answer controversial position essential difference expression denote concrete entity noun love denote entity book difference entity former abstract latter concrete postulation abstract entity sort problem philosophical point view advantage fact linguistic expression noun many language abstract concrete thing similar fashion lexeme fictitious entity hobbit entity extant dodo denotation useful distinguish denotation lexeme entity real world abstract one distinction aspect denotation noun book entity world entity book certain common property speak way entity red property redness entity property running word distinguish property common noun book adjective red intransitive verb run entity former part lexeme sense idea reference latter term different notion sense sense relation lexeme language distinction different aspect meaning book treated distinction intension expression
11,"I Introduction and its extension.
The former corresponds to the property aspect of common nouns, whereas the latter corresponds to the entities that they may be used to refer to in the world.
Thus, the extension of the lexeme BOOK is the set of all books whilst its intension is the property of being a book.
Both properties and sets of entities are external to the linguistic system and thus constitute aspects of denotation.
This distinction allows a differentiation between entities like books which have existence in the real world and those like unicorns that, presumably, do not.
In the latter case, the lexeme UNICORN has no extension in the real world, but it does have an intension, the property of being a unicorn.
Thus, we may speak about unicorns and other entities without them needing to exist in the real world.
This distinction is discussed in more detail in Chapters 9 and 10, where a specific theory of intensionality is put forward.
Until then, we will be concerned primarily with the notion of extension and thus be concentrating on the relation between linguistic expressions and existing entities.
It is not necessary to restrict the notion of denotation to lexemes, but it may be extended to all well-formed linguistic expressions.
For example, the verb phrase kicked a cat may be taken to denote the class of actions involving the kicking of a cat, which is distinct from the class of all actions involving kicking a dog which would be denoted by the expression kicked a dog, and so on.
The denotations of other expressions, like quantified noun phrases, are less easy to specify informally, but we will see in Chapter 6 how they can be defined.
Those expressions that are not used to pick out external entities in any way may also have denotations.
Such expressions are typically described as functional or grammatical expressions, like determiners and conjunctions, as opposed to the content expressions, like nouns, verbs and adjectives.
This distinction amongst the syntactic categories of a language is a traditional (and very useful) one and can be reflected in semantics by assigning rather different sorts of denotation to the two sorts of expression.
Grammatical expressions are taken to denote logical relations between groups of entities that are denoted by content expressions.
This subject is dealt with in proper detail in later chapters of the book, where the differences between the denotations of content and functional elements will become clear.
A theory of denotation is thus not a trivial one and any semantic theory that provides an account of this important relation has already achieved a great deal.
Throughout this book the terms denotation, denotes, intension and extension are used a great deal.
Although denotation most properly refers to the relation between an expression and some entity, event, property or relation, it will also be used below to refer to what an expression denotes (what Lyons (1977) calls the denotatum of an expression).
The term is used in this way in discussions of general importance that include both extensional and intensional denotation.
Where reference is being made to what a specific expression denotes, the terms extension or intension are used, depending on which aspect of denotation is relevant.
Thus, the extension of an expression is taken below to refer to what the expression extensionally denotes, and similarly for the term intension.
This terminology should cause no confusion, but the reader is asked to pay special attention to their use in the earlier chapters of this book.

12",30,12,1 Introduction,No info,No info,extension former corresponds property common noun latter corresponds entity refer world extension lexeme book set book intension property book property entity external linguistic system constitute aspect denotation distinction differentiation entity book real world unicorn latter lexeme unicorn extension real world intension property unicorn unicorn entity real world distinction detail chapter specific theory intensionality concerned notion extension linguistic expression entity necessary restrict notion denotation lexeme linguistic expression verb phrase cat denote class action cat distinct class action dog expression dog denotation expression noun phrase le easy specify expression external entity way expression functional grammatical expression determiner conjunction content expression noun verb adjective distinction syntactic category language traditional useful semantics different sort denotation sort expression grammatical expression denote logical relation group entity content expression subject proper detail chapter book difference denotation content functional element clear theory denotation trivial semantic theory account important relation great deal book term denotation intension extension great deal denotation relation expression entity event property relation refer expression lyon call denotatum expression term way discussion general importance extensional intensional denotation reference specific expression term extension intension aspect denotation relevant extension expression refer expression term intension terminology confusion reader pay special attention use earlier chapter book
12,"Interpretation and representation
1.2

Interpretation and representation

In the last section, we looked at those aspects of meaning that constitute the minimum domain of an adequate theory of linguistic semantics.
For the rest of this book, we will be exploring a theory that attempts to provide an account of such phenomena and, in so doing, to define what semantic meaning is.
There are a number of competing theories of meaning and the one that is adopted in this book starts from the premiss that one of the most important aspects of language is to talk about entities in the world.
The central core of meaning in this theory is thus determined by the relation between linguistic expressions and the entities that they can be used to refer to.
In other words, denotation, and specifically extensional denotation, forms the basis of the theory of meaning developed here.
Although this theory has many critics and gives rise to a number of difficult problems, it nevertheless continues to have a large amount of support and has proved extremely fruitful in the study of linguistic semantics.
In this section, a general overview is presented of the major aspects of the theory that are presented in more detail in the following chapters.
The main question that arises at this point is where the analysis should start.
Many semantic theories have taken the meaning of words (lexemes) as basic and derived sentential (and phrasal) meanings from it.
Whatever the successes or failures of such theories, for a theory whose basis resides in the informational content of language, what languages may be used to talk about, it is more appropriate to begin with sentence meaning and derive the meanings of its constituent parts from this.
Declarative sentences are typically used to make statements which convey information directly about some state of affairs.
Expressions smaller than a sentence, however, require more information from context for their interpretation than sentences do.
For example, in a situation in which there are two people, one of whom is searching for a particular book, the second person knows that the book that the first is looking for is on the table and may utter any of the four expressions in (14) to convey this information to his or her partner.
Only the first, a full declarative sentence, is complete and unambiguous, requiring the minimum amount of extra information to be provided by the context.
Thus, while (14.a) may be used to describe a situation like that depicted in (13), it cannot be used to describe truthfully the one depicted in
(15) in which the book is not on the table, but under it.
The utterance of the expressions in (14.a) to (14.d) could, however, be used to describe this situation (i.e.
where the speaker is referring to the vase being on the table, not the book) and a good many more, depending on the context.
(14) a.
b.
c.
d.

The book is on the table.
On the table.
The table.
Table.

Declarative sentences, when uttered to make statements, thus form the basis of our investigation into semantic meaning.
Such expressions, uttered to such a purpose
(and not, for example, indirectly as a polite command or a question), are said by philosophers to express propositions and this usage has become commonplace in linguistics.
Like most useful and interesting ideas, however, propositions have had a controversial and contentious life and been variously defined.
Lyons (1977)
13",31,13,1 Introduction,No info,No info,interpretation representation interpretation representation last aspect meaning constitute minimum domain adequate theory linguistic semantics book theory attempt account phenomenon semantic meaning number theory book start important aspect language talk entity world central core meaning theory relation linguistic expression entity refer word denotation extensional denotation form basis theory meaning theory many critic rise number difficult problem large amount support fruitful study linguistic semantics general overview major aspect theory detail chapter main question point analysis many semantic theory word lexeme basic sentential phrasal success failure theory theory basis informational content language language talk appropriate sentence derive meaning constituent part declarative sentence statement information affair expression smaller sentence information context interpretation sentence situation people particular book second person book looking table expression convey information partner full declarative sentence complete unambiguous minimum amount extra information context describe situation depicted book table utterance expression describe situation speaker vase table book good many depending context book table table table table declarative sentence statement form basis investigation semantic meaning expression uttered purpose polite command question philosopher proposition usage commonplace linguistics useful interesting idea proposition controversial contentious life lyon
13,"1 Introduction
The book is not on the table provides the definition in (16.a), while Hurford and Heasley (1983) give that in
(16.b).
Other definitions ascribe them the further properties in (16.c) and (16.d).
(16)

A proposition: a. is what is expressed by a declarative sentence when that sentence is uttered to make a statement.
Lyons (1977:141) b. is that part of the meaning of a sentence that describes a state of affairs.
Hurford and Heasley (1983:19) c. may be true or false.
d. may be known, believed or doubted.

We will sidestep the controversy surrounding definitions like those in (16) and adopt all four statements as descriptions of the properties that propositions have and make the assumption that declarative sentences (which we will henceforth assume to be uttered only as statements, thus ignoring other uses of such sentence forms) express propositions on particular occasions of utterance.
According to (16.c), the proposition expressed by a sentence may be true or false and this truth or falsity may vary with respect to different occasions on which the sentence is uttered.
For example, the proposition expressed by the sentence The book is on the table uttered with respect to the situation depicted in (13) is true, but it is false, if uttered with respect to the situation pictorially illustrated in (15).
Propositions may thus vary in their truth value from utterance occasion to utterance occasion.
In terms of denotation, we may, therefore, think of sentences as extensionally denoting truth values on particular occasions of utterance (and, in Chapter 10, it will be suggested that sentences intensionally denote propositions).
This rather abstract idea of a sentence extensionally denoting truth or falsity forms the starting point of the semantic theory to be pursued through the rest of this book and it is to a consideration of what it means for something to be true that we now turn.

14",32,14,1 Introduction,No info,No info,book table hurford heasley definition ascribe property proposition declarative sentence sentence statement lyon part meaning sentence state affair hurford heasley true false doubted sidestep controversy definition statement description property proposition assumption sentence uttered statement us sentence form express proposition particular occasion utterance proposition sentence true false truth falsity respect different occasion sentence proposition sentence book table uttered respect situation true false uttered respect situation proposition truth value utterance occasion utterance occasion term denotation sentence truth value particular occasion utterance sentence proposition abstract idea sentence truth falsity form starting point semantic theory rest book consideration true turn
14,"Interpretation and representation
1.2.1

Truth-conditions

The definition of what it means for a statement to be true that is adopted in this book is the correspondence theory of truth given in (17) which is so called because a statement is defined as being true if, and only if, the state of affairs described by the statement holds.
(17)

The correspondence theory of truth: A statement in some language is true if, and only if, it corresponds to some state-of-affairs.

The definition in (17) applies to statements in any language, whether a natural language learnt and spoken by human beings or an artificial language devised for specific purposes.
Since declarative sentences are used to make statements in English
(and other languages) and since, according to (16.a) above, declarative sentences are taken to express propositions when uttered as statements, we can revise (17) to apply to the particular case of human languages as in (18).
(18)

The proposition expressed by a declarative sentence uttered as a statement is true on some particular occasion if, and only if, that proposition corresponds to some state-of-affairs that obtains on that occasion.

This definition makes specific reference to a state-of-affairs that holds on the occasion of the utterance of the sentence, and this is an important point.
As we have seen, the proposition expressed by an utterance of The book is on the table is true with respect to the situation depicted in (13), but not to that depicted in (15), because in the latter case there is no correspondence between the state-of-affairs described by the sentence and that portrayed in the picture.
The situation in which, or with respect to which, a sentence is uttered constitutes an important part of the interpretation of sentences, and other expressions, to be discussed in later chapters of the book.
Just knowing whether a statement is true or false does not, of course, itself tell us what the statement means.
Speakers of a language know the meaning of a sentence in their language even if they do not know the truth or falsity of the proposition expressed by that sentence.
For example, Ronnie has just dropped a cup of tea on the floor is a perfectly comprehensible sentence in English whose meaning is clear, irrespective of whether readers know whether it describes a true state-of-affairs.
Although readers may not know whether the proposition expressed by the sentence is true or false, they do know the conditions that must obtain for it to be true, i.e. they know what the world must be like for the statement to correspond to some actual state-of-affairs.
This idea forms the basis of truth-conditional semantics, whose central hypothesis is that the core meaning of a sentence is its truth-conditions.
(19)

To know the core meaning of a sentence uttered as a statement is to understand the conditions under which it could be true.

The theory thus equates core meaning with knowledge of how the truth of a declarative sentence can be ascertained without requiring the truth or falsity of a sentence to be known or know able in any particular situation.
Every sentence in the language whose semantics is being defined must, therefore, be associated by the theory with at least one set of truth-conditions (more if the sentence is ambiguous).
Hence, for our semantic theory to be adequate, it must be able to derive an infinite set
15",33,15,1 Introduction,No info,No info,interpretation representation mean statement true book correspondence theory truth statement true state affair statement correspondence theory truth statement language true corresponds statement language natural language learnt spoken human artificial language specific purpose declarative sentence statement english language declarative sentence express proposition uttered statement revise particular human language proposition declarative sentence statement true particular occasion proposition obtains occasion specific reference hold occasion utterance sentence important point proposition utterance book table true respect situation latter correspondence sentence picture situation respect sentence important part interpretation sentence expression later chapter book statement true false course statement mean speaker language meaning sentence language truth falsity proposition sentence ronnie cup tea floor comprehensible sentence english meaning clear reader true reader proposition sentence true false know condition true know world actual idea form basis semantics central hypothesis core meaning sentence core meaning sentence statement condition true theory core knowledge truth declarative sentence truth falsity sentence able particular situation sentence language semantics theory least set sentence ambiguous semantic theory adequate able infinite set
15,"1 Introduction of statements of the form of (2O.a) where 5 is a sentence in the object language and p is a set of truth-conditions.
By hypothesis, the statement in (2O.a) is equivalent to that in (2O.b).
(Here, and elsewhere, the abbreviation //f stands for the phrase if and only if.)
(20) a.
b.

S is true iff p.
S centrally means that p.

Under this interpretation of meaning, the statement in (21) gives the core meaning of the sentence The book is on the table.
(21)

The book is on the table is true iff the book is on the table.

Of course, (21) is not very informative and it appears that the meaning of the sentence is being defined in terms of itself, making the theory hopelessly circular.
However, this apparent circularity is caused by the fact that the language that is being used to explicate the truth-conditions of the sentence is the same as the language of the sentence itself.
A language that is being analysed is called an object language and that used to talk about an object language is called a metalanguage.
The apparent circularity on (21) is lessened if the object language and the metalanguage differ.
For example, if we change the object language to Modern German, as in (22.a), or adopt
Modern French as the metalanguage, as in (22 .b), the statements become more informative and less apparently circular.
(22) a.
b.

Das Buch ist aufdem Tisch is true iff the book is on the table.
The book is on the table est vrai si, et seulement si, le livre est sur la table.

Even using English as both the object language and the metalanguage, we can state the truth-conditions for our example sentence in a way that makes the import of (2O.a) clearer.
The statements in (23) specify the truth-conditions of the object sentence The book is on the table and must all hold if the proposition it expresses is true on some particular occasion of utterance.
According to the equivalence hypothesised between
(2O.a) and (2O.b), the specification of the truth-conditions shown in (23) thus provides a theory of the core meaning of the sentence The book is on the table.
(23) a.
b.
c.

There is a contextually unique entity which is in the (extensional) denotation of the lexeme BOOK.
There is a contextually unique entity which is in the (extensional) denotation of the lexeme TABLE.
The entity in (a) stands in the relation of being on the entity in (b).

Much of what is done in later chapters concerns the development of a metalanguage, still based on English but with a rigorous interpretation, that may be used to specify the truth-conditions of a range of English sentence types (and by hypothesis equivalent types in other human languages).
This metalanguage is used to connect the proposition(s) expressed by a sentence to states-of-affairs by detailing the relationship between the syntactic structure of the sentence and the denotations of the lexemes and other expressions that make this up.
In this way, the core meaning of the constituent expressions of a sentence is defined as the contribution they (or more strictly their denotations) make to the truth-conditions associated with that sentence.

16",34,16,1 Introduction,No info,No info,statement form sentence language hypothesis statement equivalent abbreviation phrase true interpretation statement core meaning sentence book table book table true book table course informative sentence term theory circular apparent circularity fact language explicate sentence language sentence language object language talk object language metalanguage apparent circularity object language metalanguage change object language modern german modern french metalanguage statement informative le circular da ist aufdem tisch true book table book table est vrai seulement livre sur table english object language metalanguage state sentence way import clearer statement object sentence book table proposition true particular occasion utterance equivalence specification theory core meaning sentence book table unique entity extensional denotation lexeme book unique entity extensional denotation lexeme table entity relation entity later chapter concern development metalanguage english rigorous interpretation specify range english sentence type hypothesis equivalent type human language metalanguage connect proposition sentence relationship syntactic structure sentence denotation lexeme expression way core constituent expression sentence contribution denotation sentence
16,"Interpretation and representation
1.2.2

Formalisation, models and sets

The notion of truth introduced in the previous subsection is based on the work of the logician Alfred Tarski who intended that the correspondence theory of truth would be used to provide a semantics for formal or logical languages quite unlike the languages that are spoken by human beings.
Hence, the application of the truth-conditional method has often been referred to as formal semantics.
Its formal nature also resides in the fact that it utilises very precise notations and concepts to define as accurately and as rigorously as possible how expressions in the object language are to be interpreted.
All aspects of the metalanguage in which the semantics is defined are precisely determined.
There is no room for ambiguity, vagueness or inaccuracy and hence much of the specification of the metalanguage is mathematical or logical in form.
One of the advantages of constructing a formal metalanguage with a precise interpretation is that it is thereby possible to check the consequences of one's theory and prove, or disprove, that such-and-such a consequence results from the way the semantics is set up.
Within logic, the construction of formal semantic systems is bound up with the idea of proving that certain forms of argument within some formal language are valid whilst others are not.
For example, within propositional logic the pattern of inference in (24) is valid, whilst that in (25) is not and these patterns are reflected in the English sentences that accompany the logical expressions below.
There is nothing in the syntax of the logical statements in (24) that determines that the inference in (24.c) is valid and it is the purpose of the semantic theory to show that whatever p and q stand for, the truth of the expression p —> q and of p always guarantees the truth of q while the truth ofp—>q and q does not always guarantee the truth of p.
(24) a.
b.
c.
(25) a.
b.
c.
p —> q p q p —> q q p

If Ethel is singing, the cat is unhappy.
Ethel is singing.
Therefore, the cat is unhappy.
If Ethel is singing, the cat is unhappy.
The cat is unhappy.
Therefore, Ethel is singing.

It is interesting to note here that while formalisation within syntactic theory has been accepted as a useful, if not a necessary, part of syntactic analysis, its adoption within semantics remains a subject of considerable debate.
However, the adoption of a formal interpretation procedure for a particular object language makes it possible to ascertain accurately whether or not one's theory is correct as an account of the meaning of particular object languages, just as a formalisation of syntax into formal rules or principles enables the syntactician to test whether they generate ungrammatical expressions or fail to generate grammatical ones.
It is furthermore possible with such systems to prove that a semantics is consistent (i.e. contains no internal contradictions) and complete (i.e. it derives the set of all valid arguments of the language as theorems).
Although these last two aspects of formal semantics will not be discussed in this book, the fact that these things can be more easily be proved with respect to semantic theories that are formalised than to those that are not will be taken as positive, if implicit, arguments in favour of formalisation as a tool of the semantic analysis of human languages.
17",35,17,1 Introduction,No info,No info,interpretation representation formalisation model notion truth previous subsection work logician alfred tarski correspondence theory truth semantics formal logical language unlike language human application method formal semantics formal nature fact precise notation concept define possible expression object language aspect metalanguage semantics room ambiguity vagueness inaccuracy much specification metalanguage mathematical logical form advantage formal metalanguage precise interpretation possible check consequence theory disprove consequence result way semantics logic construction formal semantic system idea certain form argument formal language valid others propositional logic pattern inference valid pattern english sentence logical expression nothing syntax logical statement inference valid purpose semantic theory show truth expression truth truth truth ethel cat unhappy ethel cat unhappy ethel cat unhappy cat unhappy ethel interesting note formalisation syntactic theory useful necessary part syntactic analysis adoption semantics subject considerable debate adoption formal interpretation procedure particular object language possible ascertain theory correct account particular object language formalisation syntax formal rule principle syntactician test ungrammatical expression generate grammatical one possible system semantics consistent internal contradiction complete derives valid argument language theorem last aspect formal semantics book fact thing respect semantic theory positive implicit argument favour formalisation tool semantic analysis human language
17,"1 Introduction
In the discussion above, much has been made of the fact that the propositions expressed by declarative sentences may differ in truth value with respect to different situations.
In other words, their truth is not absolute but depends on when the sentence expressing the proposition is uttered, on the location and other aspects of the context of utterance (including the modality of the sentence itself)- This idea may be formalised by constructing mathematical models of a state-of-affairs and defining truth with respect to particular models.
For example, a mathematical model can be constructed of the situation depicted in (13) with respect to which the propositions expressed by the sentences in (26) are all true.
A model of the situation depicted in
(15) does not, however, support the truth of (26.a), (26.b) or (26.d) but does support that of the other two sentences.
We thus speak of truth with respect to a particular model which represents the general context with respect to which a sentence is uttered.
(26) a.
b.
c.
d.
e.

The book is on the table.
There is a book on the table.
The book is open.
A table is supporting a book.
There is no cup of coffee.

As will be seen in more detail from Chapter 3 onwards, model-theoretic interpretation has two parts.
In the first place, there is a model that represents precisely what events, properties and relations make up the situation being modelled.
The model provides a description of the denotations of all the basic expressions
(content lexemes) in the object language.
This reflects the fact that human beings make statements in order to convey information about some state-of-affairs.
Although one can know the meaning of a sentence without knowing what specific situation is being talked about (by knowing its truth-conditions), the sentence conveys no information unless it is associated with particular individuals and the relations that hold between them.
The second part of the theory provides the rules for interpreting expressions in the object language with respect to any arbitrary model.
It does this by providing a recursive definition that specifies how the denotations of composite expressions are constructed from those of their component parts.
In other words, the model theory provides a specification of the truth-conditions of the sentences in the object language.
The truth-conditions as specified by the model theory hold independently of particular models, but the interpretation of particular sentences may be carried out only with respect to some model or other.
One may also think of model theory as constraining the sorts of model that are admissible for the interpretation of some language.
Not all possible models are interpretable according to a particular model theory and there is thus a two-way relation between the theory and the model.
On the one hand, models are constructed to represent a given set of phenomena and, on the other, the way that phenomena can be represented is constrained by the theory of interpretation.
From the linguistic perspective, the theory of meaning thus influences the way states-of-affairs can be represented and talked about.
It has been said that the models used to represent situations with respect to which sentences are to be interpreted are mathematical.
In fact, the models in this book are based on set theory.
The denotations of lexemes are thus modelled as sets containing
18",36,18,1 Introduction,No info,No info,discussion fact proposition declarative sentence truth value different situation word truth absolute sentence proposition uttered location aspect context utterance modality sentence idea mathematical model truth respect particular model mathematical model situation respect proposition sentence true model situation support truth support sentence truth respect particular model general context respect sentence uttered book table book table book open table book cup coffee detail onwards part first place model property relation situation model description denotation basic expression content lexeme object language fact human being statement order information meaning sentence specific situation sentence information particular individual relation second part theory rule expression object language respect arbitrary model recursive specifies denotation composite expression component part word model theory specification sentence object language model theory particular model interpretation particular sentence respect model model theory constraining sort model admissible interpretation language possible model interpretable particular model theory relation theory model hand model represent set phenomenon way phenomenon theory interpretation linguistic perspective theory meaning influence way model represent situation respect sentence mathematical fact model book set theory denotation lexeme set
18,"Beyond truth-conditions various sorts of entity or as mathematical functions over these.
The model theory uses fundamental notions from set theory, like set membership, union and intersection, etc., to specify how the denotations of more composite expressions can be constructed from these.
Ultimately the notion of truth is characterised according to the axioms of set theory, thus providing the rigorous and formal metalanguage for interpretation that was discussed above.
No previous knowledge of set theory is, however, assumed in the discussion of later chapters and all relevant concepts are introduced as and when they are needed.
13 Beyond truth-conditions
In the discussion of the last section, it was suggested that the central meaning of a sentence is the set of conditions that guarantee its truth with respect to any occasion of utterance.
This does not mean that truth-conditions exhaust the whole of sentence meaning, let alone all aspects of linguistic meaning.
A complete explication of the latter requires considerably more than just truth-conditions.
However, the hypothesis that truth-conditional meaning is central predicts that other aspects of meaning interact with this to derive the meaning of an utterance.
In other words, we may think of linguistic meaning being determined by the interaction of a number of theories dealing with particular domains of meaning.
This section takes a brief look at some of the other theories of meaning that are needed to interact with truth-conditional interpretation to provide a more adequate account of meaning than is possible using truth-conditions on their own.
1.3.1

Knowledge, behaviour and use

In the discussion of truth-conditions, we have referred only to the interpretation of declarative sentences uttered as statements.
But, of course, declarative sentences may be used to ask questions and issue commands, as well as make statements, and there are other sentence types that are typically used in the latter ways.
For example, the sentence in (27 .a) is a declarative that is typically used to make a statement.
The addition of a question mark in the orthography as in (27.b), orrisingintonation at the end of the sentence in spoken English, turns the statement into a question that has the same meaning as the interrogative in (27.c).
Finally, the imperative sentence in (27.d) is typically used in issuing a command.
(27) a.
b.
c.
d.

Jo kicked the cat again.
Jo kicked the cat again?
Did Jo kick the cat again?
Kick the cat again, Jo!

Although the sentences in (27) sentences are all typically used to do different things (make statements, ask questions and issue commands), they contain a shared component of meaning: they all make reference to a situation in which someone called
Jo engages in the activity of kicking a (contextually unique) cat and that this is not the first time he or she has done so.
These are, of course, the truth-conditions associated with the declarative sentence in (27.a), and the truth-conditions of a declarative sentence may be equated with its propositional content, which is distinct from the
19",37,19,1 Introduction,No info,No info,various sort entity mathematical function model theory us fundamental notion theory membership union intersection specify denotation composite expression notion truth set theory rigorous formal metalanguage interpretation previous knowledge set theory discussion chapter relevant concept discussion central meaning sentence condition guarantee truth respect occasion utterance whole sentence meaning linguistic meaning complete explication latter hypothesis meaning central predicts interact meaning utterance word linguistic meaning interaction number theory particular domain meaning brief look theory meaning interact interpretation adequate account possible knowledge behaviour use discussion interpretation declarative sentence statement course declarative sentence question issue command statement sentence type latter way sentence statement addition question mark orthography orrisingintonation end sentence spoken english turn statement question meaning interrogative imperative sentence command cat cat kick cat kick cat sentence sentence different thing statement question issue command contain component meaning reference situation someone engages activity unique cat first time course declarative sentence declarative sentence propositional content distinct
19,"1 Introduction proposition expressed by a sentence and from the truth or falsity of that proposition on some occasion of utterance.
It is propositional content that may be considered to be the common core of meaning that syntactically related sentences share, whatever their surface form.
Thus, each of the sentences in (27) share the same propositional content but in their different uses bear a different relation to that content.
(27 .a) states that the situation described by the propositional content actually occurred.
On the other hand, (27.b) and (27.c) ask whether the situation described by the propositional content has occurred or not, i.e. whether the proposition expressed by (27.a) is true or false with respect to some context of utterance, and (27.d) is typically uttered to bring about a situation in which the proposition expressed by (27.a) is true.
The sentences in (27) thus possess the same propositional content but differ in their illocutionary force.
The way content relates to use forms the study of speech act theory which concentrates, not so much on the abstract meaning of a sentence, but on what people are doing when they utter it.
It, therefore, takes into account extralinguistic information like speaker intentions (what perlocutionary effect a speaker intends to have by the utterance of an expression), socio-cultural knowledge
(whether the utterance of some expression is felicitous or not) and so on.
Such things do not form part of truth-conditional meaning, but can form the basis of the relation between abstract sentence meaning and the meaning that an utterance of that sentence has in particular situations.
Another aspect of meaning that does not come within the realm of truth-conditional semantics has its basis in discourse behaviour.
This concerns the sorts of inferences that are drawn by participants in a discourse.
In Section 1.2, we looked at the sorts of meaning relations between sentences that are within the possible domain of truth-conditional semantics.
These relations allow inferences to be drawn from utterances because the truth of a paraphrase or an entailment, or the falsity of a contradiction, are guaranteed by the truth of the proposition expressed by the original sentence.
The assumption that participants in a discourse are being co-operative and, in general, telling the truth is one of the conversational maxims put forward by the philosopher Paul Grice in the nineteen-sixties.
This assumption allows inferences to be made from entailments even if the participants have no way of checking the truth or falsity of any assertion.
As mentioned in Section 1.1.2, inferences can be drawn from discourse that do not follow directly from the truth-conditions of a sentence.
We have already seen an example in (7) above which is repeated below.
(7) a.
b.
c.

Bertie: Is Fiona a good lecturer?
Ethel: She has a good line in sweaters.
Bertie (thinks): Fiona is not a good lecturer.

The inference in (7.c) from the sentences in (7.a) and (7.b) is not guaranteed by the truth-conditional meaning of the latter, but by the apparent flouting of a conversational maxim.
Ethel, the speaker of (7.b), replies to Bertie's question in (7.a) in an apparently irrelevant manner.
In order for Bertie to maintain the assumption that the former is sticking to the co-operative principle in (28), he must look for some relevant piece of information that Ethel has not given that answers the original question.
Since Ethel has been obviously irrelevant and not answered the question in (7.a) directly, thus flouting the maxim of relation in (29.c), the most consistent inference to make is that
20",38,20,1 Introduction,No info,No info,proposition sentence truth falsity proposition occasion utterance propositional content common core meaning sentence surface form sentence propositional content different different relation content state situation propositional content hand situation propositional content proposition true false respect context utterance uttered situation proposition true sentence posse propositional content illocutionary force way content form study speech act theory much abstract meaning sentence people account extralinguistic information speaker intention perlocutionary effect speaker utterance expression knowledge utterance expression felicitous thing form part meaning form basis relation abstract sentence meaning utterance sentence particular situation aspect meaning realm semantics basis discourse behaviour concern sort inference drawn participant discourse relation sentence possible domain semantics relation inference drawn utterance truth paraphrase entailment falsity contradiction truth proposition original sentence assumption participant discourse general truth conversational maxim philosopher paul grice assumption inference entailment participant way truth falsity assertion inference discourse sentence bertie fiona good lecturer ethel good line sweater bertie fiona good lecturer inference sentence latter apparent flouting conversational maxim ethel speaker reply bertie question irrelevant manner order bertie assumption former principle relevant piece information ethel answer original question ethel irrelevant question maxim relation consistent inference
20,"Beyond truth-conditions she is intending to convey that Fiona is not a good lecturer, but does not wish to say so directly.
(28)

The co-operative principle: make your contribution such as is required, at the stage at which it is required, by the accepted purpose or direction of the talk exchange in which you are engaged.

Grice suggested a number of conversational maxims, which are given in (29).
The interaction of these maxims with the truth-conditional import of the full sentences that underlie the expressions uttered in any discourse gives rise to conversational implicatures that allow a speaker to convey information over and above what is actually said (i.e. in terms of truth-conditions) in any exchange.
Implicatures of the sort illustrated by (7) are highly context-specific and often rely on assumptions being made by the hearer that are cmpletely dependent on the context.
For example, a similar exchange to that in (7.a) and (7.b) where the context contains information to the effect that there is a good lecturer who has a good line in sweaters will lead Bertie to infer the opposite of (7.c), i.e. that Fiona is a good lecturer.
Since entailments result from truth-conditional meaning, which is constant from context to context, implicatures must form part of a theory of meaning that is non-truth-conditional.
Grice's theory of conversation has been very successful in accounting for some of the non-truth-conditional meaning of certain expressions, giving further support to the idea that truth-conditions form a central core of meaning that interacts with other modular theories to account for a greater range of phenomena.
(29) a.
i.

Maxim of quantity: make your contribution as informative as is required (for the current purposes of the exchange), ii. do not make your contribution more informative than is required.
b.
Maxim of quality: i. do not say what you believe to be false.
ii. do not say that for which you lack adequate evidence.
c.
Maxim of relation: make your contribution relevant.
d.
Maxim of manner: i. avoid obscurity of expression, ii. avoid ambiguity, iii. be brief.

Grice's work has not gone unchallenged or unrevised in the literature and, in recent years, an attempt has been made to reduce the maxims in (29) to a single explanatory principle that guides all inference making.
Relevance theory reduces all the maxims to one, essentially the maxim of relation, and defines relevance in terms of cognitive effect (the amount and importance of information contained in an inferred proposition for a particular participant in a particular situation) balanced against processing effort (the number of steps that need to be taken to get to the inferred proposition).
A definition of these ideas is given in (30).

21",39,21,1 Introduction,No info,No info,convey fiona good lecturer wish principle contribution stage accepted purpose direction talk exchange grice number conversational maxim interaction maxim import full sentence underlie expression uttered discourse rise conversational implicatures speaker convey information term exchange assumption hearer dependent context similar exchange context information effect good lecturer good line sweater lead bertie infer opposite fiona good lecturer entailment result constant context context implicatures part theory grice theory conversation successful accounting certain expression support idea form central core meaning modular theory account greater range phenomenon maxim quantity contribution informative current purpose exchange contribution informative required maxim quality false lack adequate evidence maxim relation contribution relevant maxim manner avoid obscurity expression avoid ambiguity brief grice work unchallenged unrevised literature recent year attempt maxim single explanatory principle guide inference relevance theory maxim maxim relation defines term cognitive effect amount importance information inferred proposition particular participant particular situation balanced processing effort number step proposition idea
21,"1 Introduction
(30)

Theory of relevance:
Other things being equal, the greater the cognitive effect achieved by the processing of a given piece of information, the greater its relevance for the individual who processes it.
b.
Other things being equal, the greater the effort involved in the processing of a given piece of information, the smaller its relevance for the individual who processes it.
Wilson and Sperber (1988:140)
Relevance theory has currently developed into a theory of cognition, rather than a theory of linguistic meaning specifically, and, although it has some advantages over the Gricean approach, it is less well known and there is, as yet, no basic introduction to the subject.
For these reasons, it will not be used in Chapter 7 where inference is discussed in more detail.
a.

1.3.2
Context
One of the most important influences on meaning is that of the context of utterance.
The context plays a vital role in determining how a particular utterance is to be interpreted on any occasion.
In particular, it is needed to restore ellipses, resolve ambiguity, provide referents for deictic elements and resolve anaphoric dependencies.
The dialogue in (31) illustrates how important context is in enabling interpretation to be carried out.
(31) a.
b.
c.
d.
e.

Fiona: Hello?
Jo: In here!
Fiona: Any chance of a coffee?
Jo: There's no milk in the fridge.
Fiona: Oh hell!
I bought some yesterday.
You must have used it all in that disgusting punch you made.

As (31) shows, sentences in discourse (or written texts) may not be complete realisations of full sentences and so not sufficient for the purposes of truth-conditional interpretation.
To interpret (31.b) and (31.c), it is necessary to recover the system sentences that underlie them: to I'm in here and Is there any chance of a coffee?, respectively.
The resolution of such ellipsis is dependent on the context, since an utterance of the expression in (31 .b) could be interpreted as asserting that any number of entities are in here, depending on the circumstances.
Just restoring ellipses is not sufficient to enable the interpretation of (31) to take place, however.
The context must also provide referents for all the deictic expressions.
The term deixis is derived from the Classical Greek verb deiknumi meaning 'to point out' or 'show' (the Latin translation being demonstrativus, hence the term demonstrative pronoun).
The purpose of deictic elements is to link aspects of the meaning of the sentence containing them to the context in which it is uttered, either spatially, temporally or in terms of the participants in the discourse.
Deixis may be realised as words, particles or morphological processes.
For example, in (31) the indexical pronoun / in (31.b) (restored from context) refers to Jo, but in (31.e) it refers to Fiona, i.e. the respective speakers of the expressions.
Similarly, the pronoun
22",40,22,1 Introduction,No info,No info,theory relevance thing equal greater cognitive effect piece information greater individual process thing equal greater effort processing piece information smaller individual process wilson sperber relevance theory theory cognition theory linguistic meaning advantage gricean approach le known basic subject reason inference detail context important influence meaning context utterance context vital role particular utterance occasion particular restore ellipsis resolve ambiguity referent deictic element anaphoric dependency dialogue important context interpretation fiona hello fiona chance coffee milk fridge fiona hell yesterday punch sentence discourse text realisation full sentence sufficient purpose interpretation interpret necessary recover system sentence underlie chance coffee resolution ellipsis dependent context utterance expression number entity circumstance ellipsis sufficient enable interpretation place context referent deictic expression term classical greek verb deiknumi meaning point latin translation demonstrativus term demonstrative pronoun purpose deictic element link aspect meaning sentence context term participant discourse deixis word particle morphological process indexical pronoun context fiona respective speaker expression pronoun
22,"A note on method you in (31 .e) refers to the hearer in the discourse who happens to be Jo in this instance, but could be someone else in another context.
Furthermore, context is required to indicate the location indicated by the term here in (31 .b) (i.e. near the speaker) and the time when Fiona bought the milk in (31.e) (the day before the day on which the utterance of the sentence is made).
Grammatical tense is also deictic and serves to refer to times relative to the context of utterance at which the situations described by any declarative sentences are deemed to take place.
Thus, in (31 .b), (31 .c) and (31 .d), the relevant time is the present (the time of utterance) whilst in both sentences in
(31.e) (ignoring the interjection) the relevant time is prior to the time of utterance.
Other aspects of the dialogue in (31) also require the assistance of the context to enable interpretation to take place.
For example, the pronoun some in (31 .e) is to be interpreted as some milk, picking up on the mention of milk in the previous utterance.
The anaphoric pronoun it in the final sentence refers to the milk that Fiona bought yesterday, information that is not explicitly stated in the utterance.
In addition to anaphoric resolution of this sort, the context resolves the ambiguity of the homonym
PUNCH which is interpreted as the drink and not the action because of the fact that the subject of this latter part of the conversation is milk, something that is drunk.
This short example indicates the extent to which interpretation relies on the context of utterance.
The relation between context and interpretation is, however, extremely complex.
Although ti^ere are certain aspects that have been incorporated into truth-conditional semantics (as, for example, tense, cf. Chapter 8, and certain sorts of anaphora), exactly how the context resolves ambiguities, anaphoric dependencies and ellipsis and the way participants in a discourse tie up referential expressions to particular individuals remains obscure.
In what follows, it is recognised that the context is almost always required to fix the reference of expressions (and disambiguate ambiguous utterances), but we will proceed on the assumption that a theory of truth-conditional interpretation accounts for the meaning of sentences considered as abstract units of the language system.
The definition of the meaning of a sentence is given in the discussion above in terms of truth-conditions and truth-conditions are associated with propositional content.
Since the latter is independent of context, then truth-conditional meaning may also be treated independently of context, even though, as we have seen, the actual interpretation of a specific utterance requires information provided by the context.
Whether or not a theory of context can be constructed that can interact with truth-conditional meaning to provide a fuller account of utterance interpretation than is yet available is a topic for future research.
1.4

A note on method

The scene has now been set for the development of the theory that is to be the subject of the rest of this book.
A sketch has been given of those aspects of meaning that form the central domain of inquiry, of some of those that do not, and of the main tenets of the theory to be adopted below.
Before starting on the long road to Chapter 10, however, something must be said about the methodology adopted in the following chapters.
In order to avoid problems with context, like those discussed in the last section, all interpretation is carried out, not directly on the sentences of a language or even
23",41,23,1 Introduction,No info,No info,note method hearer discourse instance someone context context location term speaker time fiona milk day day utterance sentence grammatical tense deictic serf refer time relative context utterance situation declarative sentence place relevant time present time utterance sentence interjection relevant time prior time utterance aspect dialogue assistance context enable interpretation place pronoun milk picking mention milk previous utterance anaphoric pronoun final sentence milk fiona yesterday information utterance addition anaphoric resolution sort context ambiguity homonym punch drink action fact subject latter part conversation milk drunk short extent interpretation context utterance relation context interpretation complex certain aspect incorporated semantics tense certain sort anaphora context ambiguity anaphoric dependency ellipsis way participant discourse referential expression particular individual obscure context fix reference expression disambiguate ambiguous utterance assumption theory interpretation account meaning sentence abstract unit language system meaning sentence discussion term propositional content latter independent context meaning actual interpretation specific utterance information context theory context interact meaning provide fuller account utterance interpretation available topic future research note method scene development theory subject rest book sketch aspect meaning form central domain inquiry main tenet theory long road methodology chapter order avoid problem context last interpretation sentence language
23,"1 Introduction on their structural descriptions, but on a logical language into which the object language is translated.
The logical translation of a declarative sentence is intended to represent the proposition expressed by the utterance of that sentence on some particular occasion.
As it fully represents all the information supplied by the context of utterance, it represents only one reading of an ambiguous sentence at a time, the one intended on a particular occasion.
For this reason, the translation language must be a disambiguated language, i.e. permit no ambiguity.
Furthermore, translation resolves all anaphoric, deictic and referential uncertainties of the utterance of the sentence, thus making sure that each expression has a determinate denotation.
Essentially, the translation of a sentence can be thought of as the representation of the proposition derived from the sentence plus its context of utterance.
It acts, therefore, as an intermediate step between the syntactic analysis of an expression and its truth-conditional semantic interpretation.
Whether this level of representation is necessary, or not, is a controversial issue.
Richard Montague assumed that it was merely convenient rather than necessary, but later linguistic research has indicated that, at least as far as anaphoric and deictic reference is concerned, a representation intermediate between syntax and interpretation is required.
It is assumed henceforth that translation is an intrinsic part of any semantic analysis.
Interpretation is carried out on the logical translation of a sentence, and so provides an indirect interpretation of the latter.
It is usual within formal semantics to provide not only an explicit semantic theory for an object language, but also an explicit syntax.
Only by doing this can it be guaranteed that the principle of compositionality is being maintained.
In studying the formal semantics of human languages, it would be a difficult task to specify a complete (and formally rigorous) definition of the syntax of a particular language before tackling the semantics.
Hence, it is customary to define grammar fragments that determine only a subset of the set of grammatical sentences of the object language with the semantic interpretation specified for these sentences (via their translation into a logical language).
Once this interpretation has been successfully defined, the coverage of the fragment is extended to take in more constructions.
In this way, it is hoped that ultimately a complete formal grammar of a language, containing both an explicit syntax and semantics, can be obtained (this hope is, however, still a very long way from realisation).
This method will be pursued in Chapters 2 to 6 of this book, beginning with a formal analysis of a fragment of English including proper names and simple intransitive, transitive and ditransitive sentences.
This is expanded into an explicit account of co-ordination, passives and noun phrases.
In the final chapters, the syntactic aspect of the analysis is not so explicit, because of the debates about the proper syntactic treatment of such things as tense, modality and finite and non-finite complementation.
Some discussion will, however, be given of some of the difficulties presented by these constructions for the syntax.
It is commonplace nowadays to assume that interpretation depends on the surface constituent structure of a sentence, although different theories adopt a more or less abstract interpretation of this level of syntactic representation.
It is not the intention of this book to support or criticise any particular theory of syntax, however.
The semantic method outlined below can be adapted to many different syntactic theories and each one has its own merits and leads to its own problems from the semantic point of view.
To maintain relative neutrality between theories, the syntactic
24",42,24,1 Introduction,No info,No info,structural description logical language object language logical translation declarative sentence represent proposition utterance sentence particular occasion information context utterance ambiguous sentence time particular occasion reason translation language language permit ambiguity translation anaphoric deictic referential uncertainty utterance sentence sure expression denotation translation sentence representation proposition sentence context utterance act intermediate step syntactic analysis expression semantic interpretation level representation necessary controversial issue richard montague convenient necessary linguistic research least anaphoric deictic reference representation intermediate syntax interpretation henceforth translation intrinsic part semantic analysis interpretation logical translation sentence indirect interpretation usual formal semantics explicit semantic theory object language explicit syntax principle compositionality formal semantics human language difficult task complete rigorous syntax particular language tackling semantics customary define grammar fragment determine subset grammatical sentence object language semantic interpretation sentence translation logical language interpretation coverage fragment construction way complete formal grammar language explicit syntax semantics hope long way realisation method chapter book formal analysis fragment english proper name simple intransitive transitive ditransitive sentence explicit account passive noun phrase final chapter syntactic aspect analysis explicit proper syntactic treatment thing tense modality finite complementation discussion difficulty construction syntax commonplace assume interpretation surface constituent structure sentence different theory le abstract interpretation level syntactic representation intention book support criticise particular theory syntax semantic method many different syntactic theory merit lead problem semantic point view relative neutrality theory syntactic
24,"Further reading framework that is adopted in this book is that of simple context-free phrase structure grammar.
This type of grammar has advantages and disadvantages, but has the merit of being well known and easily describable.
Each grammar fragment in the following pages, therefore, takes the form of a set of context-free phrase structure rules together with an appropriate lexicon.
The translation of each sentence generated by the grammar into a disambiguated logical language is carried out in parallel with its derivation according to the specified phrase structure rules, in accordance with the rule-to-rule hypothesis in (5) above.
Finally, before we move on to the real work of the book, it should be noted that until time is introduced into the model in Chapter 8, every example sentence is given in its simple past tense form.
It is usual within most introductions to logic in linguistics to put sentences into the present tense.
Unfortunately, the present tense in
English is rarely used to report events neutrally, but has aspectual and futurate interpretations that can sometimes obscure the intended sense of an example.
No such problems are associated with the simple past, however, and this is used throughout
Chapters 2 to 6.
The proper interpretation of this tense is not, however, discussed until
Chapter 8.
1.5

Further reading

Each of the chapters in this book ends with a section of further reading.
These give references to other introductory texts that cover all or some of the topics discussed in each chapter and also to one or two more advanced books or articles on specific topics that have been mentioned in the text.
Not all the topics that are discussed in the text are given further reading and the references that are given are very selective, only those works that the current author thinks are accessible and/or of reasonable importance being given.
Although these references, and the accompanying bibliography, are in no way comprehensive, it is hoped that readers will use them to get more details of specific issues and to treat them as suitable starting points for more protracted research.
There are a number of basic introductions to general linguistic semantics that make good background reading for this book: see especially Lyons (1981) and
Hurford and Heasley (1983), but Palmer (1981) and Leech (1974) may also be consulted, although the latter two books are somewhat idiosyncratic.
Other introductory textbooks to general linguistic semantics and logic for linguists are
Chierchia and McConnell-Ginet (1990), Kempson (1977), All wood, Andersen and
Dahl (1977) and McCawley (1981) which will be referenced below for specific topics.
The criteria of adequacy for semantic theory in (1) above are introduced and discussed in Kempson (1977: ch.
1), Chierchia and McConnell-Ginet (1990: ch.
1) discusses the domain of semantics, and the distinction between semantics and pragmatics is discussed in Levinson (1983: 1-35).
Compositionality is discussed in
Partee (1984) and Partee, ter Meulen and Wall (1990: 317-338) (although both presuppose some familiarity with formal semantic concepts).
The logical meaning relations of entailment, paraphrase and contradiction are discussed mainly in textbooks on logic: see Guttenplan (1986: 1-41) for a good and simple introduction to the notion of logical inference (other references are given in Chapter 7).
Levinson
25",43,25,1 Introduction,No info,No info,framework book simple phrase structure grammar type grammar advantage disadvantage merit describable grammar fragment page take form set phrase structure rule appropriate lexicon translation sentence logical language parallel derivation specified phrase structure rule accordance hypothesis real work book time model sentence simple past tense form usual introduction logic linguistics sentence present tense present tense english report event aspectual futurate interpretation obscure intended sense problem simple past chapter proper interpretation tense chapter book end reading reference introductory text cover topic advanced book article specific topic text topic text reading reference selective work current author accessible reasonable importance reference bibliography way comprehensive reader use detail specific issue suitable starting point research number basic introduction general linguistic semantics good background reading book lyon hurford heasley palmer leech latter book idiosyncratic introductory textbook general linguistic semantics logic linguist chierchia kempson wood andersen dahl mccawley specific topic criterion adequacy semantic theory kempson chierchia discus domain semantics distinction semantics pragmatic levinson compositionality partee partee ter meulen wall presuppose familiarity formal semantic concept logical meaning relation entailment paraphrase contradiction logic guttenplan good simple notion logical inference reference levinson
25,"1 Introduction
(1983: ch.
3) provides an introduction to implicature and Ch.
4 of that book discusses presupposition, as does McCawley (1981: ch.
9).
A more recent discussion of the phenomenon with extensive references is Burton-Roberts (1989) and, for a somewhat different view, see also Chierchia and McConnell-Ginet (1990: 286-317).
The distinction between homonymy and polysemy is discussed at length in Lyons (1977:
550-573) and ambiguity (and vagueness, a topic not touched on here) is discussed in
Kempson (1977: ch.
8), McCawley (1981: 5-11) and Lyons (1977: 396-409).
On denotation, reference and sense, see Chierchia and McConnell-Ginet (1990: 46-60;
77-88) and Lyons (1977: 174-215).
For a technical discussion of the difference between extension and intension, see Carnap (1956: 16-32) and McCawley (1981:
401-406).
On propositions, see Lyons (1981:106-109, passim), Hurford and Heasley
(1983: 15-24) and Allwood, Andersen and Dahl (1977: ch.
3).
For an outline of the sort of truth-conditional semantics pursued in this book, see Dowty, Wall and Peters
(1981: ch.
1) (which gives an introduction to Montague semantics, but at a much more difficult level than that given in this book), Partee, ter Meulen and Wall (1990: ch.
5;
200-203) and for a general discussion of mathematical versus psychological approaches to meaning, see Partee (1979).
On truth and truth-conditions, consult
Lyons (1977: 167-173), Kempson (1977: ch.
3), Chierchia and McConnell-Ginet
(1990: 61-65), Lycan (1984: 13-43), and, for a philosophical view, essays 1 to 5 in
Davidson (1984).
Speech act theory is discussed in Levinson (1983: ch.
5) and for context, see Lyons (1981: ch.
9) and Levinson (1983: passim).
Kempson (1977: chs.
4 & 5) also discusses language use and pragmatics, and relevance theory is discussed in Sperber and Wilson (1986), Wilson and Sperber (1988) and Blakemore (1987).

26",44,26,1 Introduction,No info,No info,implicature book presupposition mccawley recent discussion phenomenon extensive reference different view distinction homonymy polysemy length lyon ambiguity vagueness topic discussed kempson mccawley lyon denotation reference sense chierchia lyon technical discussion difference extension intension carnap mccawley proposition lyon passim hurford heasley allwood andersen dahl outline sort semantics book dowty wall peter montague semantics much difficult level book partee ter meulen wall general discussion mathematical psychological approach meaning partee truth consult lyon kempson chierchia lycan philosophical view essay davidson speech act theory levinson context lyon levinson passim kempson chs language pragmatic relevance theory sperber wilson wilson sperber blakemore
26,"2

2.1

Predicates and arguments

Translating English into a logical language

In this chapter and the next, we will lay the foundations on which a good deal of logical semantics is built.
In accordance with the discussion in Chapter 1, we first define a logical language into which sentences of English are translated in order to circumvent the problems of ambiguity and underdeterminacy found in the object language.
Having defined the translation language, and specified the procedure for translating simple English sentences into it, our attention will turn to the interpretation of these logical expressions in terms of their truth-conditions, thus providing an indirect interpretation of the corresponding English sentences.
2.7.7

The syntax of LP

Like all languages, natural or artificial, logical languages have a syntax, i.e. a set of rules for constructing composite expressions from simpler ones.
The logical language described in this chapter, called LP, contains expressions that fall into one of four logical categories: individuals, predicates, formulae and operators (or connectives).
Expressions in each of the first three categories can be further subdivided into two sorts: constants, which have a fixed interpretation, and variables, which do not.
These two sorts of expression correspond, roughly, to content words (e.g. table, run,
Ethel) and pronominal expressions (e.g. she, they) in natural languages, respectively.
This chapter deals only with constants, but variables will become increasingly important in later chapters.
Sentences in natural languages translate into formulae in LP which have the logical category t (as sentences have the syntactic category S).
Such expressions are constructed by combining individual and predicate expressions in much the same way that sentences are composed of combinations of noun phrases and verbs.
Just as certain noun phrases in a sentence can be described as the complements of the main verb, so individual expressions, of logical category e, perform the role of arguments of the predicates in a formula.
Predicates in LP may take zero or more individuals as arguments and the number of arguments that a predicate takes is referred to as the valency of the predicate.
Predicate constants and variables are subcategorised according to their valency, just as verbs are subcategorised according to whether they are intransitive, transitive or ditransitive, etc. All predicates are classed as members of the logical category Pred and their subcategorisation according to the number of individual arguments they take is shown by the use of a subscripted number to the right of the category symbol.
Thus, for example, the category Predi contains all those predicates that take just one individual as an argument, the category
Pred2 contains all those predicates that take two individual arguments, and so on.
Unlike verbs in natural languages, however, there is no upper limit on the number of arguments a predicate in LP can take; thus the language may contain an infinite number of subcategories of predicates, Pred«, where n is any number between zero
27",45,27,2 Predicates and arguments,No info,No info,predicate argument english logical language next foundation good deal logical semantics accordance discussion logical language sentence english order circumvent problem ambiguity underdeterminacy object language translation language procedure translating simple english sentence attention interpretation logical expression term indirect interpretation english sentence syntax language natural artificial logical language syntax rule composite expression simpler logical language expression fall logical category individual predicate formula operator connective expression category constant interpretation variable sort expression correspond content word table ethel pronominal expression natural language constant variable important later chapter sentence natural language translate formula logical category sentence syntactic category expression individual predicate expression much way sentence combination noun phrase verb certain noun phrase sentence complement main verb individual expression logical category role argument predicate formula predicate individual argument number argument predicate valency predicate predicate constant variable valency verb intransitive transitive ditransitive predicate classed member logical category subcategorisation number individual argument use subscripted number right category symbol category predi predicate individual argument category predicate individual argument verb natural language upper limit number argument predicate take language infinite number subcategories pred number
27,"2 Predicates and arguments and infinity.
For the purposes of translating from English into LP, however, we can safely ignore all predicates that have a valency higher than 3.
Thus, only four of the possible subcategories of Pred are used below: Pred0, Predi, Pred2 and Pred3.
The basic syntactic rule for constructing formulae in L P is one that combines a predicate expression with the number of individual arguments it requires.
Thus, an expression in Pred! combines with one individual expression to make a formula, an expression in Pred2 combines with two individual expressions to make a formula and, in general, an expression in Pred,, combines with n individual expressions to make a formula, where n is some positive whole number.
The predicate is written to the left of the arguments which are enclosed within round brackets and separated from each other by commas.
The appropriate rule appears in (1) where the superscripted number appearing with the individual category symbol, e, does not represent a subcategory of individual, but simply the number of the individual in the argument structure of the predicate.
This ensures that predicates appear with the right number of arguments for their valency.
The symbol < in (1) is read as is less than, or equal to, so that in the rule n may be zero or any number greater than zero.
Pred0 is, therefore, a valid subcategory of Lp, but one that takes no arguments to make a formula.
Hence, Predo is equivalent to a formula, i.e. Pred0 = t.
We shall meet some
English verbs that may be associated with this category in the next section.
(1) t -> PrednCe1^2,...,^), 0 < n.

Given the syntactic rule in (1) and some (abstract) expressions in LP (a, b, c, d being individual constants, P a one-place predicate, Q a two-place predicate and R a threeplace predicate), then all the expressions in (2) are well-formed formulae (often abbreviated as wff) in Lp, but those in (3) are not.
(2) a.
d.

P(a).
R(c,b,c).
b.
e.

Q(c,d).
P(b).
c.
f.

R(b,a,d).
Q(b,b).

(3) a.
d.

Q(c).
a(P).
b.
e.

R(b,a,b,b).
Rabc.
f.
c.
P(e).

2.1.2

A grammar fragment for English

P(a,a)

Having defined the (very simple) syntax of Lp, we are in a position to translate sentences of English into it.
To show how translation works, we shall provide a grammar for a small fragment of English and then develop a translation procedure that associates every sentence generated by the grammar with at least one logical expression.
As discussed at the end of Chapter 1, grammars for parts of a language are called grammar fragments and are often used in formal semantics to develop specific and precise theories about the meanings of the expressions they analyse.
The grammar developed in this chapter and in Chapter 3 covers only a very small part of English and a syntactically very unexciting part at that.
Although we begin by analysing a rather small and uninteresting set of sentences, by the time we get to the end of the book, we will have covered a quite considerable number of English constructions and have armed ourselves with the machinery to tackle many more.
From the apparent triviality of the initial examples, a powerful semantic theory of a range of constructions in English will be developed.
28",46,28,2 Predicates and arguments,No info,No info,predicate argument infinity purpose english predicate valency higher possible subcategories predi basic syntactic rule formula combine predicate expression number individual argument expression individual expression formula expression individual expression formula general expression individual expression formula positive whole number predicate argument round bracket comma appropriate rule superscripted number individual category symbol subcategory individual number individual argument structure predicate right number argument valency symbol le equal rule number greater valid subcategory argument formula predo equivalent formula english verb category next syntactic rule abstract expression individual constant predicate predicate threeplace expression formula wff rabc grammar fragment english simple syntax position translate sentence english show translation work small fragment english translation procedure associate sentence grammar least logical expression end grammar part language grammar fragment formal semantics specific precise theory expression analyse grammar small part english part small uninteresting set sentence time end book considerable number english construction armed machinery many apparent triviality initial example powerful semantic theory range construction english
28,"Translating English into a logical language
The type of syntactic grammar adopted in this book is a simple context-free phrase structure grammar.
There are many other forms of grammar, of course, that may well be syntactically more adequate than this, but context-free phrase structure grammars have the advantage of being easy to understand and simple to use.
For example, it is always possible using a context-free phrase structure grammar to decide in a finite number of steps whether some string of words is generated by the grammar and it is therefore quite easy to check whether it generates ill-formed sentences of the object language.
On the other hand, the well-known disadvantages of context-free phrase structure grammars are not particularly relevant for our purposes, since we are interested in semantics rather than syntax and the points made should be relevant to almost any syntactic theory.
The adoption of phrase structure grammar in this book is for expository purposes only and the syntactic analyses presented are not intended to be definitive.
Readers are invited to try to apply the semantic methods used in later chapters to the analyses of the same constructions determined by their favourite syntactic theory.
The sentences that are generated by the grammar in this chapter are of the simplest sort.
They contain between one and three noun phrases, consisting of either a single proper noun or a common noun plus the definite article, the, together with a single verb, subcategorised according to the number of noun phrases it can appear with.
(4) gives examples of five sentence types which contain intransitive (4.a), transitive (4.b) and ditransitive (4.c & d) verbs.
The final sentence, (4.e), contains an impersonal verb which appears with the meaningless subject pronoun, it.
(4) a.
b.
c.
d.
e.

Chester ran.
Chester ate the cake.
Ethel gave the cake to Jo.
Ethel gave Chester the cake.
It rained.

The sentences in (4) (and many, but finitely many, more besides) can all be generated by the grammar in (5), which is called Gu in conjunction with the simple lexicon in (6).
Common abbreviations for categories are adopted.
Thus, S stands for sentence, NP for noun phrase, Npr for proper noun, N for common noun, Vj for intransitive verb, V, for transitive verb and Vdt for ditransitive verb.
Impersonal verbs are assigned to the category Vo.
A syntactic feature, symbolised as [+FIN], indicates that a verb (of any subcategory) is finite (and, until tense is introduced in Chapter 8, in the past tense, as mentioned in Chapter 1).
In Chapter 3, non-finite verbs, i.e. verbs in their bare stem or citation forms, are introduced using the feature [-FIN].
In rules
3 d , 5 d and 7 d , below, the items to, it and the are introduced directly in the syntactic rule and do not appear in the lexicon.
These, and some other expressions, are treated in this way, either because they do not contribute significantly to the semantics of a phrase and so have no translation in Lp, as with to and if, or because their contribution to the semantics of an expression is stated directly in the translation of the rule itself (as with didn't below).
The definite article the is treated in the same way for expository reasons only.
It is introduced here in order to increase the interest of the grammar fragment which would otherwise only contain proper names as exemplars of NPs.
The semantics of the will be dealt with more fully in Chapter 6, while the means to rectify the other departures from the principle of compositionality will also
29",47,29,2 Predicates and arguments,No info,No info,english logical language type syntactic grammar book simple phrase structure many form grammar course phrase structure grammar advantage easy simple use possible phrase structure finite number step word grammar easy check sentence language hand disadvantage phrase structure relevant purpose interested semantics syntax point relevant syntactic theory adoption phrase structure grammar book expository purpose syntactic analysis intended definitive reader semantic method later chapter analysis construction favourite syntactic theory sentence simplest sort noun phrase single proper noun common noun definite article single verb number noun phrase example sentence type contain intransitive transitive ditransitive verb final sentence impersonal verb meaningless subject pronoun chester chester cake ethel cake ethel chester cake sentence many many grammar conjunction simple lexicon common abbreviation category stand sentence noun phrase npr proper noun common noun intransitive verb transitive ditransitive verb impersonal verb category syntactic feature verb subcategory finite tense past tense verb verb bare stem citation form feature rule item syntactic rule lexicon expression semantics translation contribution semantics expression translation rule definite article way expository reason order increase interest grammar fragment proper name exemplar np semantics departure principle compositionality
29,"2 Predicates and arguments be provided in later chapters when other theoretical machinery has been introduced.
Another non-standard feature of the rules in (5) is the fact that the noun phrases are given subscripted numbers.
These numbers are strictly unnecessary from the syntactic point of view, but essential for translation and interpretation purposes.
They may be thought of as marking the grammatical function of the noun phrase within the sentence: so that NP, functions as the syntactic subject, NP2 as the syntactic direct object and NP3 as the syntactic indirect object.
For the sake of variation, three, not very sophisticated, rules giving the passive counterparts of the transitive and ditransitive rules 2G,, 3G, and 4G, are given in (7).
S -» NP,
S -> NP, Vt[+FIN] NP2.
S -» NP, Vdt[+FIN] NP2 to NP3.
S -» NP, Vdt[+FIN] NP2 NP3.
S-MtV 0 [+FIN].
NP->N p r .
NP->theN.

(5) a.
b.
c.
d.
e.
f.
g.

1G,
2G,
3G,
4G,
5G,
6G,
7G

(6) a.
b.
c.
d.
e.
f.

N pr -> {Prudence, Ethel, Chester, Jo, Bertie, Fiona}.
N —» {book, cake, cat, golfer, dog, lecturer, student, singer).
Vj[+FIN] —> {ran, laughed, sang, howled, screamed).
Vf+FIN] -> {read, poisoned, ate, liked, loathed, kicked).
Vdt[+FIN]-> {gave}.
V0[+FIN] -» {rained, snowed).

(7) a.
8G1: S -> NPI was Vt[PAS] by NP2.
b.
9G,: S -> NP, was Vdt[PAS] to NP2 by NP3.
c.
10G,: S -> NP, was Vdt[PAS] NP2 by NP3.
d.
VJPAS] —» {read, poisoned, eaten, liked, loathed, kicked).
e.
Vdt[PAS] -> {given}.
A grammar like G, is said to generate a sentence, £ , if (and only if) there is a derivation of £ from the symbol S using the syntactic rules and the lexicon.
The derivation of a sentence is the procedure whereby, starting with S, one category in a string is expanded at a time using a rule of the grammar until the string contains only words in the lexicon.
The derivation of the sentence Ethel poisoned the cat using the grammar, G,, is shown in (8) where each line in the derivation has a number on the right hand side showing the rule used to derive the new string of symbols from the line before.
The symbol Lex indicates that lexical substitution has taken place and this is represented in (8.e) as having taken place all at once.
Equivalently, the generation of a sentence can be shown by a phrase structure tree as in (9).
(8) a.
b.
c.
d.
e.

30

S.
NP, V,[+FIN] NP2.
NprV,[+FIN]NP2.
Npr Vf+FIN] the N.
Ethel poisoned the cat.

2G,
6G,
7G,
Lex",48,30,2 Predicates and arguments,No info,No info,predicate argument chapter theoretical machinery feature rule fact noun phrase number number unnecessary syntactic point view essential translation interpretation purpose grammatical function noun phrase sentence syntactic subject syntactic direct object syntactic indirect object sake variation sophisticated rule passive counterpart transitive ditransitive rule vdt vdt prudence ethel chester bertie fiona book cake cat golfer dog lecturer student singer howled read loathed vdt snowed npi pa vdt pa vdt pa vjpas read loathed kicked vdt pa grammar generate sentence derivation symbol syntactic rule lexicon derivation sentence procedure category string time rule string word lexicon derivation sentence ethel cat grammar line derivation number right hand side rule new string symbol line symbol lex lexical substitution place place generation sentence phrase structure tree nprv npr ethel cat lex
30,"Translating English into a logical language
(9)

Ethel poisoned cat

The notion of derivation and the use of phrase structure trees are important, because, as we will see in the next section, translation from English into LPis not done on the strings of words that make up sentences, but on the syntactic structures of those sentences.
Before going on to translation, however, let us first add another two rules to the grammar, both of which introduce the third person singular past tense form of the copular verb be.
This verb has a number of semantic functions, one of which is to equate two entities, to indicate that they are identical.
The rule in (10) allows the generation by Gx of sentences containing this use of the copula (often called equative sentences) like those in (11).
(10)
(11) a.
b.
c.
wasNP2.
Fiona was the singer.
Chester was the dog.
Jo was Jo.

Another copular construction in English involves predicative adjectives.
Here, the copula does not seem to have any real semantic function (except to carry information about tense which we are ignoring for the moment), but serves instead to provide a means of associating an adjective with the subject NP, as in (12).
(12) a.
b.

Chester was crazy.
The singer was messy.

Syntactically we can analyse the sentences in (12) as consisting of a noun phrase followed by the verb was followed by an adjective.
This is provided by the rule in
(13.a) with the additions to the lexicon in (13.b).
(13) a.
b.

12G,: S -> NP was A.
A —> {happy, crazy, messy, disgusting, wealthy}.

31",49,31,2 Predicates and arguments,No info,No info,english logical language ethel cat notion derivation use phrase structure tree important next translation english lpis string word sentence syntactic structure sentence translation rule third person singular tense form copular verb verb number semantic function entity identical rule generation sentence use copula equative sentence fiona singer chester dog copular construction english predicative adjective copula real semantic function information tense ignoring moment serf mean adjective subject chester crazy singer messy analyse sentence noun phrase verb adjective rule addition lexicon happy crazy messy disgusting wealthy
31,"2 Predicates and arguments
2.1.3

The translation procedure

Having defined this small grammar, we can proceed to translate the sentences it generates into logical expressions in LP.
First of all, it is necessary to associate the syntactic categories in G! with their corresponding logical categories in LP.
As already mentioned, all proper nouns and definite noun phrases are associated with individual constants, i.e. they translate into LP as expressions of category e.
For the moment, common nouns are assigned to no logical category as they have no direct interpretation in this fragment.
This situation will be rectified in Chapter 6 when the interpretation of noun phrases is tackled in more detail.
Verbs, which combine with noun phrases to form sentences, are naturally associated with the general semantic category of predicate.
As verbs may take different numbers of noun phrases to make grammatical sentences, so they translate into different subcategories of predicate according to the number of noun phrases, including subjects, that appear with them in sentences of English.
Hence, intransitive verbs, which take no objects but do have a subject, translate into one-place predicates.
Transitive verbs, on the other hand, which subcategorise for a direct object and appear with a subject, thus translate into two-place predicates.
Ditransitive verbs have three dependent noun phrases including their subjects and so translate into three-place predicates in LP.
Although impersonal verbs do appear with a syntactic subject in
English, the dummy subject pronoun, it, has no semantic significance and has no denotation.
Hence, it may be ignored in the logical translation and impersonal verbs translate into zero place predicates.
Predicative adjectives semantically behave in a similar fashion to verbs.
For example, they may be used to ascribe properties to entities, as in the sentence Chester was disgusting where the adjective ascribes the property of being disgusting to the entity denoted by the word Chester.
Such adjectives translate them into 1-place predicates.
(We ignore two-place predicative adjectives like, afraid of Jo, here.)
Finally, the logical category assigned to S is t, the category of formulae.
The correspondences between categories of d and those of Lp are summarised in (14), where the symbol => means translates into.
(14) a.
b.
c.
d.
e.
f.
g.
h.

NP=>e.
Npr=> e.
V o ^ Predo.
v l= > Pred,.
v,=> Pred2.
Pred3.
A=>]

S => t.

The category assignments given in (14) determine the way the translation of expressions containing members of the different syntactic categories are carried out.
According to the LP construction rule in (1), above (repeated below), an n-place predicate combines with n individual expressions to make a formula.
(1)

32 t^Pred n (e 1 ,e 2 ,...,e n ).",50,32,2 Predicates and arguments,No info,No info,predicate argument translation procedure small grammar translate sentence logical expression necessary associate syntactic category logical category proper noun definite noun phrase individual constant translate expression category moment common noun logical category direct interpretation fragment situation rectified interpretation noun phrase tackled detail verb noun phrase form sentence general semantic category predicate verb different number noun phrase grammatical sentence different subcategories number noun phrase subject sentence english intransitive verb object subject translate predicate transitive verb hand direct object subject translate predicate ditransitive verb dependent noun phrase subject translate predicate impersonal verb syntactic subject english dummy subject pronoun semantic significance denotation logical translation impersonal verb translate place predicate predicative adjective similar fashion verb property entity sentence chester adjective property disgusting entity word chester adjective translate predicate predicative adjective afraid logical category category formula correspondence category symbol mean translates predo category assignment determine way translation expression member different syntactic category construction rule predicate individual expression formula
32,"Translating English into a logical language
Hence, a predicate that translates an intransitive verb combines with the individual expression that translates its subject, while a predicate translating a transitive verb combines with the translations of the subject and object noun phrases to make a formula, and so on.
This is not sufficient, however, to get the right translations for any
English expression generated by grammar d , because the order in which arguments appear when combined with a predicate has yet to be specified.
For example, the transitive verb construction analysed in d by rule 2 d (repeated in (15.a)) translates into an expression containing a two place predicate translating the verb and the two individuals which translate the subject and object noun phrases.
There are two possible well-formed formulae that meet this description depending on the relative orders of the two individual expressions.
These alternatives are shown in (15.b) and
(15.c) where the superscript prime, \ following the syntactic category symbol stands for the LP expression that translates an English expression analysed by that symbol in some actual derivation.
A symbol like V,', therefore, stands in place of the translation of the actual transitive verb that is introduced under the node Vt in some particular sentence.
In translation rules, V,' thus operates as a variable over the translations of all transitive verbs in the grammar.
Just as the usual category symbols allow the statement of regular rules of combination without the need to specify their internal structure, so this notation allows the generalisation of translation rules regardless of the particular expressions that actually appear in any given sentence.
(15) a.
b.
c.

2G,: S -> NP, Vt[+FIN] NP,.
Vt'(NPr,NP2').
Vtf(NP2\NP,').

In Lp, as in English, the order in which arguments appear is semantically significant, so that, as we will see in Section 2.2.3, (15.b) is interpreted differently from (15.c).
Since ordinary transitive sentences like Ethel poisoned Chester are not ambiguous in English, only one of the translations in (15) must be chosen as the translation of rule 2 d .
Thus, in addition to the logical category assignment in (14), we also need rules to tell us how to combine predicates and their arguments to obtain the translations of particular English constructions.
In Chapter 1, one of the criteria for adequacy for a semantic theory is that it should adhere to the principle of compositionality.
This requires the interpretation of an expression to be a function of the meanings of its component parts and the way they are put together.
In other words, to interpret an expression we need to have access to the syntactic rules by which it is constructed.
Because we are interpreting natural languages indirectly, via translation into LP, we must show compositionality in the translation procedure and thus take syntactic information into account as we build up Lp representations.
This can be done by providing a translation rule for each syntactic rule in the grammar, so that 2 d , for example, is paired with only one of the possible translations in (15).
As discussed in Chapter 1, this approach to compositionality adheres to the rule-to-rule hypothesis because each rule in the syntax is paired with a corresponding translation rule and, thus, indirectly with a rule of semantic interpretation, as we will see below.
In accordance with this hypothesis, therefore, every rule in d is matched with a corresponding translation rule.
These appear in (16) with numbers that parallel those of the syntactic rules of Section 2.1.2.
Thus, T l d translates rule I d , T2d translates rule 2, and so on.
33",51,33,2 Predicates and arguments,No info,No info,english logical language predicate translates intransitive verb individual expression subject predicate transitive verb combine translation subject object noun phrase formula sufficient right translation english expression grammar order argument predicate transitive verb construction rule expression place predicate translating verb individual translate subject object noun phrase possible formula meet description relative order individual expression alternative superscript prime syntactic category symbol expression english expression symbol actual derivation symbol place translation actual transitive verb particular sentence translation rule variable translation transitive verb grammar usual category symbol statement regular rule combination internal structure notation generalisation translation rule particular expression sentence npr vtf english order argument significant ordinary transitive sentence ethel chester ambiguous english translation translation rule addition logical category assignment rule combine predicate argument translation particular english construction criterion adequacy semantic theory principle compositionality interpretation expression function component part word interpret expression access syntactic rule natural language translation compositionality translation procedure syntactic information account build representation translation rule syntactic rule grammar possible translation approach compositionality hypothesis rule syntax corresponding translation rule semantic interpretation accordance hypothesis rule corresponding translation rule number parallel syntactic rule translates translates
33,"2 Predicates and arguments
(16) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.

TIG,: S => W(NP').
T2G,: S =» Vt'(NP,\NP2').
T3G,: S=*Vdt'(NPi\NP2\NP3f).
T4G,: S=>Vdt'(NP,>,NP3',NP2').
T5G,: S => V o \
T6G,: NP=>N pr \
T7G,: NP=»the-N\
T8G,: S => Vt'(NP2\NPD.
T9G,: S=>Vdt'(NP3',NPr,NP2').
T10G,: S => VdtJ(NP3',NP2',NP,').

This leaves the two copular rules, 1 I d and \2GU to be translated.
In the latter rule, which introduces predicate adjectives, the copula has no significant semantic effect (other than to signal tense) and so is ignored in the translation, leaving the oneplace predicate translating the adjective to apply directly to the translation of the subject, as shown in (17).
(17)

T12G,: A'(NP').

In the equative construction, rule HGi, however, the copula does have semantic effect, as it identifies the two entities named by the subject and complement noun phrases and so must have a representation in LP.
Since the word was is introduced directly by the rule, it does not appear in the lexicon and so its semantic effect must be captured directly in the translation of the rule.
One of the reasons for treating the equative copula in this way is that it has an interpretation defined in the logic itself, as we will see later in this chapter, which differentiates it from normal lexical items, which translate as arbitrary constants.
The logical nature of the meaning of was in this rule is directly shown in its translation.
Instead of following the usual method for translating words discussed below, it is represented by a new sort of expression in Lp, a logical operator which appears between the LP expressions that are its arguments.
The logical operator associated with the equative copula is =, the equals sign, requiring the new syntactic rule for Lp shown in (18.a).
This yields the translation of
1 lGi shown in (18.b), completing the set of translation rules for Gi.
(18) a.
b.
t->(e = e).
TUG,: (NPr=NP 2 ').

Before these rules can be used to translate sentences of English generated by d , however, some way must be specified of translating English words into expressions of LP.
Firstly, in order to bring out the fact that different inflectional forms of the same 'word' do not differ in their fundamental meaning (ignoring tense and number information), each word is stripped of any inflectional markers.
In translating into Lp, therefore, we are interested only in lexemes and not word forms as such.
Thus, the English word forms give, gives, given and gave are translated into
Lp as a single form because they are all forms of the same lexeme, the same meaning unit.
Because Lp is an artificial language, it is possible to translate lexemes into arbitrary symbols which then function as basic words or constants in the language.
This is usually done, for example, in exercises in predicate logic where the relation
34",52,34,2 Predicates and arguments,No info,No info,predicate argument tig vdt vdt vdt npr vdtj leaf copular rule latter rule introduces adjective copula significant semantic effect signal tense translation oneplace translating adjective translation subject equative construction rule hgi copula semantic effect entity subject complement noun phrase word rule lexicon semantic effect translation rule reason equative copula way interpretation logic normal lexical item arbitrary constant logical nature meaning rule translation usual method word new sort expression logical operator expression argument logical operator copula equal sign new syntactic rule yield translation set translation rule tug rule translate sentence english way english word expression order fact different inflectional form fundamental meaning tense number information word inflectional marker interested lexeme word form english word form single form form lexeme meaning unit artificial language possible translate lexeme arbitrary symbol basic word constant language exercise predicate logic relation
34,"Translating English into a logical language between the symbols of the logic and the lexemes of English (or any other language) is not significant.
Hence, the symbol P might translate a verb like run, runs, ran, Q could stand for eat, eats, ate, and so on.
Associating English words with completely arbitrary symbols in this way, however, would mean that someone using LP would have to learn vocabulary lists that give the translations of all English words, just like learning a foreign natural language.
This is possible, of course, but unnecessarily tedious and serves no real purpose as there are no native speakers of LP to tell us what the words of their language translate as.
Thus, instead of translating lexemes of
English into arbitrary symbols that need to be learned for each lexeme, we can state a simple rule that provides the LP symbol that translates any lexeme in the object language.
This rule translates any word in English as its citation form (which is taken to be the base form of the expression without any inflectional affixes; cf. Huddleston
(1984:102)), with capital letters replaced by their lower-case counterparts and followed by a prime,'.
The latter indicates that the symbol is not a word in the object language, e.g. English, but an expression in the translation language, i.e. LP.
For example, the English word forms gives, give, gave, given are all associated with the citation form give and the translation of any of these word forms into LP is thus give \
More examples appear in (19).
This way of translating content words into LP is, of course, just one of many possible ways of representing the logical constants associated with such expressions in a logical language.
Other writers use other means of representing translations: for example, Lyons (1977) uses the base form of a word in double quotes, e.g. ""give"", while Hurford and Heasley (1983) puts the form into capitals, e.g. GIVE, and other representation are possible.
The one adopted here is the one adopted by Montague and is the one very commonly used by formal semanticists.
It is very important in translating into LP to bear in mind that an expression followed by a prime is not an expression of English but an expression of LP.
They are translation equivalents, but not the same word.
It is essential for the reader to keep in mind the fact that LP expressions are not English, even if they appear to be similar.
(19) a.
Ethel => ether.
b. cake => cake'.
c. gave =»give\ d. sang =>• sing'.
e. ate=> eat'.
f.
eaten => eat'.
g. messy => messy'.
Because LPis an unambiguous language, it is necessary to be able to distinguish the different meanings of homonyms.
Homonyms are different lexemes which are associated with the same word forms but which have different meanings.
For example, the English noun punch may describe a kind of drink or a physical action.
In Lp, these meanings must be kept separate, so that simple translation into a citation form plus prime is not quite sufficient to provide the procedure for translating words in English into constants of LP.
To resolve this, we can resort to the simple expedient of associating each constant in Lp with a superscripted number, so that gives translates into give1' and not just give'.
Where a word form is homonymous, it translates into a number of different constants in Lp which have the same basic form but differ in
35",53,35,2 Predicates and arguments,No info,No info,english logical language symbol logic lexeme english language significant symbol verb run run eat eats english word arbitrary symbol someone vocabulary list translation english word foreign natural language possible course tedious real purpose native speaker word language translate translating lexeme english arbitrary symbol lexeme state simple rule symbol translates lexeme object language rule word english citation form base form expression inflectional affix huddleston capital letter counterpart prime latter symbol word object language english expression translation language english word form citation form translation word form example way content word course many possible way logical constant expression logical language writer use mean translation lyon us base form word double hurford heasley form capital representation possible montague formal semanticist important translating bear mind expression prime expression english expression translation equivalent word essential reader mind fact expression english similar ethel ether cake cake sing eat eat messy messy lpis unambiguous language necessary able distinguish different meaning homonym homonym different lexeme associated word form different meaning english noun punch kind drink physical action meaning separate simple translation citation form prime sufficient provide procedure translating word english constant resolve resort simple expedient constant number translates word form homonymous translates number different constant basic form differ
35,"2 Predicates and arguments their superscript.
For example, the two senses of the noun punch are represented as punch1' (the drink) and punch2' (the action).
In this way, the translation of a homonymous word in any sentence results in a unique representation in Lp, ensuring, as required, that the translation is unambiguous.
The same approach can be taken for proper names that may have more than one referent.
If, for example, there were two people called Jo, one man and one woman, they would be distinguished in LP as jo1' and jo2' and so on.
The selection of which Jo is meant or which meaning of a homonym is intended is determined by context and no attempt is therefore made here to provide a way of getting to the intended referent or meaning.
All that is necessary for the purpose of interpretation is that this disambiguation is done by the context and that Lp representations invoke only one of a range of alternatives.
In general, of course, most word forms are not homonymous and so there is no need to distinguish their different senses.
In these cases, the superscript associated with the translation is omitted in the exposition that follows for ease of representation, since there is no possible ambiguity.
(As discussed in Chapter 1, polysemy is not incorporated into the current system and is thus ignored here and elsewhere.)
The full rule for translating words of English into LP is given in (20).
This provides the means for translating any word in the object language into an appropriate constant in the logical language together with a means of showing all possible alternative readings of the word.
(20)

Lexical translation rule (TLex): If Wis a set of inflectionally related word forms {w h w2y..., wm} of which wt is the citation form, then the translation of any word, wh in W, is W/Zi \ where n is greater than or equal to 1.

We are now in a position to translate any sentence generated by the grammar, d , into Lp.
The translation procedure is entirely mechanical and is based on the syntactic derivation of the object language sentence.
The procedure provides each line in the derivation of an English sentence with a translation of that line as determined by the translation counterpart of the syntactic rule used to derive that line.
For example, if there is a line in a derivation NP Wh with translation Vj'(NP') then the NP can be expanded as Npr using Rule 6 d .
This rule is associated with the translation rule in (16.f) which equates the translation of the noun phrase with that of the proper noun it contains.
The next line in the derivation is therefore Npr Vs with translation Vj'(Npr').
Hence, just as one line in a syntactic derivation is derived from the previous one by substituting the string on the right of a syntactic rule for an instance of the symbol on its left, so the translation of the sentence is derived by substituting the translation of the expanded symbol with the translation of the syntactic rule that was used.
To illustrate this further, (21) shows the derivation and parallel translation of the sentence Jo laughed according to G h The first line shows the start symbol S which tells us that we are deriving a sentence.
This symbol is then rewritten as the string in
(21.c) using rule 1G! which has the translation in (21.d) according to TIG i in (16.a).
The NP node in (21 .c) is then expanded using rule 6G,, giving the string in (21 .e) and translation in (21.f), as discussed above.
Now we can substitute lexical items for all the symbols in (21 .e) to give (21 .g).
At the same time we apply the lexical translation rule in (20) to each word in the English sentence and substitute the result in the appropriate place in the translation in (21.f), yielding (21.h) as the translation of the
36",54,36,2 Predicates and arguments,No info,No info,predicate argument superscript sens noun punch drink action way translation homonymous word sentence unique representation translation unambiguous approach proper name referent people man woman selection homonym context attempt way referent meaning necessary purpose interpretation disambiguation context representation range alternative general course word form homonymous need distinguish different sens case superscript associated translation exposition ease representation possible ambiguity polysemy current system full rule word english mean translating word object language appropriate constant logical language possible alternative word lexical translation rule tlex wi word form citation form translation word greater equal position translate sentence grammar translation procedure mechanical syntactic derivation object language sentence procedure line derivation english sentence translation line translation counterpart syntactic rule derive line line derivation translation npr rule rule associated translation rule translation noun phrase proper noun next line derivation npr translation npr line syntactic derivation previous right syntactic rule instance symbol translation sentence translation symbol translation syntactic rule illustrate show derivation parallel translation sentence first line show symbol sentence symbol string rule translation tig node rule string translation substitute lexical item symbol time lexical translation rule word english sentence substitute appropriate place translation translation
36,"Translating English into a logical language
English sentence.
The numbers on the right of the examples in (21) (and below) indicate the rules that license each step in the derivation.
The translation procedure is formally defined in (22), and, as mentioned above, it is entirely mechanical.
If the rules are applied correctly, any sentence generated by Gi can be paired with its translation in LP.
A more complex translation than that in (21) is shown in (23) to give a better idea of the method.
(21) a.
b.
c.
d.
e.
f.
gh.

S.
S\
NPVi.
V,f(NPf).
NPTW,
V^Np/).
Jo laughed.
laugh'(jo').

(22)

Translation procedure: If i is a line in a syntactic derivation with a translation i' and A is a category in i with translation A' in i \ then if the next line in the derivation i+1 is obtained from i by expanding A as a string
X by Rule n or Lex, then the translation of i+1 is obtained by replacing
A' in i' by X' the translation of X obtained by applying Translation Rule n or TLex.

(23) a.

S
=>S\
NP, was Vt[PAS] by NP2
=> Vl>(NP2>,NP1>).
The N was VfPAS] by NP2
=»V t '(NP,\the-N').
The N was VJTAS] by Npr
=>Vt'(Npr',the-N').
The cat was poisoned by Ethel
=> poison' (ether ,the-cat').
b.
c.
d.
e.

1G,
TIG,
6G,
T6G,
Lex
TLex

8G,
7G,
6G,
Lex

Exercise 2.1:
Show the derivations and translations of the following English sentences using the format of (23): i.
Ethel poisoned the cat.
ii.
The student gave the cake to the lecturer.
iii.
The dog was crazy.

The procedure described in (22) and illustrated in (23) is called a top down derivation and translation, but a sentence can also be translated bottom up.
With this method a sentence is translated by building a phrase structure tree, starting with the translations of the lexical items and then combining them in the way specified by different syntactic rules.
This results in a translation tree that parallels the syntactic one and the translation of the whole sentence appears at the top.
This can be shown
37",55,37,2 Predicates and arguments,No info,No info,english logical language english sentence number right example rule license step derivation translation procedure mechanical rule sentence translation complex translation better idea method npvi npf nptw laugh translation procedure line syntactic derivation translation category translation next line derivation string rule lex translation translation translation rule tlex pa vfpas vjtas npr npr cat ethel poison ether tig lex tlex lex exercise derivation translation english sentence format ethel cat student cake lecturer dog crazy procedure top derivation translation sentence bottom method sentence phrase structure tree translation lexical item way different syntactic rule result translation tree parallel syntactic translation whole sentence top
37,"2 Predicates and arguments
(24) poison' (ethel' ,the_cat')

The cat was poisoned by

Ethel by annotating each node in a phrase structure tree with its associated translation as done in (24) which gives the bottom-up version of the sentence The cat was poisoned by Ethel that was derived by the top-down method in (23).
Trees like this are referred to as analysis trees in this book.
Although the phrase structure tree representation is often more perspicuous and reveals the parallelism of the translation to the syntax very clearly, the derivation procedure illustrated in (23) is the safer method and readers are recommended to stick to that way of translating until they are confident of their translating skills.
Once the technique has been mastered, however, therigorousderivational method may be dispensed with, provided that it is clear that the translation given for each phrase in the sentence is licensed by some rule.
If there is any doubt, the appropriate translation rule should be referred to.
Exercise 2.2:
Draw analysis trees like that in (24) for the sentences in Exercise 2.1.

2.2

Interpreting Lp

We have now devised a procedure for translating (a restricted set of) sentences in
English into a formal language, LP.
As we have seen, formulae in Lp are unambiguous and have all contextual uncertainties resolved in order to provide a representation of the semantic content of the sentences in the object language which they translate.
Translation into a logical language in this way is a useful method of representing the intended meaning of an English sentence on some occasion of utterance, but does not in itself constitute a theory of semantics.
What needs to be done to complete the
38",56,38,2 Predicates and arguments,No info,No info,predicate argument poison ethel cat ethel node phrase structure tree translation version sentence cat ethel method tree analysis tree book phrase structure tree representation perspicuous parallelism translation syntax derivation procedure safer method reader stick way confident translating skill technique therigorousderivational method clear translation phrase sentence rule doubt appropriate translation rule exercise analysis tree sentence exercise devised procedure translating sentence english formal language formula unambiguous contextual uncertainty order representation semantic content sentence language translate translation logical language way useful method intended english sentence occasion utterance theory semantics complete
38,"Interpreting LP project is to interpret the formulae of Lp in terms of their truth-conditions, as discussed in Chapter 1.
In this way, the English sentences generated by d are provided with an indirect interpretation.
There are two parts to the interpretation procedure.
In the first place, interpretation takes place, not in a vacuum, but with respect to a representation of some state-of-affairs.
Such a representation is called a model and models have two parts: an ontology and a denotation assignment function or naming function.
The word ontology comes from the Greek word meaning to be or exist and refers to that branch of philosophy (a subpart of metaphysics) that has to do with the study of what exists in the world or some part of the world.
The ontology of the model provides the basis for interpretation in that it defines what exists and so what can be talked about.
If something is not recognised as existing in the model then it cannot be referred to or discussed by any language that the model is being used to interpret.
This means, of course, that a model must contain abstract, as well as material, entities, otherwise we could never talk about things like love or virtue, etc. The assumption that abstract things exist just as concrete ones do may seem strange, but the differences between them may be captured by structuring the ontology in different ways.
For example, it is possible to put different entities (the things that exist) into different sorts according to their basic properties.
A basic distinction can be made between all entities depending on whether they are of an abstract or concrete sort.
The semantic properties of the words that are associated with these two sorts of entity may differ from each other in predictable ways.
Exactly what sorts of entity should be recognised as making up adequate ontologies for natural language interpretation is a vexed and controversial issue.
Indeed, much current debate in formal semantics centres around just this question.
The problem will, however, not be addressed in this book.
The models that are defined in this and later chapters all contain only concrete, physically manifested, entities.
For present purposes, therefore, it is not necessary to worry about any fundamental differences between the entities in a model.
The important thing that we are concerned with is the relation between the entities in the model and expressions of the language being interpreted.
Once the things that exist in the state-of-affairs being modelled have been determined, it is necessary to associate the basic expressions of the language being interpreted with the entities that constitute the ontology.
The basic expressions of the object language are here taken to mean the expressions of the language belonging to the major parts of speech (e.g. nouns, verbs, adjectives) in contrast to the grammatical (or functional expressions (e.g. determiners, conjunctions, auxiliary verbs)).
In LP, the basic expressions are the individual and predicate constants associated with the nouns, verbs and adjectives of the language being translated in contrast with the purely logical expressions like operators and quantifiers (see later chapters).
Logical expressions take their interpretation, not from the model, but from the theory of interpretation, the model theory itself, thus reflecting the fact that such expressions have an invariant interpretation independent of the particular situation being modelled.
The denotations of constant expressions, however, may change from model to model.
For example, the name Prudence could be associated with a cat in one model, but a human being in another, or two entities could be singing in one model, but not in another, and so on.
On the other hand, the equative copula was does not change its function of identifying two entities from situation to situation.
Thus, the interpretation
39",57,39,2 Predicates and arguments,No info,No info,project interpret formula term way english sentence indirect interpretation part interpretation procedure first place interpretation place vacuum respect representation representation model model part ontology denotation assignment function function word ontology greek word meaning branch philosophy subpart metaphysics world part world ontology model basis interpretation defines model discussed language model interpret mean course model abstract well material entity thing love virtue assumption abstract thing concrete strange difference ontology different way possible different entity thing different sort basic property basic distinction entity abstract concrete sort semantic property word sort entity predictable way entity adequate ontology natural language interpretation controversial issue much current debate formal semantics centre question problem book model later chapter contain concrete entity present purpose necessary worry fundamental difference entity model important concerned relation entity model expression language thing determined necessary associate basic expression language entity constitute ontology basic expression object language mean expression language major part speech noun verb adjective contrast grammatical functional expression determiner conjunction auxiliary verb basic expression individual predicate constant noun verb adjective language contrast logical expression operator chapter logical expression interpretation model theory interpretation model theory fact expression invariant interpretation independent particular situation denotation constant expression model model name prudence model human entity model hand copula change function entity situation situation interpretation
39,"2 Predicates and arguments of a constant expression must be defined for each model, but those of grammatical expressions are fixed by the theory of interpretation.
The association of constants with entities in the model is done by the denotation assignment function.
As discussed in Chapter 1, the denotation of an expression is the relation between the expression and things that exist in the world.
Since the world for our purposes is given by the model of the world or situation, what is denoted by an expression in Lp is something in the model.
The denotation of an expression has two aspects: an extension, the sorts of things in the world that an expression can be used to refer to, and an intension, the concept that determines the extension of the expression.
A discussion of the latter aspect of denotation is left until the final four chapters of the book and the semantics defined in Chapters 2 to 6 is purely extensional.
Hence, the denotation assignment functions of the models in these chapters associate each constant in the logic with its extension.
In the discussion that follows, therefore, the denotation of any expression is given by its extension, and what particular expressions denote are referred to as their extensions.
The general term denotation is used when talking about the relation between classes of expressions in the object language and the sorts of thing (entities, sets or relations) in the model that those expressions are associated with.
This latter term is neutral between intension and extension, and, while Chapters 2 to 6 deal only with extensional denotations, what is said about denotation in these chapters is relevant to intensional denotation as it is defined in Chapters 8 to 10.
Since the relation between a constant (or content word in English) and the entities it denotes is conventional and arbitrary, the denotation assignment function provides the necessary foundation for talking about the entities in the model by specifying precisely what is happening in the situation being modelled.
For example, consider a simple situation in which there are three entities, a book, a chair and a child, where the latter is sitting on the chair reading the book.
A model of this situation has an ontology consisting of the three entities involved in it: the book, the chair and the child.
The denotation assignment function of the model specifies that the English words book, chair and child (extensionally) denote the book, the chair and the child, respectively.
It also specifies that the transitive verbs read and sit on (extensionally) denote a relation between the child and the book in the first case and the child and the chair in the second and that the verbs sit and read both denote things that the child is doing, and so on.
Together, the specification of an ontology and an assignment of denotations to basic expressions in a language thus gives a complete description of some state of affairs.
From this complete description we can ascertain the truth or falsity of any formula in the language to be interpreted.
How this is done is determined by the model theory which constitutes the second part of the interpretation procedure.
This provides a definition of how the denotations of non-basic (i.e. composite) expressions in Lp are to be determined from the denotations of their constituent parts in accordance with the principle of compositionality.
Ultimately, it defines what it is for a formula to be true with respect to some model by specifying the truth-conditions for formulae in Lp.
It thus constitutes the central part of the theory of semantics pursued in this book.
The rest of this chapter is given over to defining a model of a fairly simple (but non-trivial) situation, and providing an informal account of the model theory.
The
40",58,40,2 Predicates and arguments,No info,No info,argument constant expression model grammatical expression theory interpretation association constant entity model denotation assignment function denotation expression relation expression thing world world purpose model world situation expression model denotation expression aspect extension sort thing world expression refer intension concept extension expression discussion latter aspect denotation final chapter book semantics chapter extensional denotation assignment function model chapter associate constant logic extension discussion denotation expression extension particular expression denote extension general term denotation relation class expression object language sort entity relation model expression latter term neutral intension extension chapter deal extensional denotation denotation chapter relevant intensional denotation chapter relation constant content word english entity conventional arbitrary denotation assignment function necessary foundation entity model situation simple situation entity book chair child latter chair book model situation ontology entity book chair child denotation assignment function model english word book chair child denote book chair child transitive verb read denote relation child book first child chair second verb sit denote thing child specification ontology assignment denotation basic expression language complete description state affair complete description ascertain truth falsity formula language model theory second part interpretation procedure denotation composite expression denotation constituent part accordance principle compositionality true respect model formula central part theory semantics book rest model simple situation informal account model theory
40,"Interpreting LP interpretation procedure thus defined may be used to interpret any formula in LP.
Where these formulae translate sentences generated by d , the procedure provides an indirect interpretation of this fragment of the grammar of English.
2.2.1

Individuals and identity

As discussed above, model-theoretic interpretation provides the definition of the truth-conditions of formulae with respect to a model of some state-of-affairs.
In order to interpret Lp, therefore, we must first specify a model and then detail a set of rules for ascertaining the truth or falsity of formulae with respect to this model.
The model defined in this chapter is a very simple one, containing eight entities: two men, two women, a cake, a cat, a dog and a book.
The ontology of this model, called Mi, could thus be represented pictorially as in (25).
Using pictures to represent the entities that exist in particular models helps to bring out the way that the theory of semantics presented in this book associates linguistic expressions with non-linguistic objects.
However, they are somewhat inconvenient (and expensive) to have in a textbook and the entities in models will thus be represented using symbols, rather than pictures.
Any symbols may be used to represent these entities, provided only that there is no ambiguity in the symbols used.
A unique symbol should thus represent each separate entity in the model.
For example, one might represent the eight entities in M, by using the first eight Arabic positive whole numbers, as in (26.a), or the last eight letters of the Roman alphabet in their uppercase form, as in (26.b).

The entities in M,

41",59,41,2 Predicates and arguments,No info,No info,interpretation procedure interpret formula formula translate sentence procedure indirect interpretation fragment grammar english individual identity interpretation formula respect model order interpret model detail rule truth falsity formula respect model model simple one entity men woman cake cat dog book ontology model picture represent entity particular model help way theory semantics book associate linguistic expression object inconvenient expensive textbook entity model symbol picture symbol entity ambiguity symbol unique symbol separate entity model entity first arabic positive whole number last letter roman alphabet uppercase form entity
41,"2 Predicates and arguments
(26) a.
b.

1
S

2
T

3
U

4
V

5
W

6
X

7
Y

The fact that there are eight different symbols in (26.a) and (26.b) indicates that there are eight different entities in the model whose properties are determined by the denotation assignment function.
However, since the entities in the model M! are two men, two women, a cat, a dog, a book and a cake, it is more convenient for mnemonic purposes to represent these entities by using English words in boldface uppercase letters with subscripts differentiating entities where necessary, as in (27).
The English words in upper case letters in (27) are intended to represent actual entities and are not expressions of English.
This is an important point and it should be borne in mind throughout the book that symbols like MANi only ever stand for entities and never for expressions in English, Lp or any other language.
(27)

The entities in M,:
MAN2

WOMAN!

WOMAN2

CAT

DOG

BOOK

CAKE.

Entities in the world are typically referred to by using proper names or definite descriptions, i.e. types of noun phrase.
In the translation procedure developed earlier, such noun phrases are translated into individual constants in LP, which are therefore analysed as denoting entities in the model.
The denotation assignment function in model M! thus associates each individual constant in Lp with a single entity in the model, the entity that the constant denotes.
Only one entity is associated with each individual constant because LP is an unambiguous language and so each constant must have an unambiguous denotation in a particular model.
In M,, all the entities except for the book and the cake have proper names.
One of the women is called
Fiona, the other woman is called Ethel, the men are called Jo and Bertie, the dog is called Chester and the cat is called Prudence.
So, part of the denotation assignment function associates the LP constants translating these names with the appropriate entities, as shown in (28).
(28) a. jo' b. bertie' c. ethel' d. fiona' e.
Chester' f. prudence'

DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES

MANL

MAN2.
WOMAN,
WOMAN2
DOG.
CAT.

The grammar d also contains simple definite NPs so that we can refer to the other entities in Mi despite the fact that they do not have proper names.
Although definite NPs in English are composite phrases (consisting at least of the definite article the and a common noun), the translation procedure treats them as basic expressions very much like proper names and translates them as individual constants in Lp.
Since individual constants denote entities in the model, the denotation assignment function directly associates particular definite noun phrases with particular entities, ensuring that each definite description picks out only one entity.
For example, the expression the-book' is associated with BOOK and the-cake* with
CAKE by the denotation assignment function.
42",60,42,2 Predicates and arguments,No info,No info,predicate argument fact different symbol different entity model property denotation assignment function entity model men woman cat dog book cake convenient mnemonic purpose represent entity english word boldface uppercase letter subscript entity necessary english word upper letter actual entity expression english important point mind book symbol mani entity expression english language entity woman cat dog book cake entity world proper name definite description type noun phrase translation procedure earlier noun phrase individual constant entity model denotation assignment function model associate individual constant single entity model entity constant denotes entity individual constant unambiguous language constant unambiguous denotation particular model entity book cake proper name woman fiona woman ethel men bertie dog chester cat prudence part denotation assignment function associate constant translating name appropriate entity bertie ethel fiona chester denotes denotes manl woman dog cat grammar simple definite np refer entity fact proper name definite np english composite phrase least definite article common noun translation procedure basic expression much proper name individual constant individual constant denote entity model denotation assignment function particular definite noun phrase particular entity definite description entity expression book cake denotation assignment function
42,"Interpreting LP
Although an individual constant may be associated with only one entity in the model, entities may themselves be identified by more than one expression in a language.
In Mi, the entity WOMAN 2 is denoted not only by the expression fwna' but also by the expressions the-lecturer' and the-singer\ while the Lp expression the-studenf denotes the entity, MAN, and DOG is denoted by the-dog' as well as
Chester'.
(29) gives the extensions in M, for all the referring expressions in LP, thus indirectly associating all noun phrases generated by G, with some entity in the model.
(29) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.
k.
1.
m.
n.
jo' the-student' bertie' ethel' the-golfer' fiona' the-singer' the-lecturer' the-cat' prudence'
Chester' the-dog' the-cake' the-book'

DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES
DENOTES

MAN,.
MAN,.
MAN2.
WOMAN,
WOMAN,
WOMAN2
WOMAN 2
WOMAN,
CAT.
CAT.
DOG.
DOG.
CAKE.
BOOK.

We are already in a position to assess the truth or falsity of some formulae that translate some of the sentences generated by the grammar fragment G,: those that contain the equative copula, be.
Sentences like Bertie is the golfer are used to assert that two descriptions refer to the same entity.
Hence, we interpret formulae that translate such sentences, e.g. bertie' = the-golfer', as being true only where the entity denoted by bertie' and that denoted by the-golfer are one and the same.
This statement describes the truth-conditions for formulae containing the identity operator = which can be stated more formally as (30) which forms part of the model theory.
(The subscripts on the NPs are given by the translation rule for equative sentences in (18.b), above.)
(30)

Truth-conditions for identity: A formula of the form (NP,' = NP 2 ') is true if, and only if, the entity denoted by NP,' is the same entity as that denoted byNP 2 '.

The expression if and only /fused in (30) is not a common one in everyday
English but is used a lot in semantics which borrows the use from logic.
The conjunction of two sentences using this expression is interpreted to mean that the two sentences are semantically equivalent.
The first if in the conjunction expresses the idea that the truth of the proposition expressed by the second sentence is sufficient to guarantee the truth of the proposition expressed by the first, while the only //""expresses the idea that the truth of the proposition expressed by the second sentence is necessary for the proposition expressed by the first to be true.
The second sentence in the conjunction thus provides the necessary and sufficient conditions that guarantee the truth of the proposition expressed by the first sentence.
In logical terms, as we shall see in Chapter 3, the semantic equivalence of two formulae that translate two
43",61,43,2 Predicates and arguments,No info,No info,individual constant entity model entity expression language entity woman expression fwna expression entity man dog chester extension expression noun phrase entity model bertie ethel fiona chester denotes denotes man man woman woman woman woman cat cat dog dog cake book ass truth falsity formula translate sentence grammar fragment contain equative copula sentence bertie golfer assert description refer entity interpret formula translate sentence true entity bertie statement formula identity operator part model theory subscript np translation rule equative sentence identity formula form true entity entity bynp expression common everyday english lot semantics logic conjunction sentence expression mean sentence equivalent first conjunction express idea truth proposition second sentence sufficient guarantee truth proposition express idea truth proposition second sentence necessary proposition true second sentence conjunction necessary sufficient condition guarantee truth proposition first sentence logical term semantic equivalence formula translate
43,"2 Predicates and arguments sentences is guaranteed if both formulae have the same truth value.
Hence, given a true equivalence, if one of the formulae is true then so is the other and if one is false, then so is the other.
Consequently, if Chester* = the-dog' is true then the entity denoted by Chester* is exactly the same as that denoted by the-dog' and conversely, if the entities denoted by Chester' and the-dog' are identical then the formula Chester'
= the-dog' is true.
The phrase if and only if thus imposes a strong relation between the two sentences it connects.
The expression if and only if is often abbreviated to iff and this will be the practice in giving numbered definitions from now on.
Exercise 2.3:
Translate the following sentences into LP and then ascertain their truth or falsity with respect to Mx: i.
Ethel was the golfer.
ii.
The student was the singer.

2.2.2

A little light set theoiy

In addition to expressions that denote entities, languages contain expressions that describe properties that entities have and the relations that they enter into.
In English, properties and relations are generally expressed by verbs and adjectives whose equivalents in LP are, as we have seen, n-place predicates.
In order to complete the interpretation procedure for LP, therefore, it is necessary to determine the sorts of extensional denotations that predicates have and to give a definition of the truth-conditions for formulae containing them in such a way as to capture our intuitions about the properties and relations English verbs and adjectives describe.
In order to do this, we need to look at set theory, on which the semantic theory in this book is based.
This section provides a short introduction to the necessary concepts, and further information can be obtained from the references at the end of this chapter.
A set is a collection, or group, of items which are called the elements or members of that set.
This collection may consist of concrete objects like the computer I am typing this book on, the mug of coffee I have just finished, the
Wallace Monument, and so on, or of abstract items like the meridian, the number
99, the fourth of April 1991, or a set of symbols or indeed any combination of abstract, concrete and symbolic elements.
Finite sets (i.e. those containing a finite number of elements) may be symbolised by putting the names of their members, separated by commas, within curly brackets, { and }.
This is called the list notation for sets and there can be either closed sets where all its members are listed or open sets where only part of the set is listed.
Examples of sets in the list notation are given in (31).
(31 .a) gives the closed set consisting of all and only thefirstfiveletters of the
Roman alphabet.
(31.b) defines an open set which contains these symbols and more besides and (31 .c) lists the set of entities in the model M,.
(31) a.
b.
c.
44

{a,b,c,d,e}.
{a,b,c,d,e,...}.
{MAN,, MAN2, WOMAN,, WOMAN2, CAT, DOG, BOOK, CAKE}.",62,44,2 Predicates and arguments,No info,No info,predicate argument sentence formula truth value true equivalence formula true false true entity chester entity chester identical formula true phrase strong relation sentence expression practice definition exercise translate sentence ascertain truth falsity respect ethel golfer student singer little light set theoiy addition expression denote entity language expression property entity relation english property relation verb adjective equivalent predicate order complete interpretation procedure necessary determine sort extensional denotation predicate formula way capture intuition property relation english verb adjective describe order theory semantic theory book short necessary concept information reference end collection group item element member collection concrete object computer typing book mug coffee wallace monument abstract item meridian number fourth april symbol combination abstract concrete symbolic element finite set finite number element name member comma bracket list notation set member open set part example set list notation closed set thefirstfiveletters roman alphabet open set symbol list entity model man woman cat dog book cake
44,"Interpreting LP

In order to show that some element, a, is a member of a particular set, the symbol e , which is read as is a member of is written between the element, a, on its left and the set on its right.
Thus, the expression a e {a,b,c,d,e} asserts that a is a member of the set consisting of all and only the first five letters of the Roman alphabet.
The complementary relation is not a member of is symbolised by £ and so the expression MANj £ {CAT, DOG, BOOK} asserts that the entity, MANi is not a member of the set consisting of the entities, CAT, DOG and BOOK.
An element must either be a member of a specific set or not be a member of that set.
It cannot be both a member and a non-member of a set nor can it be neither a member nor a non-member of a set.
Sets may have any number of members.
Those with just one member are often called singleton sets (or just singletons).
For example, the set {MAN^ is the set consisting only of the entity called Jo in the model, Mi.
It is important to remember that a singleton set is not the same as the entity that is its sole member.
Thus, the set consisting only of the letter a, i.e. {a}, is not the same as the letter a.
A singleton set is not, however, the smallest possible set, as a set may contain no members at all.
There is, in fact, only one set with no elements and it is called the empty or null set, written as 0 .
It may be thought that having a set with nothing in it is somewhat pointless and that it can hardly be described as a set at all.
But, like the number zero, it is a very useful notion to have when stating general rules that apply to all sets irrespective of the number of members they have, including, of course, none.
Because the empty set contains no members, statements of the form x € 0 (where x is some element) are never true while those of the form x £ 0 are always true.
Sets may share some or all of their members with other sets.
In certain cases, all the members of one set, A, are members of another, B. Sets like A are called subsets of sets like B and sets like B are called supersets of sets like A. To symbolise the subset relation we use the symbols c o r D .
The different symbols have the same interpretation but differ in the direction in which they are read.
Both A c B and B 3
A mean that A is a subset of B, but we can read the first as A is a subset ofB and the second as B is a superset of A. A formal definition of the notion of subset and superset is given in (32):
(32)

Given two sets A and B, A is a subset of B (A <z B) if, and only if, every member of A is a member of B, in which case B is a superset of A (B 3 A).

According to (32), the sets {a,b,c} and {c,d,e} are both subsets of {a,b,c,d,e} but
{a,b,f} is not a subset of this, because it contains one element, f, that is not in
{a,b,c,d,e}.
This definition has two important consequences.
In the first place, it entails that every set is a subset of itself, because (32) just requires all the members of the subset to be in the superset.
Where two sets have exactly the same members, and are thus identical, the definition is trivially satisfied.
In order to specify that the subset is actually smaller than the superset, the symbols =) and c are used.
A c B is read A is a proper subset of B while B z> A is read as B is a proper superset of A. For example, {a,b,c} is a proper subset of {a,b,c,d} because the latter set contains one element, d, not in the former and so the statement, {a,b,c} c {a,b,c,d} is true.
However, while {a,b,c} c {a,b,c} is true, {a,b,c} cz {a,b,c} is not, because the two sets contain exactly the same elements.
45",63,45,2 Predicates and arguments,No info,No info,order show element member particular symbol member element right expression member first letter roman alphabet complementary relation member expression manj cat dog book entity mani member entity cat dog book element member specific member set member member set member member singleton singleton set entity model important remember singleton entity sole member letter letter singleton smallest possible set set member fact set element empty null set nothing pointless set number useful notion general rule irrespective number member none empty set member statement form element true form true set member certain case member set member set subset set set supersets set symbolise subset relation use symbol different symbol interpretation direction mean subset ofb second superset formal notion subset superset set subset member member superset subset subset element important consequence first place entail subset member subset superset set member identical satisfied order smaller superset symbol proper subset proper superset proper subset latter set element former statement true true set element
45,"2 Predicates and arguments
The other result of the definition of subset and superset in (32) is that the empty set is a subset of every set.
One can see that this must be so by considering what would have to be the case for it not to be a subset of some set.
From (32), we deduce that A cannot be a subset of B, if (and only if) there is some element in A that is not in B. Since the empty set contains no members, then it is not possible for it to have a member not in any other set.
Hence, 0 c A is a true statement, whatever set A happens to be.
Some sets share members with others without being subsets or supersets of each other.
For example, the set {a,b,c,d} shares the elements c and d with the set {c,d,e,f} and thus we say that the intersection of these two sets, written {a,b,c,d} n {c,d,e,f}, is the set {c,d}.
The definition of this relation given in (33) has three important consequences: firstly, where two sets have no common elements, their intersection is the null set, 0 ; secondly, where two sets are identical, their intersection is equal to both sets; and, finally, the intersection of two sets is a subset of them both.
(33)

The intersection of two sets A and B, A n B , is the set containing exactly those members of A that are members of B.

We may also join sets together to form larger sets.
This is known as set union and the union of two sets, A and B, written A u B, is the smallest set containing all the members of both A and B. Thus, the union of the sets {a,b,c,d} and {c,d,e,f} is that set that contains the six elements that appear in both these sets, i.e. {a,b,c,d,e,f}.
The definition of set union in (34) has two consequences: the union of a set with the empty set is the same as the original set; and both sets joined by the union operation are subsets of the resultant set.
(34)

The union of two sets A and B, A u B, is the set which contains all and only those elements which are in A or which are in B, or both.

There is one further property of sets that it is necessary to know at the moment.
This is a basic assumption of set theory that two sets with the same members are identical.
For example, the listed set {z,y,x,w,v,u} is identical to the set described as the last six letters of the English alphabet while the set consisting of the first 10 prime numbers {1,2,3,5,7,11,13,17,19,23} is identical to the set {23,19,17,13,11,7,5,3,2,1} which is identical to the set {1,11,3,23,7,13,5,17,2,19}.
This property is called the
Axiom of Extension and is defined in (35).
(35)

Axiom of extension: Two sets A and B are identical iff they have the same members.

(35) is called an axiom because it is a primitive of set theory and its truth cannot be derived from the truth of other statements in the theory.
The term extension has the same meaning as the term discussed above and in Chapter 1 with respect to denotation, i.e. it refers to the elements in a set and not to the property or properties that are common to those elements.
The axiom of extension thus says that whatever name is given to a set and however a set is represented, it is fully defined by the elements it contains.
Therefore, if some set of elements has two names or two different representations, this does not mean that it is two different sets.
If two sets have precisely the same members then they are extensionally identical.
This is similar to the notion of identity between two entities discussed in Section 2.2.1 above.
No
46",64,46,2 Predicates and arguments,No info,No info,predicate argument result subset superset empty set subset set deduce subset element empty set member possible member true statement set share member others subset supersets set share element set intersection set relation important consequence common element intersection null identical intersection equal intersection subset intersection set set member member form larger union union set smallest set member union set element union consequence union empty original set union operation subset resultant set union set set element property set necessary know moment basic assumption theory member identical identical set last letter english alphabet set first prime number identical identical property axiom extension axiom extension set identical member axiom primitive set theory truth truth statement theory term extension meaning term respect denotation element set property property common element axiom extension name element set element name different representation different set member identical similar notion identity entity
46,"Interpreting LP matter how an entity is named (or indeed represented), if two names or definite descriptions denote the same entity then they are extensionally identical.
The interpretation of the logical language LP thus does not depend on the expressions used to describe entities in a model, but on what those expressions denote.
This important property is the basis of extensional systems like the semantic theory that is developed in Chapters 2 to 6, but fails in the intensional ones developed in Chapters 8 to 9 (see the discussion in Sections 9.1 and 10.3, in particular).
Until then, however, the Axiom of Extension is assumed to hold and this has two important consequences.
In the first place, (35) entails that sets are unordered.
This means that no matter what order the elements appear in a listed set, provided that the different orderings involve all the same elements, then the differently ordered lists define the same set.
Thus,
{z,y,x,w,v,u} is the same set as {u,v,w,x,y,z} which is the same as
{z,u,y,v,x,w}.
Secondly, the Axiom of Extension guarantees that a set with repeated specifications of the same element is identical to the same set with only one listing of the element.
For example, the set {u,v,w,w,x,x,x} is identical to {u,v,w,w,x} which is identical to {u,v,w,x}.
Exercise 2.4:
Given the sets defined below, which of the following statements are true?
A ={1,3,5,7}
D = {7,3,1,5} l.A = B.
4. e G C.
7 .
D G F.
IO.DCZC.

13.
B e E.
16.CnB = 0

2.2.3

B = {a,c,e,j*,i}
E = (e a i c4,g}

C={l,a,3,5,e,7}
F= {{1},{1,3},{ 1,3,5},{1,3,5,7}}

2.
E = B.
3.
D = the first four positive odd numbers.
5. a G D.
6. {1} G A.
8.
A G C
9. {1,3} 2 A.
ll.DcF.
12.
E c B.
14.AnD = ^L. 15.
A u D = D.

Interpreting predicates

After that brief interlude, we can now go back to the interpretation procedure and assign extensions to predicates and specify the truth-conditions of formulae containing them.
We begin by looking at one-place predicates.
Let us assume that the situation being modelled by Mi is one of which the statements in (36) are all true and other statements containing the intransitive verbs and adjectives in Gi are all false.
This situation can be represented by dividing the set of entities in the model into subsets according to whether they ran, or laughed, or were crazy, and so on.
These sets provide the extensions of the one-place predicates that translate the intransitive verbs and predicative adjectives of G b Thus, while individual constants denote entities in the model, one-place predicates denote sets of entities, just those entities of which it is true to say that they ran, laughed, were crazy, etc. Hence, the denotation assignment function of a model associates each oneplace predicate in Lp with some set of entities.
The assignment for Mj according to the situation described in (36) is given in (37).
47",65,47,2 Predicates and arguments,No info,No info,matter entity name definite description denote entity identical interpretation logical language expression entity model expression denote important property basis extensional system semantic theory chapter intensional chapter discussion section particular axiom extension important consequence first place entail unordered matter order element different ordering element list define set axiom extension guarantee specification element identical element identical identical exercise statement true first positive odd number predicate brief interlude interpretation procedure assign extension specify formula containing predicate situation statement true statement intransitive verb adjective false situation entity model subset crazy set extension predicate translate intransitive verb predicative adjective individual constant denote entity model predicate denote entity entity true say crazy denotation assignment function model associate oneplace predicate entity assignment situation
47,"2 Predicates and arguments
(36) a.
b.
c.
d.
e.
f.
g.
h.
(37) a.
b.
c.
d.
e.
f.
h.
i.
k.
1.

Jo was happy and laughed.
Ethel was happy and laughed.
Fiona sang and was happy.
Bertie was wealthy.
The dog ran and howled.
The cat ran.
The cake was disgusting.
No-one screamed or was crazy or messy.
run'
DENOTES {DOG,CAT}.
laugh'
DENOTES
{MAN,, WOMANi}.
{DOG}.
howl'
DENOTES sing'
DENOTES {WOMAN2}.
scream'
DENOTES
0.
crazy'
DENOTES
0.
disgusting' DENOTES {CAKE}.
wealthy'
DENOTES
{MAN2}.
happy'
DENOTES
{MAN^WOMAN^WOMAN,}.
messy'
DENOTES
0.

The generalisation that all one-place predicates extensionally denote sets can only be maintained if we accept the existence of the empty set.
According to (37), in
M] 0 functions as the extensions of crazy \ messy' and scream'.
It might be thought that one could interpret predicates that are true of no entities in the model by leaving them out of the denotation assignment function.
This is not possible, however.
To interpret a sentence, it is necessary to know what each of the content words in the sentence means.
This is what the denotation assignment function does.
It makes sure that each basic expression in the language is matched with something in the model and thus represents what the particular constants denote.
If no extension is assigned to some basic expression, then that expression and every expression that contains it is strictly speaking meaningless.
It has no denotation and therefore no sentence or formula containing the item can be assigned a truth value.
For example, a
(pseudo-)English sentence like Fiona glipped the egg could be a well-formed expression in English (since it conforms to the phonological and syntactic rules of the language).
It has no interpretation, however, because the item glipped is an invented word and thus has no denotation.
It is very important, then, that when defining a model, every constant (predicate or individual) in LP (and thus indirectly every content word in the grammar under consideration) receives a denotation, even if nothing in the model has the property represented by the predicate.
Hence, the empty set is used to indicate that nothing in the model is in the extension of particular expressions, thus enabling the interpretation procedure to function in the most general manner.
Once the extension of a one-place predicate is determined, it is an easy matter to determine whether a formula containing that predicate is true or false.
All that is necessary is to see whether the entity denoted by the argument of the one-place predicate is in the set of entities it denotes.
If it is, then the formula is true, if not, then it is false.
Thus, the formula run '(the-dog') is true in M, because the entity denoted by the-dog\ i.e. DOG, is, according to (37), a member of the set of entities denoted
48",66,48,2 Predicates and arguments,No info,No info,predicate argument happy ethel happy laughed fiona happy bertie wealthy dog howled cat cake disgusting crazy messy denotes cat man womani dog denotes denotes cake denotes generalisation predicate denote set existence empty set function extension crazy messy scream true entity model denotation assignment function possible interpret sentence necessary content word sentence mean denotation assignment function sure basic expression language model particular constant denote extension basic expression expression expression meaningless denotation sentence formula item truth value english sentence fiona egg english conforms phonological syntactic rule language interpretation item word denotation important defining model constant predicate individual content word grammar consideration denotation nothing model property predicate empty set nothing model extension particular expression interpretation procedure function general manner extension predicate easy matter formula true false necessary entity argument predicate entity denotes true false formula true entity dog member entity
48,"Interpreting LP by the predicate, run\ i.e. {CAT,DOG}.
By the same reasoning, run'(bertie') is false with respect to Mu because MAN2 is not a member of {CATJDOG}, i.e. Bertie is not one of the entities that are running.
This provides the definition of the truthconditions for formulae containing one-place predicates which is restated more formally in (38).
(38)

Truth-conditions for one-place predicates: A formula W (NP') or A' (NP') is true with respect to a model iff the entity denoted by NP' in the model is a member of the set of entities denoted by \Y or A' in the model.
The formula is false otherwise.

From (38) it follows that a formula like messy'(the-cat') is true if and only if the entity CAT, the extension of the argument expression, the-cat \ is a member of the extension of the predicate messy*.
Since the extension of the predicate is, according to (37), 0 , the empty set, nothing in the model is messy and, because CAT e 0 is false, then so is the formula messy'(the-cat').
Again this illustrates the usefulness of treating 0 as a set in the same way as other sets.
If we did not do this, we would have to have separate truth-conditions for formulae containing predicates that are true of no entities in a model, clearly missing a generalisation.
Exercise 2.5:
Translate the following sentences into LP and ascertain whether they are true or false with respect to the model M,.
i.
The cat laughed.
ii.
Jo was happy.
iii.
Fiona ran.
Loosely speaking, intransitive verbs and adjectives (i.e. one-place predicates in
Lp) ascribe properties to entities, but not only do entities have properties, they also enter into relations with each other.
So, for example, two entities, say Jo and Ethel, might like each other, but not like a third, say Chester.
In other words, there is a relation of liking between Ethel and Jo and vice versa but not one between Jo and
Chester or Ethel and Chester.
Let us further specify the situation described by the model Mi by relating the entities in the model to each other using the transitive verbs in the grammar, d , as in (39).
(39) a.
b.
c.
d.
e.
f.
g.
h.

Jo liked Ethel, Fiona, Bertie and himself.
Ethel liked Jo and Fiona.
Fiona liked the cat and Ethel.
The women, the men and the cat all loathed the dog and Fiona loathed Jo.
Chester ate the cake.
The cake poisoned the dog.
Bertie and Ethel both read the book,
Nothing kicked anything else.

We can represent these relations, and others like them, as sets of pairs of entities, according to whether the first entity bears a particular relation to the second.
49",67,49,2 Predicates and arguments,No info,No info,predicate cat dog reasoning run bertie false respect member catjdog bertie entity running truthconditions formula predicate formula true respect model entity model member entity model formula false formula messy true entity cat extension argument expression member extension predicate messy extension predicate empty nothing model messy cat false formula messy illustrates usefulness way formula true entity model generalisation exercise translate sentence ascertain true false respect model cat happy iii fiona intransitive verb adjective predicate property entity entity property relation entity ethel chester word relation ethel vice chester ethel chester situation model entity model transitive verb grammar ethel fiona bertie ethel fiona fiona cat ethel woman men cat dog fiona chester cake cake dog bertie ethel book nothing relation others pair entity first entity bear particular relation second
49,"2 Predicates and arguments
So, for example, we can represent the liking relation in Mi by grouping together into pairs Jo and Ethel, Jo and Fiona, Jo and Bertie, Jo and himself, Ethel and Jo, Ethel and
Fiona, and so on.
In other words, two-place predicates translating transitive verbs denote sets of pairs of entities.
Thus, like one-place predicates, two-place predicates denote sets, but sets with members that are not single entities but pairs of entities.
Relations denoted by the verbs in Gx specify a direction in which the relation goes.
Hence, in the definition of the relation denoted by like* in Mi the pair Jo and Ethel must be distinguished from the pair Ethel and Jo, because in the former Jo is the one doing the liking while in the latter it is Ethel who does it.
Thus, in the same way that
Jo liked Ethel means something different from Ethel liked Jo, we must make sure that the pairs that make up the extensions of two-place predicates are properly ordered.
The extensions of two-place predicates are, therefore, defined as sets of ordered pairs of entities.
Ordered pairs of elements are conventionally written between angle brackets, <, >, and separated by a comma.
Hence, the two ordered pairs corresponding to Jo and Ethel and Ethel and Jo are written as
<MAN1,WOMAN1> and <WOMANi,MANi>.
Because order is significant, these pairs represent different things: the first pair shows a relation between MANi and
WOMANi and the latter a relation between WOMAN! and MANi.
As a rough and ready principle that will suffice for the moment: the first member of an ordered pair corresponds to the entity denoted by the first argument of a predicate (the translation of the syntactic subject of an active sentence), and the second member corresponds to the entity denoted by the second argument of the predicate (the translation of the syntactic direct object of an active sentence).
Letting two-place predicates denote sets of ordered pairs of entities, we may further specify the denotation assignment function for Mi as in (40).
{<MAN1,WOMAN1>,
<MAN1,MANa>,
<MAN,,WOMAN2>,
<MAN1,MAN1>,
<WOMAN!, WOMAN2>,
<WOMAN!,MANj>,
<WOMAN2,CAT>,
<WOMAN2, WOMAN,>}.
b. loathe'
DENOTES {<MAN!,DOG>,
<MAN2,DOG>,
<WOMAN,,DOG>,
<WOMAN2,DOG>,
<WOMAN2,MANX>,
<CAT,DOG>}.
c. poison' DENOTES {<CAKE,DOG>}.
DENOTES {<DOG,CAKE>}.
d. eat'
DENOTES
{<WOMAN1,BOOK>, e. read'
<MAN2,BOOK>}.
f. kick'
DENOTES
0.
The truth-conditions of a formula containing a two-place predicate are similar to those involving one-place predicates, in that set-membership is the important
(40) a.

50 like'

DENOTES",68,50,2 Predicates and arguments,No info,No info,predicate argument represent relation pair ethel fiona bertie ethel ethel fiona word transitive verb denote pair entity predicate predicate denote set member single entity pair entity relation verb specify direction relation relation pair ethel pair ethel former latter ethel way ethel mean different ethel sure pair extension predicate extension predicate set pair entity pair element angle bracket comma ordered pair ethel ethel womani mani significant pair different thing first pair show relation mani womani latter relation woman rough ready principle suffice moment first member pair corresponds entity first argument predicate translation syntactic subject active sentence second member entity second argument predicate translation syntactic direct object active sentence denote pair entity denotation assignment function mana man woman woman manj cat woman man dog dog woman dog manx cat dog poison cake dog dog cake denotes book book formula predicate similar predicate important denotes
50,"Interpreting LP criterion.
Such a formula is true with respect to some model, if the ordered pair formed by taking the entity denoted by the first argument of the predicate as the first element and that denoted by the second argument of the predicate as the second element is in the set of ordered pairs denoted by the two-place predicate.
For example, to compute the truth value of the formula like '(the-student'fiona') with respect to Mi the entities denoted by the two arguments, the-student' and fiona', are identified.
According to the denotation assignment in (29), the first expression denotes MAN!
and the second denotes WOMAN2.
The relevant ordered pair that is formed from these two entities is <MAN!,WOMAN2> because this reflects the order of the arguments in the formula.
The extension of the predicate like' is then identified to see if the ordered pair is a member of this set.
(40) shows that this is the case and that
<MANi,WOMAN2> is indeed in the extension of like'.
Hence, the formula like '(the-student 'fiona') is true with respect to M,.
On the other hand, the formula that translates the sentence The student is liked by Fiona is false in Mi, because the ordered pair <WOMAN 2 ,MAN!> is not in the extension of like1.
The translation rules ensure that it is not the pair <MAN1,WOMAN2> which is checked for being in the extension of the predicate.
This is because the translation of the sentence is like '(fiona ', the-student') and not like '(the-student * fiona').
The interpretation rule for two-place predicates given in (41) ensures that the order of arguments in a predicate-argument representation is significant and so the differences in the translation rules of active and passive sentences are semantically significant.
(41)

Truth-conditions for two-place predicates: A formula \V(NP,\NP 2 ') is true with respect to a model iff the ordered pair <Ei,E>> is in the set of ordered pairs denoted by V,' in the model, where Ei is the entity denoted by NP,' and E2 is the entity denoted by NP 2 ' in the model.
The formula is false otherwise.

Exercise 2.6:
Translate the following sentences into LP and ascertain whether the formulae they are associated with are true or false with respect to the model, M } .
i.
The cat was liked by the lecturer.
ii.
Ethel kicked the student.
iii.
The cake poisoned the cat.

If transitive verbs describe relations between two entities, ditransitive verbs describe relations between three entities.
For example, in the relation of giving there has to be an entity who does the giving, an entity that is given, and an entity to whom the latter is given.
Thus, the extensions of three-place predicates that translate such verbs are represented as sets of ordered triples of entities.
An ordered triple is like an ordered pair except that it contains three members, not two, but again the order is significant and fixed.
The order of the entities in each of the triples that make up the extension of a three-place predicate follows the order of the arguments of the predicate.
Thus, the entity denoted by the first argument forms the first element in the triple, that denoted by the second argument forms the second element and that denoted
51",69,51,2 Predicates and arguments,No info,No info,criterion formula true respect model pair entity first argument predicate first element second argument second element pair predicate compute truth value formula respect entity argument fiona denotation assignment first expression second relevant pair entity man order argument formula extension predicate ordered pair member set show mani extension formula true respect hand formula translates sentence student fiona false pair woman man extension translation rule pair extension predicate translation sentence fiona fiona interpretation rule predicate order argument representation significant difference translation rule active passive sentence significant predicate formula true respect model pair set pair model entity entity model formula false exercise translate sentence ascertain formula true false respect model cat lecturer ethel student cake cat transitive verb relation entity ditransitive verb relation entity relation entity entity entity latter extension predicate translate verb set triple entity ordered pair member order significant order entity triple extension predicate order argument predicate entity first argument form element second argument form second element
51,"2 Predicates and arguments by the third argument forms the third element.
The only ditransitive verb in fragment d is gave, given and it receives the extension in (42) which represents a situation in which Jo gave the cake to the dog,
Fiona gave the cake to Jo, Jo gave the book to Bertie, Bertie gave it to Ethel and Jo gave Fiona the cat.
(42) give' DENOTES

{<WOMAN2,CAKE,MAN1>,
<MAN1 ,CAKE,DOG>,
<MAN1,BOOK,MAN2>,
<MAN2,BOOK,WOMAN1>,
<MAN1,CAT,WOMAN2>}.

The definition of the truth-conditions for formulae containing three-place predicates formula follows the same pattern as for the other predicates.
The givey(the-student\prudence\the-lecturery) is true if (and only if) the ordered triple
<MANi,CAT,WOMAN 2 >, representing the entities denoted by the three arguments of the predicate in order, is in the set of ordered triples denoted by give'.
(43)

Truth-conditions for three-place predicates: A formula
V d t'(NPi\NP 2 \NP 3 > ) is true if and only if the ordered triple <E!,E2,E3> is in the set of ordered triples denoted by V dt \ where Ei is the entity denoted by NPi\ E 2 is the entity denoted by NP 2 ' and E3 is the entity denoted by NP 3 '.
The formula is false otherwise.

Exercise 2.7:
Translate the following sentences into Lp and say whether they are true or false with respect to the model Mi.
i.
The golfer gave the book to the golfer.
ii.
The student gave the lecturer the book.
iii.
Ethel was given the book by Bertie.
Exercise 2.8:
Write a general rule giving the truth-conditions for formulae containing any n-place predicate along the lines of (41) and (43).

2.2.4

Finishing up

We have now given the extensions for almost all the basic expressions in L P and provided the truth-conditions for almost all the simple formulae derived by translating the English sentences generated by the grammar d .
The only thing that remains is to interpret the zero-place predicates, rain' and snow'.
Unlike the other predicates, these do not denote sets, because they have no arguments.
Instead they are directly assigned truth values, because they are, in effect, basic formulae.
The denotation assignment function of the model must, therefore, assign them either
52",70,52,2 Predicates and arguments,No info,No info,predicate argument third argument form third element ditransitive verb fragment receives extension situation cake dog fiona cake book bertie bertie ethel fiona cat cake cake dog book book cat formula predicate formula pattern predicate givey true triple mani cat woman entity argument predicate order triple predicate formula true triple set triple entity entity entity formula false exercise translate sentence true false respect model golfer book golfer student lecturer book iii ethel book bertie exercise general rule formula predicate line extension basic expression simple formula english sentence grammar interpret predicate rain snow predicate denote set argument truth value effect basic formula denotation assignment function model
52,"Interpreting LP the value true or the value false, thus directly specifying their truth as part of the model.
No separate statement of their truth-conditions in the theory is thus required to interpret them.
For the sake of completeness, then, let us assume that in the situation modelled by Mi it was raining but not snowing.
The denotation assignment function of Mi is thus completed by the statements in (44).
(44) a. rain' b. snow'

DENOTES
DENOTES true.
false.

All basic expressions of the grammar fragment, the constants in LP that translate the lexemes in English, have now been assigned a denotation.
Furthermore, the rules defining the truth-conditions of the simple formulae resulting from the translation of sentences in G^ together constitute a complete theory of interpretation for those formulae in LP.
Hence, the truth or falsity of the formulae that translate any of the simple sentences generated by G! can be ascertained with respect to Mj or indeed any other model that assigns denotations to the constants of LP.
The interpretation procedure outlined above remains the same for all possible models of situations that can be described by sentences generated by Gx.
Hence, it forms a theory of interpretation independent of particular situations represented by models.
In the next chapter, the interpretation discussed in this section is put on a more formal footing, but before this is done the grammar fragment G{ will be extended to generate simple conjoined sentences.
2.3

Further reading

The language Lp is based on part of predicate logic and there are many introductions to this logical system, although they all begin with an introduction to propositional logic which is discussed in Chapter 3.
The basic syntax of this language is introduced in Allwood, Andersen and Dahl (1977: 58-61) and the semantics is given in Allwood,
Andersen and Dahl (1977: 72-75).
The most accessible logic textbook is Guttenplan
(1986), of which pp. 166-175 are the most relevant here.
Most introductions to classical phrase structure grammar are to be found in older introductory textbooks to linguistics (see, particularly, Bach (1974)), but Borsley (1990) discusses more modern approaches to such grammars with respect also to transformational and unification grammars.
Formal grammar theory and a formal account of phrase structure grammar can be found in Partee, ter Meulen and Wall (1990:433-454; 492-505).
Introductions to set theory are again legion: see, inter alia, Allwood, Andersen and Dahl (1977: chs.
1 & 2), Lyons (1977:154-161), Partee, ter Meulen and Wall (1990:3-30), and Martin
(1987: ch.
2).

53",71,53,2 Predicates and arguments,No info,No info,value true value truth part model separate statement theory interpret sake completeness assume situation denotation assignment function statement rain true false basic expression grammar fragment constant translate lexeme english denotation simple formula translation sentence complete theory interpretation formula truth falsity formula translate simple sentence ascertained respect model denotation constant interpretation procedure possible model situation sentence form theory interpretation independent particular situation model next interpretation formal footing grammar fragment generate simple sentence language part predicate logic many introduction logical system propositional logic basic syntax language allwood andersen dahl semantics allwood andersen dahl accessible logic textbook guttenplan relevant introduction classical phrase structure grammar older introductory textbook linguistics borsley modern approach grammar respect transformational unification formal grammar theory formal account phrase structure grammar partee ter meulen wall introduction theory legion inter alia allwood andersen dahl chs lyon partee ter meulen wall martin
53,"Negation and Co-ordination

3.1

Compound sentences

The grammar presented in Chapter 2 generates some very basic sentences of English and the translation procedure enables each one to be associated with at least one representation in Lp (more than one, if it contains a homonym).
While the number of sentences generated by the grammar, Gu is relatively large (and can be made larger if more words are added to the lexicon), the language it generates is still finite.
One of the properties that all natural languages are assumed to have is that they contain an infinite number of sentences.
Since one of the goals of a theory of semantics, as we saw in Chapter 1, is to pair each sentence in a natural language with an interpretation, the theory must contain the means to provide an infinite number of interpretations.
Furthermore, because natural languages are here being interpreted indirectly via a logical representation, the logical translation language must itself be infinite.
The reason that natural languages are infinite is that they are recursive.
This means that expressions in certain categories may contain other expressions of the same category.
For example, sentences may contain other sentences conjoined by the expressions and or or, or they may be connected by if...then, or a sentence may contain one or more repetitions of the expression it is not the case that.
Some examples based on the grammar Gi are given in (1).
(1) a.
b.
c.
d.

Ethel poisoned the cat and the dog howled.
The lecturer gave the cake to the dog or the student gave the cake to the lecturer and the lecturer laughed or the dog howled.
If the dog ate the cake, then the student poisoned the dog or the lecturer poisoned the dog.
If it was not the case that it rained or it snowed, then it was not the case that it was not the case that it rained and it was not the case that it snowed.

The somewhat formal sentences in (1) (and an infinite number of others) can be generated by adding three recursive rules to the grammar, d , and a set of conjunctions to the lexicon.
These are given in (2).
The first rule, 13Gi, introduces the conjunctions and and or, the second, 14Gi, analyses if...then sentences and the third,
15G,, provides a type of recursive negative sentence.
(2) a.
b.
c.
d.

54

13G,:S->SCONJS.
14G,:S->ifS,,thenS 2 .
15G,: S -» it is not the case that S.
CONJ^{and, or}.",72,54,3 Negation and Co-ordination,No info,No info,negation compound sentence basic sentence english translation procedure representation homonym number sentence large larger word lexicon language property natural language infinite number sentence goal theory semantics pair sentence natural language interpretation theory mean infinite number interpretation natural language logical representation logical translation language reason natural language infinite recursive mean expression certain category expression category sentence sentence expression sentence repetition expression example grammar ethel cat dog howled lecturer cake dog student cake lecturer lecturer dog howled dog cake student dog lecturer dog formal sentence number others recursive rule grammar conjunction lexicon first rule conjunction second analysis sentence type recursive negative sentence sconjs ifs
54,"Complex formulae
The negative sentences generated by Rule 15G, are not elegant and in order to obtain more natural negative sentences, we can incorporate a set of non-recursive negation rules that provide the negative counterparts of the basic sentence rules of
Chapter 2.
Essentially, all the rules in G, that introduce a finite verb (Vi[+FIN],
V,[+FTN], Vdt[+FIN] and V0[+FIN]) have a negative counterpart containing the word didn't which appears after the subject and before the non-finite, [-FIN], form of the verb, as in (3).
The non-finite form of a verb in English is its base (or citation) form, without any tense or participial suffixes or other morphological modification.
(3) a.
b.
c.
d.
e.
lG,(neg):
2G,(neg):
3G, (neg):
4G, (neg):
5G,(neg):

S ->NP didn't V,[-FIN].
S ->NP, didn't VtNP2.
S -> NP, didn't Vdt[-FIN] NP2 to NP3.
S -> NP, didn't Vdt[-FIN] NP3 NP2.
S -> it didn't V0[-FIN].

All the rules introducing the copula, on the other hand, have negative counterparts with was replaced by wasn't, as in (4).
(4) a.
b.
c.
d.
e.

8G,(neg): S -> NP, wasn't VJPAS] by NP2.
9G, (neg): S -> NP, wasn't Vdt[PAS] to NP2 by NP3.
10G, (neg): S -» NP, wasn't Vdt[PAS] NP2 by NP3.
11G, (neg): S -> NP, wasn't NP2.
12G, (neg): S -> NP wasn't A.

It would be better from the syntactic point of view, of course, if these negative rules could be directly related to their positive counterparts.
The machinery for doing this will be introduced in Chapter 5, but for the moment we adopt the rules in (3) and
(4) without any attempt at providing syntactic adequacy.
However, the grammar now generates more natural sounding negative sentences like those in (5).
(5) a.
b.
c.

If the dog didn't eat the cake, then Ethel wasn't happy.
It didn't rain and it didn't snow.
It was not the case that Bertie didn't sing.

3.2

Complex formulae

Having defined a set of negation and co-ordination rules, it is necessary to specify the way the sentences that are generated by those rules are translated into LP and ultimately interpreted.
Because the new syntactic rules are recursive, they allow the generation of an infinite number of sentences, as already mentioned.
It is in situations like these that the reasons for the rule-to-rule translation procedure set up in Chapter
2 become apparent.
The translation of a finite language may be achieved by listing the sentences generated by the grammar with their appropriate translations, but that of an infinite language cannot be achieved in the same way.
The pairing up of syntactic and translation rules in the procedure discussed in the last chapter has the advantage that, provided that both the object language and the logical translation language can be defined by recursive rules, any sentence in the language can be paired with its translation, no matter how long it is.
Indeed, it is theoretically possible to provide the
55",73,55,3 Negation and Co-ordination,No info,No info,complex formula negative sentence rule elegant order natural negative sentence negation rule negative counterpart basic sentence rule finite verb negative counterpart word subject form form verb english base citation form tense participial suffix morphological modification neg neg neg neg neg vdt vdt rule copula hand negative counterpart neg vjpas neg vdt pa neg vdt pa neg neg syntactic point view course negative rule positive counterpart machinery moment adopt rule attempt syntactic adequacy grammar natural negative sentence dog cake ethel happy rain snow bertie complex formula negation necessary specify way sentence rule new syntactic rule generation infinite number sentence situation reason translation procedure set apparent translation finite language sentence grammar appropriate translation infinite language way syntactic translation rule procedure last advantage object language logical translation language recursive rule sentence language translation matter possible
55,"3 Negation and co-ordination translation of an infinitely long sentence in this way, even though no human being could produce such a sentence.
Hence, the rule-to-rule hypothesis not only helps maintain compositionality, but also ensures that the translation of any sentence in the object language generated by a particular grammar has a well-formed and determinate translation (and hence interpretation).
In order to translate the syntactic rules in Section 3.1, the syntax of L P itself has to be extended to make it recursive.
Two new L P syntactic rules are given in (6.a) and
(6.c) introducing two new logical categories, Op2 for two-place propositional operators, connecting two formulae and Opi for one-place propositional operators which modify only one formula.
These categories contain only a few, logical, expressions which are given in (6.b) and (6.d).
The operators in (6.b) and (6.d) have particular logical functions, shown by their common names: & is the conjunction operator, v is the disjunction operator, —> is the symbol for material implication,
<-> is the equivalence operator and ~ is the negation operator.
(6) a.
b.
c.
d.
t -> t Op 2 1.
Op 2 -> {->,v ,&,<-> }.
t -> Op,(t).
Op,->{-}.

The expressions in (6.b) and (6.d) are used to translate the English conjunctions introduced by the rules in (2.a) and (2.b) and in translating negative sentences.
Like the copula in equative sentences, conjunctions and negative expressions are not translated using the general rule for translating lexical items given in (21) of Chapter
2.
Instead, the relationship between the logical expressions and their English counterparts is specified directly by the rules in (7).
(7) a.
b.
c.
d.
and => &.
or => v .
if...then => —> .
it is not the case that => ~.

Given these correspondences and the LP construction rules in (6), rules 13Gi,
14Gi and 15Gi have the obvious translations given in (8).
In these rules, the brackets that are introduced are important to the translation because they ensure that the logical expressions are unambiguous, as we will see below.
(8) a.
b.
c.

T13G,: S =» (S* CONP S').
T14G,: S =» (S,' -> S A
T15G,: S => ~(S').

The translation rules for all the negative rules in (4) and (5) are formed by putting the negation operator, ~, in front of the translation of the positive version of the rule.
For example, lGi (neg) has the translation ~(V7(NP')), 8G! (neg) has the translation
-(Vt>(NP2,NPi)), and 11G, (neg) has the translation ~(NP, = NP2) and so on.
Translation proceeds as described in Chapter 2: for each line in the derivation of a sentence, there is a corresponding translation of that line into LP.
An example derivation is given in (9) of the compound sentence The cake was eaten by the dog and if Ethel laughed, then Ethel poisoned the dog.

56",74,56,3 Negation and Co-ordination,No info,No info,negation translation long sentence way human sentence hypothesis help compositionality translation sentence object language particular grammar determinate translation interpretation order translate syntactic rule syntax recursive new syntactic rule new logical category propositional operator formula opi propositional operator modify formula category logical expression operator particular logical function common name conjunction operator disjunction operator symbol material implication equivalence operator negation operator expression translate english conjunction rule negative sentence copula equative sentence conjunction negative expression general rule lexical item relationship logical expression english counterpart correspondence construction rule rule obvious translation rule bracket important translation logical expression unambiguous conp translation rule negative rule negation operator front translation positive version rule lgi neg translation neg translation npi neg translation translation proceeds line derivation sentence translation line derivation compound sentence cake dog ethel ethel dog
56,"Complex formulae
(9) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.
k.
1.

S
=>S\
S CONJ S
13G,
=> (S' CONJ' S').
14G,
S CONJ if S, then S2
=>(S'CONr(S,'->S2')).
NPi was Vt[PAS] by NP2 CONJ if S, then S2
8G,
=> (V.XNP^NP,') CONJ' (Sr -> S2')).
1G,
NP, was V,[PAS] by NP2 CONJ if NP V, then S2
=> (V t '(NP 2 ',NPr) CONJ' (Vi'(NP') -> S,)).
2G,
NP, was V,[PAS] by NP2 CONJ if NP V, then NP3 Vt NP4
=> (V, f (NP,',NP,') CONJ' (V,'(NP') -> Vt(NP3',NP4'))).
7G, the N was VJTAS] by NP2 CONJ if NP V, then NP3 V, NP4
=> (Vt'(NP2',the-N') CONJ' (W(NP') -> Vt(NP3',NP4'))).
the N was VfPAS] by Npr CONJ if NP V» then NP3 Vt NP4
6G,
=> (Vt'(Npr',the-N') CONJ' (W(NP') -> Vt(NP3',NP4'))).
the N is Vt[PAS] by Npr CONJ if Npr V, then NP3 Vt NP4
6G,
=> (Vt'(Npr',the-N') CONJ' (W(N pr ') -> V,(NP3\NP4'))).
the N is Vt[PAS] by Npr CONJ if Npr V, then the N Vt NP4
7G,
=» (Vt'(Npr',the-N') CONJ' Cv7(Npr') -> Vtfhe-N\NP 4 '))).
the N is Vt[PAS] by Npr CONJ if Npr Vj then the N V, Npr
6G,
=> (Vt'(Npr',the-N') CONJ' (V^N,/) -> V,(the-N',Npr'))).
The cake was eaten by Chester and if Ethel laughed, then Ethel poisoned the dog
Lex
=> (eat'(Chester',the-cake') & (laugh'(ethel') -> poison'(ethel',the-dog'))).

As before, derivations may also be represented by analysis trees, i.e. phrase structure trees annotated with their translations.
(10), below, shows the tree associated with the sentence If it didn 7 rain, it snowed.
Exercise 3.1:
Translate the sentences in (1 .a), (1 .c), (5.a) and (5.c), using either the derivational or the analysis tree method.

In the grammar of the Chapter 2, the only source of ambiguity was homonymy, but logically more interesting forms of ambiguity arise when sentential co-ordination and negation are introduced into the grammar.
For example, both (1 l.a) and (1 l.b), which are generated by Gi, are structurally ambiguous.
That is, they each have two translations depending on the two syntactic structures that analyse them.

57",75,57,3 Negation and Co-ordination,No info,No info,complex formula conj conj conj npi pa conj conj pa conj npr conj pa conj conj vjtas conj conj vfpas npr conj npr conj pa npr conj npr npr conj pa npr conj npr npr conj npr pa npr conj npr npr npr conj npr cake chester ethel ethel dog lex chester laugh ethel poison ethel derivation analysis tree phrase structure tree translation show tree sentence rain exercise translate sentence derivational analysis tree method grammar source ambiguity homonymy interesting form ambiguity sentential negation grammar ambiguous translation syntactic structure analyse
57,"3 Negation and co-ordination
(10)

(~(rain') —> snow')

If

(11) a.
b.
it didn't rain then it snowed

It is not the case that the dog howled and Bertie screamed,
The cat ate the cake or the dog ate the cake and Fiona laughed.

The ambiguity in (11 .a) depends on the relative scopesof the conjunction and and the negation it is not the case that.
On one interpretation, the latter has scope over the conjunction of the dog howled and Bertie screamed whereas on the second interpretation the reverse is the case: the conjunction has scope over the negation which only has scope over the dog howled.
In the grammar fragment, d , the two translations that correspond to these two interpretations are derived by applying the rules 13Gi and 15Gj in different orders.
If the latter is applied first, then the reading of the sentence is that the dog did not howl or Bertie did not scream as in (12).
The interpretation in which the dog did not howl but Bertie did scream is the one given to the translation derived by applying rule 13Gi before 15Gi as in (13).
As we will see in Section 3.3, the two LP expressions in (12.h) and (13.h) have different truth-conditions and so give rise to the two interpretations described above.
The difference between the two expressions is shown by the bracketing of the component formulae which indicate the relative scopes of the two logical operators,
~ and &.
In the first expression, (12.h), ~(howV(the-dog') & scream''(ether)) the connective, &, comes inside the brackets that are introduced by rule 15d in (12.b).
These brackets define the domain over which the negation has effect.
This is called the scope of the negation and the conjunction operator comes inside this.
In the second expression, (13.h), (-(howV(the-dog')) & scream'(ethel')) the reverse is the case.
The negation operator now comes within the scope of the conjunction, because it appears within the brackets introduced by 13G, in (13.b).
The scope of a connective is crucial to the interpretation of any formula containing it.
Where formulae contain different operators and connectives, different readings result from the relative scopes of the latter.
A second example appears in (14) where the two translations of (11 .b) are given.
The first formula has the disjunction operator within the scope of the
58",76,58,3 Negation and Co-ordination,No info,No info,negation rain snow rain dog bertie cat cake dog cake fiona ambiguity relative scopesof conjunction negation interpretation latter scope conjunction dog bertie second interpretation reverse conjunction scope negation scope dog howled grammar fragment translation correspond interpretation rule different order latter first sentence dog howl bertie interpretation dog howl bertie translation rule expression different give rise interpretation difference expression component formula relative scope logical operator first expression howv ether connective bracket rule bracket define domain negation effect scope negation conjunction operator second expression howv ethel reverse negation operator scope conjunction bracket scope connective crucial interpretation formula formula different operator connective different reading result relative scope latter second translation formula disjunction operator scope
58,"Complex formulae conjunction, giving the reading where Fiona is laughing and either the dog or the cat ate the cake.
The second reading reverses the scopes of the connectives to give the reading where the cat ate the cake and either the dog ate the cake or Fiona laughed.
It is, therefore, very important to include the brackets introduced by rules 13G,, 14Gi and 15Gi, whenever there is more than one conjunction or negation in the sentence.
Without them, the LP expressions translating the sentences remain ambiguous, contrary to the requirement that LP be an unambiguous language.
Certain pairs of brackets, e.g. the very outermost ones in a formula, do not really serve a useful purpose and will often be omitted and, later on in the book, when the reader has more familiarity with the logical system, other sets of brackets will occasionally be omitted where there is no risk of ambiguity.
(12) a.
b.
c.
d.
e.
f.
g.
h.
(13) a.
b.
c.
d.
e.
f.
g.
h.

S it is not the case that S
=» ~(S').
it is not the case that S CONJ S
=> ~((S' CONJ' S')).
it is not the case that NP V, CONJ S
=>~(Cv7(NP')CONJ'S')).
it is not the case that Npr V{ CONJ S
=» ~((W(the-N') CONJ' S')).
it is not the case that Npr V, CONJ NP V,
=> ~((Vi'(the-N') CONJ' W(NP'))).
it is not the case that Npr V, CONJ Npr V,
=> -((WCthe-N') CONJ' W(Npr'))).
it is not the case that the dog howled and Bertie screamed
=> ~((howl'(the-dog') & scream'(bertie'))).
S
=>S'.
S CONJ S
=» (S' CONJ' S').
it is not the case that S CONJ S
=>(~(S') CONJ' S').
it is not the case that NPVj CONJ S
=>(~CvY(NP'))CONJ'S').
it is not the case that Npr Vi CONJ S
=> (~CV7(the-N')) CONJ' S').
it is not the case that Npr V; CONJ NP Vi
=> (-CvY(the-N')) CONJ' W(NP')).
it is not the case that Npr V{ CONJ Npr Vj
=» (-(ViXthe-N')) CONJ' W(N pr ')).
it is not the case that the dog howled and Bertie screamed
=> (~(howl'(the-dog')) & scream'(bertie')).

\5GX
13d
1G,
6d
1G,
6G,
Lex

13G,
15G,
1G,
6G,
1G,
6Gi
Lex

59",77,59,3 Negation and Co-ordination,No info,No info,complex formula conjunction fiona dog cat cake second reading revers connective cat cake dog cake fiona important bracket rule conjunction negation sentence expression translating sentence ambiguous contrary requirement unambiguous language certain pair bracket outermost formula useful purpose later book reader familiarity logical system bracket risk ambiguity conj conj conj npr conj conj npr conj conj npr conj npr conj npr dog howled bertie howl bertie conj conj conj conj npvj conj npr conj conj npr conj conj npr conj npr conj dog howled bertie howl bertie lex lex
59,"3 Negation and co-ordination
(14) a.
b.

((eat'(the-cat',the-cake') v eat'(the-dog\the-cake')) & laugh'(fiona')).
(eat'(the-cat',the-cake') v (eat'(the-dog',the-cake') & laugh'(fiona'))).

Exercise 3.2:
Letting the translation of Fiona laughed be represented by the symbol p and that of
Bertie screamedbe represented by the symbol q, how many different translations into
Lp do each of the following have?
i.
It is not the case that it is not the case that Fiona laughed or Bertie screamed.
ii.
Fiona laughed or it was not the case that Fiona laughed and Bertie screamed.

3.3

Interpretation

We must now turn our attention to the interpretation of formulae that contain the logical connectives or the negation operator.
In defining the truth-conditions of complex formulae that contain these expressions, the internal structure of the component formulae is irrelevant as it does not affect the way the truth or falsity of the formula is computed.
All that is significant is whether the component formulae of a complex formula are true or false, not what the predicates and arguments that make up these formulae denote in the model.
For this reason, ~, &, v , and -> are known as truth-conditional connectives.
This section shows how the connectives in LP contribute to the truth-conditional meaning of the formulae in which they appear, taking each in turn and beginning with the negation operator ~.
3.3.1

Negation

The simplest of the five connectives is the negation operator, ~, used in the translations of the negated sentence rules in d .
This operator takes only a single formula in its scope and reverses the truth value of that formula.
In other words, if a formula (J) is false ~((|)) is true and if $ is true then ~((|)) is false.
This provides the truth-conditions for negative formulae, which can be stated as in (15).
(15)

Truth-conditions for negation: A formula ~(S') is true if, and only if, S' is false. ~(S') is false otherwise.

Using (15) it is possible to work out the truth value of negative formulae with respect to particular models.
For example, the truth value of the formula ~(run'(chester')) with respect to Mi can be worked out as follows:
(16) a.
b.
run'(Chester') is true in Mi iff the extension of Chester', i.e. DOG, is a member of the set of entities denoted by run', i.e. {DOG,CAT}.
Since DOG e {DOG,CAT} is true, run'(Chester') is true in M, and so
-(run'(chester')) is false in Mi.

Logicians have devised another way of representing the truth-conditions for operators like ~, and connectives like &, etc., which is, perhaps, clearer than a verbal
60",78,60,3 Negation and Co-ordination,No info,No info,negation laugh fiona eat laugh fiona exercise translation fiona symbol bertie screamedbe symbol many different translation fiona bertie fiona fiona bertie interpretation attention interpretation formula contain logical connective negation operator complex formula contain expression internal structure component formula irrelevant affect way truth falsity formula significant component formula complex formula true false predicate argument formula denote model reason connective show connective contribute meaning formula turn negation operator negation simplest connective negation operator translation sentence rule operator single formula scope truth value formula word formula false true true false negative formula negation formula true false false possible work truth value negative formula respect particular model truth value formula run chester respect chester true extension chester dog member entity run dog cat dog dog cat true run chester true run chester false logician way operator connective
60,"Interpretation statement.
This method sets out a truth table giving all the possible combinations of truth and falsity for all the component formulae and showing the truth value of the resultant complex formula containing the appropriate connective.
To show the truth conditions of the connectives using the truth table method, the component formulae are represented by propositional variables.
Variables do not have a fixed interpretation in some model, like constants, but range over extensions of the appropriate sort.
Given that formulae denote truth values, propositional variables range over the values true and false.
Such variables are usually represented by lower case letters from the middle of the alphabet: p (mnemonic for proposition) is used where only one variable is required, p and q are used when two are needed and r is added if a third is required.
To draw a truth table for a connective, you take an appropriate number of propositional variables, one in the case of negation and two for the other connectives.
Underneath the variables you write the letter t or the letter f standing for truth and falsity, respectively, and put all possible combinations of the letters on different lines.
If there is one component formula in the complex formula, then there are only two lines, one for t and one for f, while if there are two formulae there are four lines, for cases where both formulae are true, where both are false and where they differ in truth value.
Each combination of truth and falsity is associated with the appropriate truth value for the complex proposition involving the operator or connective.
Hence, for negation, there are two lines in the truth table and the resulting complex formula has the opposite truth value to the component formula.
This is shown in (17) where the variable p stands for the component formula.
(17)

Truth table for negation p

~p t f f t

The use of variables in truth tables means that we can replace them by actual formulae to get the particular truth value of a compound formula very easily.
All that needs to be done is to take a component formula, e.g. (etheV - the-golfer') that translates Ethel was the golfer and replace all occurrences of a variable in a table with this formula.
Once the truth value of the component formula (or formulae) with respect to some model has been determined, it is possible just to go to the line in the truth table with that truth value and read off the truth value for the complex formula.
Thus, to find out the truth value of ~(ethel' - the-golfer'), we need first to determine the truth or falsity of (etheV = the-golfer') with respect to M, by checking whether the expression etheV denotes an entity identical to that denoted by the expression the-golfer' in that model.
Since this is the case, (etheV = the-golfer') is true with respect to Mi.
Looking at the line in the truth table for negation where the propositional variable has the value t, we find the truth value of the negated formula shown to the right, i.e. f.
Hence, -(etheV = the-golfer') is false with respect to the model Mi.
61",79,61,3 Negation and Co-ordination,No info,No info,interpretation statement method truth table possible combination truth falsity component formula truth value resultant complex formula appropriate connective show truth condition connective truth table method component formula propositional interpretation model constant range extension appropriate sort formula denote truth value propositional variable range value true false variable lower letter middle alphabet mnemonic proposition variable third draw truth table connective appropriate number propositional variable negation connective variable write letter letter truth falsity possible combination letter different line component formula complex formula line formula line case formula true false differ truth value combination truth falsity appropriate truth value complex proposition operator connective negation line truth table complex formula truth value component formula variable stand component formula truth table negation variable truth table mean actual formula particular truth value compound formula component formula ethev translates ethel golfer occurrence variable table formula truth value component formula formula respect model possible line truth table truth value truth value complex formula truth value ethel first truth falsity ethev respect expression ethev entity identical expression model true respect line truth table negation propositional variable value truth value formula right ethev false respect model
61,"3 Negation and co-ordination
Negation in L P is recursive and the truth-conditions given in (15) allow the truth value of formulae that contain more than one or two embedded formulae to be computed in a mechanical fashion.
For example, the translation of the sentence // is not the case that the lecturer didn't scream contains two instances of the negation operator, i.e. ~(~(scream'(the-lecturer'))).
To find out the truth value of this formula with respect to some model, we need to find out the truth of the most deeply embedded formula, scream'(the-lecturer').
The truth-conditions for - then provide the truth value of -(scream'(the-lecturer')) and a re-application of these truthconditions yields the value of the formula -(-(scream'(the-lecturer'))).
Thus, the truth value of this particular formula with respect to M, can be worked out as in (18).
(18) a.
b.
c.
scream'(the-lecturer*) is false in M, because WOMAN 2 , the extension of the-lecturer', is not a member of 0 , the extension of scream' in Mi.
Hence, -(scream'(the-lecturer')) is true in M, by the truth-conditions for negation.
Hence, -(-(scream'(the-lecturer'))) is false in M, again by the truth-conditions for negation.

A more succinct way of showing these steps is again to use a truth table.
There are a number of ways of showing this, but we shall adopt the clearest.
Here you write a propositional variable p on the left with its two possible truth values, then you write the next embedded formula to its right with the corresponding truth values, and so on, until you reach the largest formula.
At every stage you use the truth table for negation to give you the truth values for the current column by treating the previous column as the base formula.
All you have to do then is find out the actual truth value of the formula that you are substituting for /?, and look along that line to get the truth value of the whole compound formula.
The truth-conditions for a doubly negated formula can thus be represented by the truth table in (19) which combines two instances of the truth table for negation.
(19) p

-p t f f t

~(-p) t f

The truth table for -(-/?) is identical to that for p itself.
This means that in logical form double negatives give rise to the same interpretation as the corresponding positive.
In other words, -(-/?) has exactly the same truth value as
/?, whatever p happens to be.
Thus, something that may not have been completely obvious from just looking at the truth-conditions for negation becomes obvious when we use truth tables.
In translating sentences with double negatives in them, however, it is often the case that only single negation is intended.
For example, translating
Chester never did nothing with two negatives, the formula expressed is semantically equivalent to Chester always did something.
It is often the case, however, that sentences containing multiple negatives in many languages serve only to express a single negation, the extra negatives merely serving as reinforcements of this and not
62",80,62,3 Negation and Co-ordination,No info,No info,negation negation truth value formula contain formula mechanical fashion translation sentence lecturer scream instance negation operator scream truth value formula respect model truth formula scream truth value scream truthconditions value formula scream truth value particular formula respect false woman extension member extension scream true negation false negation succinct way step use truth table number way clearest propositional variable possible truth value formula right truth value largest formula stage use truth table negation truth value current column previous column base formula actual truth value formula substituting line truth value whole compound formula formula truth table instance truth table negation truth table identical logical form double negative rise interpretation positive word truth value obvious looking negation obvious use truth table translating sentence double negative single negation translating chester nothing negative formula equivalent chester sentence multiple negative many language express single negation negative reinforcement
62,"Interpretation as independent negations.
For example, the expression Chester never did nothing in many dialects of English is interpreted as Chester never did anything; the second negative expression nothing does not independently negate but emphasises the negation of the expression never.
In the logical language Lp, on the other hand, multiple negatives are always interpreted as independent negations.
Thus, ~(~(p)) is always equivalent to /?, never to ~(p).
Hence, if a sentence in some natural language is analysed as containing multiple negative expressions with only a single negation intended, that sentence must be translated into LP with only one negation operator.
3.3.2

Conjunction

Specifying the truth-conditions for formulae containing &, the logical translation of and, involves reference to the truth values of the two formulae that the expression conjoins: such a formula is true only when both component formulae are true and is false in every other situation.
This is guaranteed by the truth-conditions stated in (20) which can also be represented by the truth table in (21).
(20)

Truth-conditions for conjunction: A formula (S,' & S 2 ') is true iff S,' is true and S2' is also true.
(Si' & S2') is false otherwise.

(21)

Truth Table for & p q p&q t t f f t f t f t f f f

To interpret a formula containing & thus involves finding out the truth values of the formulae it conjoins and then checking the truth table to ascertain the truth or falsity of the complex expression.
For example, the translation of The dog howled and the cat ate the dog with respect to Mi is (howV(the- dogf) & eatf(the-cat\the-dog')).
The steps in interpretation of this formula with respect to M, are set out in (22), a situation that corresponds to the third line of the truth table in (21).
(22) a.
b.
c.
howl'(the-dog') is true in M, because the entity denoted by the-dog' in M, is a member of the extension of howl' in Mi, i.e. DOG e {DOG}.
eat' (the-cat' ,the-dog') is false in M i because the ordered pair formed from the entities denoted by the-cat' and the-dog', respectively, are not in the set of ordered pairs denoted by eat' in Mi, i.e. <CAT,DOG> £
{<DOG,CAKE>}.
Hence, (howl'(the-dog') & eat'(the-cat', the-dog')) is false in Mi by the truth-conditions for &.

More complex examples can be constructed using negation and conjunction.
Let us work through an example in detail, interpreting the sentence It is not the case that Ethel loathed Chester and Ethel wasn't happy.
The structure of one of the
63",81,63,3 Negation and Co-ordination,No info,No info,interpretation independent negation expression chester nothing many english chester second negative expression nothing emphasis negation expression logical language hand multiple negative independent negation equivalent natural language multiple negative expression single negation sentence negation operator conjunction formula logical translation reference truth value formula expression true component formula true false situation truth table conjunction formula true true true false truth table interpret formula containing truth value formula conjoins truth table ascertain truth falsity complex expression translation dog howled cat dog respect howv dogf eatf step interpretation formula respect situation third line truth table howl true entity member extension howl dog dog false pair entity pair cat dog dog cake howl false complex example negation conjunction work detail sentence ethel chester ethel happy structure one
63,"3 Negation and co-ordination formulae this ambiguous sentence can be translated into is set out in tree form in (23) which is parallel, of course, to the structure of the translated sentence.
(23)

( (loathe'(ethel\ Chester')

(happy'(Chester'))) )

The interpretation of this formula begins with the specification of the truth-conditions of the whole complex formula and works downwards to those of the simplex component formulae.
Once we have reached this level, the truth of the whole expression can be ascertained by finding the extensions of the constants in the expression in some model.
Thus, the interpretation procedure of (22) with respect to the model Mj follows the steps laid out in (24) which begins by specifying the truth-conditions of the outermost operator, i.e. negation, and then moves on to those for the conjunction connective, &.
Since one of the conjuncts is negative, the truthconditions for negation are repeated.
Finally, the truth of the simplex propositions is checked with respect to the model by applying the truth-conditions for two-place and one-place predicates, as set out in the last chapter.
Having ascertained these truth values, those of the more complex formulae are worked out until we finally get to the operator with the widest scope, where the truth of the whole formula can be computed.
(24) a.
b.
c.
d.
e.
f.

64

-((loathe'(ethel',Chester') & -(happy'(ethel')))). is true in M, iff
(loathe'(ethel',Chester') & -(happy'(ethel'))) is false (by (15)).
(loathe'(ethel',Chester') &
~(happy'(ethel'))) is true iff loathe'(ethel',Chester') is true and -(happy'(ethel')) is also true (by (20)).
loathe' (ethel' ,chester') is true iff the ordered pair consisting of the entities denoted by ethel' and Chester', respectively, is in the set denoted by loathe'.
Since, ethel' denotes WOMAN, and Chester' denotes DOG and loathe' denotes
{<MAN1,DOG>,<MAN2,DOG>,<WOMAN,,DOG>,
<WOMAN 2 ,DOG>,<WOMAN 2 ,MAN 1 >}, loathe'(ethel',Chester') is true in M,.
-(happy'(ethel')) is true iff happy'(ethel') is false (by (15)).
happy'(ethel') is true iff the entity denoted by ethel' is in the set denoted by happy'.",82,64,3 Negation and Co-ordination,No info,No info,negation formula ambiguous sentence set tree form parallel course structure sentence loathe chester happy chester interpretation formula specification whole complex formula work component formula level truth whole expression extension constant expression model interpretation procedure respect model step outermost operator negation move conjunction connective negative truthconditions negation truth simplex proposition respect model predicate ascertained truth value complex formula operator widest scope truth whole formula loathe ethel chester happy ethel true loathe ethel chester happy ethel false loathe ethel chester happy ethel true loathe ethel chester true happy ethel true loathe ethel chester true ordered pair entity ethel chester loathe ethel woman chester dog loathe denotes dog dog woman woman dog woman man loathe ethel chester true happy ethel true happy ethel false happy ethel true entity ethel set happy
64,"Interpretation g.
h.
i.
j.

Since the entity denoted by ethel' is WOMANi and the extension of happy' is {WOMAN,,WOMAN*MAN,}, happy'(ethel') is true in M,.
Hence, -(happy'(ethel')) is false in Mi.
hence, (loathe'(ethel',Chester') & -(happy'(ethel'))) is false in M,.
hence, -((loathe'(ethel',Chester') & -(happy'(ethel )))) is true in M,.

As before, the truth table method can be used to get the same result.
Firstly, the structure of the formula is made more transparent by replacing the simplex formulae by the variables p and q to get the formula -(/? &~(q)).
Then, a truth table is set up showing all the combinations of the truth values of the basic formulae and columns are constructed showing the truth values of each of the more complex formulae within the expression.
The final column gives the truth value of the whole expression determined from the combination of truth values of the basic formulae.
Once the truth values of the simplex formulae have been ascertained with respect to a particular model, the final value of the expression can be read off the appropriate line.
Thus, line 1 in (25) gives the truth value of the expression in M, where p is associated with the formula loathe'(ether,Chester') and q is associated with the formula happy '(ethely).
(25) p q

~q t t f f t f t f f t f t p&~q ~(p&~q) f t f f t f t t

Exercise 3.3:
Work through the interpretation of the other formula of LP that translates It was not the case that Ethel loathed Chester and Ethel wasn 't happy, using both the method illustrated in (24) and the truth table method illustrated in (25).
According to Gi, a sentence containing two or more instances of the conjunction and has two or more derivations.
Hence, they have more than two translations, because of the parallelism between syntactic derivation and translation.
Thus, Bertie laughed and Fiona laughed and the dog howled has the two translations in (26) where the difference resides in the comparative scopes of the two instances of &, shown by the bracketing.
(26) a.
b.

(laugh'(bertie') & (laugh'(fiona') & howl'(the-dog'))).
((laugh'(bertie') & laugh'(fiona')) & howl'(the-dog')).

This ambiguity does not, however, give rise to any difference in interpretation.
The truth-conditions for (26.a) and (26.b) are identical: three formulae conjoined by & give rise to a true formula if, and only if, all three component formulae are true.
This can be proved by constructing truth tables for the two readings,
65",83,65,3 Negation and Co-ordination,No info,No info,interpretation entity ethel womani extension happy woman man happy ethel true happy ethel false loathe ethel chester happy ethel false loathe ethel chester happy ethel true truth table method result structure formula transparent simplex formula variable formula truth table set combination truth value basic formula column truth value complex formula expression final column truth value whole expression combination truth value basic formula truth value simplex formula respect particular model final value expression appropriate line line truth value expression associated formula loathe ether chester formula happy exercise work interpretation formula ethel chester ethel happy method truth table method sentence instance conjunction derivation translation parallelism syntactic derivation translation bertie fiona dog translation difference comparative scope instance bracketing laugh bertie laugh fiona howl laugh bertie laugh fiona howl ambiguity rise difference interpretation identical formula true formula component formula true proved truth table reading
65,"3 Negation and co-ordination representing the basic formulae as p, q and r.
Because the pattern of truth and falsity is identical in the first and final columns, the different formulae must have the same truth-conditions: they are true or false in the same situations.
This is shown in the truth tables in (27) and (28).
(27) p q r

(q&r) t t t f t f f f t t f t f t f f t f t t f f t f t f f t f f f f p q r

(P&q) t t t f t f f f t f t t f f t f t t f f f f f f

(p&(q&r)) t f f f f f f f

(28) t t f t f t f f

«p&q)&r) t f f f f f f f

In fact, no matter how many formulae are strung together using the conjunction connective, the actual bracketing of the conjoined formulae does not matter to the final truth value (provided that no other connective appears in the expression).
Thus, for any formulae/?, q and r, (p&(q& r)) has the same truth value as ((p & q)
& r).
This property is called associativity and & is known as an associative operator.
Associativity is a property also found with certain arithmetical functions like addition and multiplication (but not subtraction and division).
Thus, for example, (3 + 2) + 4
= 3 + (2 + 4) = 9 and (2 x 3) x 4 = 2 x (3 x 4) = 24 or, in general, (x + y) + z = x +
(y + z) and (x x y) x z = x x (y x z).
This is an important property which, as we shall see in Chapter 7, enables us to make some useful inferences from formulae with this structure.
Nothing more will be said about this here, but remember that in working out the truth value of a formula containing a string of formulae all connected by & (or sentences conjoined by and) the different derivations do not affect the truthconditions; the ambiguity is only apparent, not real.
In other words, our translation procedure overdisambiguates, as it were.
But this is not a problem, because the interpretation procedure ensures that no semantic ambiguity is produced.

66",84,66,3 Negation and Co-ordination,No info,No info,negation basic formula pattern truth falsity identical first final column different formula true false situation truth table fact matter many formula conjunction connective actual bracketing formula matter final truth value connective expression truth value property associativity associative operator associativity property certain arithmetical function addition multiplication subtraction division general important property enables useful inference formula structure nothing truth value formula string formula sentence different derivation affect truthconditions apparent real word translation procedure problem interpretation procedure semantic ambiguity
66,"Interpretation
3.3.3

Disjunction

The next connective is v which we have used to translate English or.
This is known as the logical disjunction operator and a formula containing this connective is true when at least one of the component formulae is true:
(29)

Truth-conditions for disjunction: A formula of the form (ST v S>') is true, iff Si* is true or S 2 ' is true.
(S/ v S2') is false otherwise.

(30)

Truth table for disjunction p q pvq t t f f t f t f t t t f

It follows from (29) that the sentence The lecturer poisoned the cat or Chester howled is translated into a formula that is true in M H as can be seen from the detailed interpretation in (31).
(31) a.
b.
c.
d.
e.
f.

(poison' (the-lecturer' ,the-cat') v howl' (Chester')) is true with respect to Mi iff poison'(the-lecturer',the-cat') is true or howl'(Chester') is true.
poison'(the-lecturer',the-cat') is true iff the ordered pair consisting of the entity denoted by the-lecturer' and that denoted by the-cat' is a member of the set denoted by poison' in M,.
Since the entity denoted by the-lecturer' is WOMAN2, that denoted by the-cat' is CAT and the extension of poison' is {<CAKE,DOG>}, poison'(the-lecturer',the-cat') is false in M L howl'(Chester') is true iff the entity denoted by Chester' is a member of the set denoted by howl'.
Since the entity denoted by Chester' is DOG and that of howl' is {DOG}, howl'(Chester') is true in Mj.
Since howl'(Chester') is true in Mi, (poison'(the-lecturer',the-cat') v howl'(Chester')) is true with respect to Mi.

You may have already noticed that there are some odd things about this treatment of disjunction, particularly in the fact that a disjunctive formula is true if both of its disjuncts are true.
For example, under this interpretation the formula translating the sentence The student was crazy or the student was happy is true in a model in which both disjuncts are true.
Yet we often tend, when using disjunctions, to assume that one of the disjuncts must be false if the other is true.
Such disjunctions are said to have an exclusive interpretation, one which disallows situations where both disjuncts are true.
For example, on hearing the sentence in (32), a speaker of English would normally assume that the jacket being referred to was not simultaneously red and blue, a situation that is not excluded by the truth of the formula in (32.b), according to the truth-conditions for the inclusive disjunction operator v.
67",85,67,3 Negation and Co-ordination,No info,No info,interpretation disjunction connective translate english logical disjunction operator formula connective least component formula true disjunction formula form true true true false truth table disjunction pvq sentence lecturer cat chester formula true detailed interpretation poison howl chester true respect poison true howl chester true poison true ordered pair entity denoted member poison entity denoted cat extension poison cake dog poison false howl chester true entity chester member howl entity chester dog howl dog howl chester true howl chester true poison howl chester true respect odd thing treatment disjunction disjunctive formula true disjuncts true interpretation formula translating sentence student crazy student happy true model true disjunction disjuncts true disjunction exclusive interpretation disallows situation true hearing sentence speaker english jacket red blue situation truth formula inclusive disjunction operator
67,"3 Negation and co-ordination
(32) a.
b.

The jacket was blue or red.
(blue* (the-jacket') v red' (the-jacket*)).

The fact that sentences like (32) receive an interpretation that excludes the situation in which both disjuncts are true can be captured directly in the semantics by interpreting or, not as v in (30) above, but as a different operator ve which has the truth-conditions specified in (33) which gives rise to the truth table in (34).
(33)

Truth-conditions for Exclusive Disjunction: A formula of the form
(ST v e S2') is true, iff S/ is true and S2' is false or S2' is true and S/ is false.
(Si' ve S2') is false otherwise.

(34)

Truth table for exclusive disjunction p q pveq t t f f t f t f f t t f

There is, however, a compelling reason for not translating the English conjunction or as ve and thus interpreting all disjunctive sentences exclusively.
While many uses of disjunction do imply that only one of the disjuncts holds, there are many occasions where we do not want to preclude a situation in which both disjoined formulae are true.
For example, the propositions expressed by the sentences in (35) are not obviously false of situations where both of the disjuncts are true, i.e. where there are students who have a private income and rich parents, or where a job applicant has two Higher and five 'O' grade passes, or where the lecturer does not want to rule out the possibility of a zealous student reading both articles.
(35) a.

Students who have a private income or rich parents are better off at
University than those who do not.
b.
Applicants for the job must have two Higher, or five Ordinary, grade passes.
c.
You must read the article on presupposition or the article on implicature by next Wednesday.
The sentences in (35) (and many others like them) show that exclusive disjunction on its own makes too strong a claim about the truth-conditions of English or, since inclusive, as well as exclusive, readings of disjunctive sentences must be allowed for.
For this reason, or is translated as v and interpreted as inclusive disjunction.
The problem of accounting for the exclusive readings of or as illustrated in (32) will be addressed in Chapter 7 where different sorts of inference are discussed.
As can be seen from checking truth tables, disjunction, both inclusive and exclusive, like conjunction, is associative.
Thus, (p v (q v r)) has the same truth-conditions as ((p v q) v r): they are both true if any one of the component formulae is true.
(The reader is invited to show that this is indeed so by drawing the appropriate truth tables.)
However, when or is used to combine clauses which are
68",86,68,3 Negation and Co-ordination,No info,No info,negation jacket blue red blue red fact sentence interpretation situation true semantics different operator rise truth table exclusive disjunction formula form true true false true false false truth table exclusive disjunction pveq compelling reason english conjunction disjunctive sentence many us disjunction disjuncts many occasion preclude situation formula true proposition sentence false situation true student private income rich parent job applicant higher grade pass lecturer rule possibility zealous student reading article student private income rich parent better university applicant job higher ordinary grade pass article presupposition article implicature next wednesday sentence many others exclusive disjunction strong claim english inclusive exclusive disjunctive sentence reason inclusive disjunction problem exclusive reading different sort inference truth table disjunction inclusive exclusive conjunction associative true component formula true reader show appropriate truth table combine clause
68,"Interpretation negative or contain and, genuine ambiguities may result.
For example, the expression
It is not the case that it rained or it snowed and the dog howled has no fewer than five different interpretations, depending on the scopes of the negation, the disjunction and the conjunction.
Lettingp stand for the formula rain\ q stand for snow* and r stand for howl'(the-dog'), we get the schematic formulae in (36).
The two truth tables in
(37) and (38) show that at least the readings in (36.a) and (36.b) have different truth-conditions.
A formula of the form of (36.a) is true only when p and q are both false and r is true, while one with the form in (36.b) is true in all situations except where r is true and either p or q or both are also true.
(36) a.
b.
c.
d.
e.

(~((pvq))&r).
~(((pvq)&r)).
~((pv(q&r))).
((~(p)vq)&r).
(~(p)v(q&r)).

(37) p q r

(pvq) t t f t f t f f t f t t f f t f t t t t t t f f

P q r

(pvq) t t t f t f f f

((pvq) &r) t f t t f f f f

~(((pvq))&r)) f t f f t t t t

(38) t t t f t f f f t t t f f t t t f f t f f t f f t t t t t t f f

~((pvq)) f f f f f f t t

(~((pvq))&r)) f f f f f f t f

69",87,69,3 Negation and Co-ordination,No info,No info,interpretation negative contain genuine ambiguity expression snowed dog howled fewer different interpretation scope negation disjunction conjunction lettingp formula stand snow howl schematic formula truth table show least different formula form true false true form true situation true true pvq pvq pvq pvq pvq pvq pvq pvq
69,"3 Negation and co-ordination

Exercise 3.4:
Write out the truth tables for the other formulae in (36).
Which, if any, of these interpretations do you think would be the most likely ones to be given to an utterance of the expression It is not the case that it rained or it snowed and the dog howled by a speaker of English and why do you think this might be the case?
Does the expression It didn 't rain or snow and the dog howled have the possible translations into LP shown in (36)?
If not, why not?

There is another property that should be mentioned with respect to disjunction and that is that the relative order of the disjuncts is not truth-conditionally significant.
Thus, the sentence It rained or it snowed has the same truth-conditions as It snowed or it rained.
This is reflected in the truth-conditions for disjunction given above, which do not mention the order of the formulae, thus ensuring that (p v q) is truth-conditionally equivalent to (q v pj.This property is technically known as commutativity and disjunction is a commutative operator.
Commutativity does indeed seem to be a property of English disjunctive sentences, as shown by the fact that Bertie laughed or Fiona sang may be used to describe the same situations as
Fiona sang or Bertie laughed.
On the other hand, most speakers of English consider there to be a semantic difference between Bertie laughed and Fiona sang and Fiona sang and Bertie laughed.
However, the conjunction operator also turns out to be commutative in Lp, since (p & q) is truth-conditionally equivalent to (q & p), as readers can check for themselves.
This potential problem will be put to one side for the moment and taken up again in Chapter 7.
3.3.4

Implication

The final connective used in the grammar fragment of Section 3.1 is the one that we have used to translate English if...then sentences.
This is —>, the logicians' material implication.
A formula consisting of two formulae, p and q, conjoined by -> is interpreted as true, provided that the second formula, q, called the consequent, is true whenever the first formula, p, called the antecedent, is also true.
A formula of the form p —> q is thus false only when p is true and q is false.
The truth-conditions for formulae containing -> are given in (39) and its associated truth table is given in (40).
(39)

Truth-conditions for material implication: A formula ( S / -> S 2 ') istrue iff Si* is false or S 2 ' is true.
(Si' -» S2') is false, otherwise.

(40)

Truth table for material implication:

70 p q t t f f t f t f p->q t f t t",88,70,3 Negation and Co-ordination,No info,No info,negation exercise truth table formula interpretation think utterance expression snowed dog speaker english rain snow dog possible translation property respect disjunction relative order significant sentence snowed reflected disjunction mention order formula equivalent property commutativity disjunction commutative operator commutativity property english disjunctive sentence fact bertie fiona sang situation fiona bertie hand speaker english semantic difference bertie fiona sang fiona bertie conjunction operator commutative equivalent reader check potential problem side moment implication final connective fragment translate english sentence logician material implication formula formula true second formula consequent true first formula antecedent true formula form false true false formula truth table material implication formula istrue false true false truth table material implication
70,"Interpretation
A good way to help you remember the truth table is to remember the sentence in (41).
(41)

If Jo is over six feet tall, then Jo is over four feet tall.

There are only three possible ways that someone's height may relate to being over (i.e.
greater than) four feet or over six feet: either they are over six foot and hence over four foot, or they are under six foot but over four or they are under four foot.
No-one, however, can be under four foot but over six.
These possibilities are illustrated in the diagram in (42) where the variable/? stands for the formula translating Jo is over six foot tall and q stands for Jo is over four foot tall Notice that the fourth situation cannot be represented diagrammatically and this gives you the situation in which the conditional would have to be false.

(42)

If Jo is over six feet tall, then Jo is over four feet tall

6' -
4'

Material implication is neither associative nor commutative.
If it rained, then
Bertie was happy does not mean the same as If Bertie was happy, then it rained.
This is guaranteed by the truth-conditions in (39), as in the former case the formula rain'
—» happy'(ber'tie') is true provided that it is not raining, but Bertie is happy, while happy'(bertie') —> rain' is true with respect to the latter situation.
The non-associativity of -> can be shown by looking at the truth tables associated with the two schematic formulae ((p -> q) -» r) and (p -> (q -> r)).
As can be seen by comparing (43) and (44), the formula ((p -> q) -» r) is false in three situations, i.e.
where r is false and either p and q are both true or where p is false.
The latter formula

71",89,71,3 Negation and Co-ordination,No info,No info,interpretation good way help truth table sentence foot tall foot tall possible way someone height greater foot foot foot foot foot foot foot possibility diagram formula foot tall foot tall notice fourth situation situation conditional false foot tall foot tall material implication associative commutative bertie happy mean bertie happy former formula happy true bertie happy happy bertie true respect latter situation truth table schematic formula formula false situation false true false latter formula
71,"3 Negation and co-ordination r
M is, however, only false where p and q are both true, but r is false.
The
(P -> (o -> > definition of the truth-conditional meaning of if... then thus ensures that the indirect interpretation of If if it rained then the dog howled then Bertie screamed (a sentence that is better expressed in English by If when it rained, then the dog howled, then
Bertie screamed) is truth-conditionally distinct from If it rained then if the dog howled then Bertie screamed.

(43) p q r t t t f t f f f t t f t f t f f t f t t f f t f p q r

(q->r) t t t f t f f f t t f t f t f f t f t t f f t f t f t t t f t t

(p-»q) t t f t f t t t

((p->q) -»r) t f t t t f t f

(44)

(p -> (q -> r)) t f t t t t t t

There are, however, strange things about this interpretation of if...then.
One of the peculiar aspects has to do with the situations in which it is possible to assert a true conditional formula.
The only situation in which it is possible for a conditional to be false according to the truth table in (40) seems intuitively plausible.
Consider the sentence If it rained, then it didn't snow.
A situation in which it was raining and it was also snowing would be a counterexample to the conditional statement and sufficient to falsify it.
This is, of course, exactly what the truthconditions for -»tell us, because the antecedent would be true but the consequent false.
Hence, the conditional formula must be false.
The assertion of this sentence in other situations involving rain and snow would give rise, however, to the expression of a true statement which appears much less intuitively satisfying.
In a situation in which it was raining and it wasn't snowing, the sentence would express a true proposition.
The situation could be said to be a confirming instance of the conditional, but it would be most peculiar to utter such a sentence unless the speaker were committed to there being a causal connection between rain and a lack of snow.
72",90,72,3 Negation and Co-ordination,No info,No info,negation false true false meaning indirect interpretation dog bertie sentence english dog bertie distinct dog bertie strange thing interpretation peculiar aspect situation possible true conditional formula situation possible conditional false truth table plausible consider sentence snow situation conditional statement sufficient falsify course truthconditions antecedent true consequent false conditional formula false assertion sentence situation rain snow rise expression true statement much situation sentence true proposition situation instance conditional peculiar utter sentence speaker causal connection rain lack snow
72,"Interpretation
Knowing simply that two formulae happen to be true does not justify a belief in any sort of a connection between them, something that would be conveyed by the assertion of a conditional containing them.
Even more peculiar would be the assertion of Ifit rained, then it didn 7 snow with respect to a situation in which it was not raining but was also not snowing.
The truth table for material implication, however, ensures that the conditional formula is true because the formula expressed by the antecedent is false.
These peculiarities may be explained, not by the truth-conditions of if .then, but from what we consider to be an appropriate utterance of a conditional sentence.
In other words, associating material implication with natural language conditionals merely gives the central core of the meaning of if ..then, its truth-conditions.
It has nothing to say about the appropriateness or otherwise of the assertion of a conditional statement.
Hence, irrespective of the connectivity of antecedent and consequent, someone who utters if it rained then it didn 't snow with respect to a situation in which it did indeed rain and did not snow, makes a true assertion, the situation being a confirming instance of the conditional.
With respect to situations in which it didn't snow and also did not rain, the sentence may also be truthfully asserted, because there are many situations in which it didn't snow (e.g. if the sun was shining).
The sentence could also be truthfully asserted with respect to the last possible situation, one in which it is not raining but it is snowing.
If the sentence is asserted as a general rule about the weather, a day on which rain didn't fall, but snow did does not disconfirm the rule.
Thus, it would be possible for someone to say See, it's true.
If it rained, then it didn't snow.
Isn't this a true statement?
It is certainly not a false one, and given that the theory of truth put forward in this book is bivalent, and so only allows formulae to have one of two possible truth values, the sentence must express a true proposition with respect to this situation.
The truth table in (40) does, therefore, provide some of the meaning of simple conditionals in English, and for the moment let us accept it as a reasonable interpretation of the if.then sentences generated by d .
We will, however, return to a discussion of the adequacy of material implication as the interpretation of natural language conditionals in Chapter 7.
3.3.5

Equivalence

Logicians usually operate with another logical connective which is not in GM but which we have been using in the definitions of truth-conditions.
This is the equivalence operator which is represented in LP as <-> and in English by the phrase if, and only if.
We could introduce this into the grammar by putting the English phrase into the lexicon as a CONJ so that it could be introduced via the same syntactic rule, Rule 13, that introduces and and or.
Although the phrase is little used in everyday English, adopting it into the grammar fragment allows us at least to see what contribution it makes to the truth-conditions of the definitions that are given.
The truth-conditions of the equivalence connective, <-> , are captured by requiring a formula p <-> q to be true just in case p and q have the same truth value.
The truth-conditions for this connective are spelled out in (45) and its corresponding truth table is given in (46).

73",91,73,3 Negation and Co-ordination,No info,No info,interpretation formula true justify belief sort connection assertion conditional peculiar ifit snow respect situation truth table material implication conditional formula true formula antecedent false peculiarity appropriate utterance conditional sentence word material implication natural language conditionals central core nothing appropriateness assertion conditional statement irrespective connectivity antecedent consequent someone utters snow respect situation rain snow true assertion situation instance conditional respect situation snow sentence many situation snow sun sentence respect last possible situation sentence general rule weather day rain fall snow disconfirm rule possible someone true rained snow true statement false theory truth book bivalent formula possible truth value sentence true proposition respect situation truth table simple conditionals english moment reasonable interpretation sentence discussion adequacy material implication interpretation natural language conditionals equivalence logician logical connective definition equivalence operator english phrase grammar english phrase lexicon conj syntactic rule rule introduces phrase little everyday english grammar fragment least contribution definition equivalence connective formula true truth value connective truth table
73,"3 Negation and co-ordination
(45)

Truth-conditions for equivalence: A formula (S/ <-» S2') is true iff either S!' is true and S2' is true or S,' is false and S2' is false.
(Si' <-> S2') is false, otherwise.

(46)

Truth Table for equivalence p q p<->q t t f f t f t f t f f t

Notice that equivalence has the same truth-conditions as a double material implication conjoined by &, as you can see by comparing the truth table in (47) with that in (46).
The final columns in these two tables show the same patterns of truth and falsity for the same combinations of truth and falsity of the component formulae, thus proving their semantic equivalence.
(47) p q

(p->q)

(q->p)

((p -> q) & (q -> p)) t t f f t f t f t f t t t t f t t f f t

Exercise 3.5:
(46) and (47) show that a formula of the form (p <-» q) is truth-conditionally equivalent to one of the form ((p -> q) & (q-> p)).
Write out the truth table for the formula ((p <^ q) <-» ((p -» q) &(q-^> p))).
What, if anything, is odd about this truth table?

3.4

Formal interpretation

The specification of the truth-conditions for formulae containing the connectives completes the interpretation of the logical language LP used to translate the set of
English sentences generated by Gh This informal definition of the interpretation of LP provides (indirectly) the truth-conditional semantics of a small fragment of English.
We end this chapter by providing a more rigorous definition of the theory set up so far.
This is primarily concerned with the replacement of informal English as the metalanguage and the definition of models and the theory of interpretation by a more formal language.
The metalanguage that is defined in this section is still partly based
74",92,74,3 Negation and Co-ordination,No info,No info,negation equivalence formula true true true false false false truth table equivalence notice equivalence double material implication truth table final column table show pattern truth falsity combination truth falsity component formula semantic equivalence exercise show formula form equivalent form truth table formula odd truth table formal interpretation specification formula connective interpretation logical language translate english sentence informal interpretation semantics small fragment english end rigorous theory replacement informal english metalanguage model theory interpretation formal language metalanguage
74,"Formal interpretation on English, but is much less open to misinterpretation and provides a properly rigorous and unambiguous specification of the whole of the interpretation procedure.
Formalisation of this sort is, as in any discipline, an aid to understanding and shows precisely what the theory being formalised predicts.
It is to this task that we now address ourselves.
The notation and the points made in this section are of necessity somewhat technical, but no concepts are introduced that have not already been informally presented.
Those unused to formal theories should try not to overreact to the symbolic nature of the formalism.
A symbol is not something mystical or arcane, but a tool to aid analysis and understanding.
When presented with a string of symbols, readers should take care to recall what each symbol is intended to represent and to assign the symbol the intended interpretation.
Unlike words or phrases in natural languages, each symbol in a formalism is unambiguous and the pedantry of the metalanguage is designed so that there can be no possibility of ambiguity.
The formalism thus provides an unambiguous andrigorousspecification of what has been said about truth-conditional meaning in this chapter and in Chapter 2 which allows the predictions of the theory to be checked.
3.4.1

Formal models

As we have already seen, there are two parts to the theory of interpretation that we are developing: the construction of models which are the representations of situations or states of affairs, and the theory of interpretation, called the model theory, which provides the means of relating all the expressions in some object language to denotations in these models.
As discussed in Chapter 2, a model consists of an ontology and a function that assigns extensions to basic expressions in the object language.
The ontology is defined as a set of entities, usually symbolised as the set A, which contains the entities that exist in the state of affairs being modelled.
Extensions are assigned to basic, or constant, expressions of the object language by a function F which associates each constant expression with some entity in A or some subset of
A or some set of ordered n-tuples in A, depending on the logical category of the constant expression.
Crucially, F is a function, something that assigns a unique denotation to each constant in the object language.
More is said about functions in
Chapter 4, but their importance lies in the fact that they always provide a unique value (here an extension in the model) for a particular argument (here a basic expression in the object language, LP).
This ensures that the interpretation of some
Lp expression is properly unambiguous.
Thus, F always applies to some constant a in the object language to yield a unique extension, A {delta).
If F were not a function, it would be possible for a constant to be assigned two different extensions.
In such a case, we could not necessarily decide whether a formula involving the expression was true or not and, therefore, could get no information from it.
For example, if a predicate like scream' denoted two different sets, say 0 and
{MANi,WOMAN2},then a formula like scream '(jo') could be either true or false depending on which extension is chosen.
On a particular occasion of utterance, however, the sentence Jo screamed expresses a proposition that is either true or false, but not both, assuming that Jo has a unique extension in the context.
Furthermore, although we may come across homonymous or polysemous expressions in speech, these are interpreted with the aid of the context as if they were properly unambiguous.
75",93,75,3 Negation and Co-ordination,No info,No info,formal interpretation english much le open misinterpretation rigorous unambiguous specification whole interpretation procedure formalisation sort discipline aid understanding show theory predicts task address notation point necessity technical concept unused formal theory overreact symbolic nature formalism symbol mystical arcane tool aid analysis understanding symbol reader care recall symbol assign symbol interpretation word phrase natural language symbol formalism unambiguous pedantry metalanguage possibility ambiguity formalism unambiguous andrigorousspecification meaning prediction theory formal model part theory interpretation construction model representation situation state affair theory interpretation model theory mean expression object language denotation model model ontology function extension basic expression object language ontology entity entity state affair extension basic constant expression object language function associate constant expression entity subset set logical category constant expression function unique denotation constant object language function importance fact unique value extension model particular argument basic expression object language interpretation expression unambiguous constant object language unique extension delta function constant different extension formula expression true information predicate scream different set mani formula scream true false depending extension particular occasion utterance sentence express proposition true false unique extension context homonymous polysemous expression speech aid context unambiguous
75,"3 Negation and co-ordination
In other words, they are treated as denoting a unique extension in the given context.
The fact that F is a function does not, of course, prevent two lexemes from having the same extension, like two synonyms e.g. mercury and quicksilver.
Items that are not synonymous may also have the same extensions.
In the real world, this is true of the words unicorn and gryphon on the assumption that they denote nothing (i.e. nothing that exists in our world is either a unicorn or a gryphon).
The significance of this will be examined further in Chapters 9 and 10.
As discussed in Chapter 2, the denotation assignment function must also specify a denotation of every constant in the object language, even if there is nothing in its extension.
This is because, even if nothing in a model has a certain property or stands in a certain relation to anything else, we can use expressions with null extensions to describe some state of affairs and to make true statements using the negation operator.
An expression like Jo threw the cat to Fiona, however, is strictly both ungrammatical and meaningless in the fragment generated by d , because threw is not a word in the lexicon of the grammar.
Such an expression would be grammatical, of course, if the ditransitive verb threw were introduced into the lexicon.
If this is done, however, its translation into Lp, throw \ must be included in the specification of the denotation function assignment in any model used to interpret LP.
Otherwise formulae containing this constant would remain meaningless.
Any model for interpreting expressions in LP can be defined as an ordered pair consisting of the ontology and the denotation assignment function, i.e. M = «A,F».
The model Mi may thus be formally defined as in (44).
This specifies everything that exists in the model, i.e. the ontology A, and the extensions of all the constants in LP that are associated with lexemes in Gi.
The situation thus represented involves two men, two women, a dog, a cat, a book and a cake, with the properties and relations assigned informally in Chapter 2.
F t is specified as a set of statements of the form
Fi(a) = a where a is the argument of the function, a constant in LP and a is the value of the function applied to this argument, i.e. its extension in the model M,.
It is important to remember that the upper case words in (48) and elsewhere represent real world entities and are not words of English or Lp.
(48) a.
b.

M, = «A,F,», where
A = {MANi,WOMAN2,MAN2,WOMANi,DOG,CAT,BOOK,CAKE}
F,=
F^the-student') = MAN!,
F,(bertie') = MAN2,
F,(ethel') = WOMAN!,
F,(the-golfer') = WOMANi,
F,(fiona') = WOMAN2,
F^the-singer') = WOMAN2,
F^the-lecturer') = WOMAN2,
F,(the-cat') = CAT,
F,(prudence') = CAT,
F,(chester') = DOG,
F1(the-dog>) = DOG,
F,(trie-book') = BOOK,

76",94,76,3 Negation and Co-ordination,No info,No info,negation word unique extension context fact function course prevent lexeme extension synonym mercury quicksilver item synonymous real world true word unicorn gryphon assumption denote nothing nothing world unicorn gryphon significance chapter denotation assignment function denotation constant object language nothing extension nothing model certain property certain relation expression null extension state affair true statement negation operator expression cat fiona ungrammatical meaningless fragment word lexicon grammar expression grammatical course ditransitive verb lexicon translation throw specification denotation function assignment model interpret formula constant meaningless model expression pair ontology denotation assignment function model specifies everything model ontology extension constant lexeme situation men woman dog cat book cake property relation statement form argument function constant value function argument extension model important upper word real world entity word english mani womani dog cat book cake man bertie ethel woman womani fiona cat prudence cat chester dog dog book
76,"Formal interpretation
F,(the-cake') = CAKE,
F,(ran>) = {DOG,CAT}>
F,(laugh') = {MAN!, WOMAN,},
F,(howlf) = {DOG},

F^crazy') = 0 ,
F,(happy') = {WOMAN^WOMAN^MANi} ,

F,(disgusting') = {CAKE},
F^scream') = 0 ,
Fi(messy') = 0 ,
F,(sing')= {WOMAN,},
F,(like') = {<MAN lfWOMANi>, <MAN lf WOMANi>,
<WOMAN!,WOMAN2>, <WOMAN2,CAT>, <MANi,MANi>,
< WOMAN2, WOMAN^, <MAN!,MAN2>}
F,(loathe') = {<MAN,,DOG>, <MAN!,DOG>, <WOMAN!,DOG>,
<WOMAN2,DOG>, <WOMAN 2 ,MAN t >, <CAT,DOG>},
F,(poison') = {<CAKE,DOG>},
F,(eat') = {<DOG,CAKE>},

F,(kick') = 0 ,
F,(read') = {<WOMAN1,BOOK>, <MANi,BOOK>},
F,(give') = {<WOMAN2,CAKE,MAN2>, <MAN!,CAKE,DOG>,
<MAN, ,BOOK,MAN2>, <MAN2,BOOK,WOMAN2>,
<MAN! ,C AT, WOMAN 2 >},
Fi(rain') = 1,
Fi(snow') = 0}.
The last two entries in the specification of F! may seem a bit strange.
The symbols 1 and 0 are not in A and in Chapter 2 the expressions rain' and snow' were directly associated directly with a truth value, their extensions in the model M, being true and false, respectively.
It is not just these two constants that are defined as having truth values as their extensions, but all formulae are ultimately assigned a value, true or false, by the interpretation procedure.
What is meant by the terms true and false in semantics is not, however, quite the same as what is meant by the same words in
English.
In order to emphasise this the English words, true and false are replaced in model-theoretic semantics by two neutral symbols which are traditionally shown as
0 and 1, for falsity and truth, respectively.
It does not really matter what these symbols actually are - they could be a cup of coffee and a biscuit - as long as they have a specific interpretation in the theory.
This interpretation is defined by the theory of interpretation itself (ie. by the set of truth-conditions): a formula denotes 1 just in case it corresponds to the structure of some model according to the rules of interpretation, in which case we say it is true, or it denotes 0 if doesn't correspond, in which case we say it is false.
This statement may seem somewhat peculiar and perhaps even circular, but it is not.
True and false are informal (English) terms which help us remember what we are getting at in our semantic analysis, whereas 0 and
1 are precise (logical) terms, whose interpretation is defined by the theory.
For this latter reason, the symbols 1 and 0 are not included in the ontology of the model, but are part of the theory of interpretation.
If they were members of A, some models might not contain them and so have no means of representing truth and falsity.
77",95,77,3 Negation and Co-ordination,No info,No info,formal interpretation cake cat laugh man woman howlf dog happy disgusting cake messy sing woman man lfwomani man womani woman cat mani mani man loathe man man dog woman dog dog woman man cat dog poison cake dog dog cake kick read book mani book cake man cake dog man book book man woman rain snow last entry specification strange symbol expression rain snow truth value extension model true false constant truth value extension formula value true false interpretation procedure term true false semantics word english order emphasise english word true false replaced semantics neutral symbol falsity truth symbol coffee biscuit long specific interpretation theory interpretation theory interpretation formula denotes structure model rule interpretation true denotes false statement peculiar circular true false informal english term help semantic analysis precise logical term interpretation theory latter reason symbol ontology model part theory interpretation member model mean truth falsity
77,"3 Negation and co-ordination
However, it is part of the theory that all formulae have determinate truth values and so it is in the theoretical part of the interpretation procedure that they are defined.
3.4.2

Model theory

We have now given a formal definition of the structure that models have and given a specification of one such model, M,.
The next thing to be done is to provide a formalisation of the theory of interpretation which defines how formulae are interpreted with respect to some model, the model theory.
The model theory provides a means of determining the extensions of all expressions in LP, whether simple or complex.
Formally, the denotation of an expression is represented by putting it within square brackets, [.].
Thus, for example, [the-caf] represents the denotation of the-caf and [scream'(jo}) v laugh'(fwna')] represents the denotation of the formula that translates Jo screamed or Fiona laughed.
As we have seen, however, expressions do not have denotations tout court, but only with respect to a particular model.
For this reason, the name of the model being used to interpret the expression is written as a superscript to the right of the square brackets.
For example, the denotation of laugh'(fiona') with respect to the model, Mi, is written as
[laugh'(fiona')]m and that of the-caf is [the-cat']m.
Formally, the model theory is stated as a recursive definition of the notion of denotation in a model, i.e. of [oc]M where a is any expression in the object language.
The base of the recursive definition is given by the equation of the model-theoretic denotation of constants with the extension assigned to that constant by F in the relevant model (see (49.1)).
This means that while the denotation function, F, can vary from model to model, it always provides the basis of the interpretation of complex expressions.
In other words, the truth value of a sentence is determined by the denotations of the words it contains.
For example, because the expression the-caf is a constant in LP, its extension with respect to M,, [the-caf ]M\ is the result of applying F l 5 the denotation assignment function in Mi, to the expression the-caf.
By
(48), Vx(the-caf) is CAT, so [the-caf]m is also CAT.
From the denotations of the constants supplied by F in a particular model, the denotations of all other expressions in the language are built up by a series of recursive clauses which define how to build up the denotations of complex expressions from the denotations of their parts, in accordance with the principle of compositionality.
Anything not specified by the base and recursive clauses does not count as a possible denotation in the model.
The recursive clauses state formally the truth-conditions of formulae in L P by defining what must be the case for a formula with a particular structure to be true in any model.
Thus, the truth-conditions for formulae constructed from an n-place predicate and n arguments is formally set out in general form in (49.2) and requires that the n-tuple formed by taking the extensions of each of the arguments in order to be in the extension of the predicate for the formula to be true.
(49.3) states that an equative formula is true only when the entities denoted by the two individual constants being equated are one and the same entity.
The next four clauses in the model theory in (49) deal with the interpretations of complex formulae given the extensions of their component parts: a negative formula is true if the component formula is false; two formulae must be true for their conjunction by & to be true; at least one of two formulae must be true for their disjunction by v to be true; for
78",96,78,3 Negation and Co-ordination,No info,No info,negation part theory formula determinate truth value theoretical part interpretation procedure model theory formal structure model specification model provide formalisation theory interpretation defines formula respect model model theory model theory mean extension expression simple complex denotation expression square bracket denotation scream laugh fwna denotation formula translates fiona expression denotation tout court respect particular model reason name model interpret expression superscript right square bracket denotation laugh fiona respect model laugh fiona model theory recursive notion denotation model expression object language base recursive equation denotation constant extension constant relevant model mean denotation function model model basis interpretation complex expression word truth value sentence denotation word expression constant extension respect result denotation assignment function expression cat denotation constant particular model denotation expression language series recursive clause define build denotation complex expression denotation part accordance principle compositionality base recursive clause possible denotation model recursive clause state formula defining particular structure true model formula predicate argument general form extension argument order extension predicate formula true state formula true entity individual constant entity clause model theory deal interpretation complex formula extension component part negative formula true component formula false formula true conjunction least formula true disjunction true
78,"Formal interpretation conditionals to be true, either the antecedent must be false or the consequent true; and two formulae are equivalent only if they have the same truth value.
This completes the formal definition of the model theory used to interpret LP.
(49) does nothing more than formally state the model theory that has been informally presented in Chapter 2 and the earlier part of this chapter.
No new information about interpretation is introduced.
(49)
1.
2.
3.
4.
5.
6.
7.
8.

Given a model, M = «A,F», then
For any constant a , [a ] M is F ( a ) .
I f / i s an n-place predicate, and ah...,an are individual constants, then
\f(alf...,an)]M is l,iff<[«y]M,...,[«n]M>G [/]M. Otherwise, \f(a,,...,a,)]M is 0.
If a and b are individual constants, then [a = b]M is 1 iff [a]M is extensionally identical to [b]M. Otherwise, [a = b]M is 0.
If 0 is a formula, then [~((())]M is 1, iff [(|>]M is 0.
Otherwise, [~(<|>)]M is 0.
If (|> and \j/ are formulae, then [<>
| & \j/]M is 1, iff [c|)]M is 1 and [\|/]M is 1.
Otherwise, [()) & \|/ ] M is 0.
If <|) and \\f arc formulae, then [($ v \|/ )] M is 1, iff [<()]M is 1 or [\j/]M is 1.
Otherwise, [(()) v \j/ )]M is 0.
If (|> and \\f are formulae, then [((() -» \|/)]M is 1, iff [())]M is 0 or [\|/]M is 1.
Otherwise, [((() -^ \|/)] M is 0.
If <|) and \jr are formulae, then [$ <-> \|/] M is 1, iff [c|)]M is [\|/]M. Otherwise,
[ty <-> \\f ] M is 0.

To show how the model theory works, we shall look at the interpretation of the formula that translates the sentence If Jo was the student, then the lecturer loathed Jo,
(jo'= the-student'—> loathe'(the-lecturer', jo')).
To specify the interpretation of this
Lp formula, we begin by defining the truth-conditions of the complex formula according to the model theory and then find out whether these are met in the model under consideration.
If they are, the formula is true.
If not, then it is false.
Since the formula is a conditional, the first step in interpreting it is given by the truthconditions for material implication set out in (49.7).
In other words, we replace <|) and
\|/ in this clause with the component formulae to get (50).
[(jo' = the-student' -> loathe'(the-lecturer',jo'))] M1 is 1, iff [jo' = the-student'] M1 is 0 or [loathe'(the-lecturer'jo')] M1 is 1.

(50)

It is then necessary to interpret the component formulae to see whether these truth-conditions are met.
The antecedent formula is equative, the truth-conditions of which are provided by the clause in (49.3).
We now come to constants of the language
Lp whose extensions are provided by the model.
So, the base clause (49.1) is applied twice to get the extension of jo' and the-studenf in M,, allowing us to determine the truth value of the antecedent formula with respect to the model, as shown in (51).
(51) a.
b.
c.
d.

[jo' = the-student'] M! is 1 iff [jo']M1 is extensionally identical to
[the-studenf ] M1 (by (49.3)).
[jo']M1 = F,(jo') = MAN! (by (49.1) and definition of F, in (48.b)).
[the-studenf ] M1 = F,(the-studenf) = MAN! (by (49.1) and definition of F,).
Therefore, as MANX is identical to MAN,, [jo = the-studenf ] M1 is 1.
79",97,79,3 Negation and Co-ordination,No info,No info,formal interpretation conditionals true antecedent false consequent true formula equivalent truth value formal model theory interpret nothing model theory earlier part new information interpretation model constant predicate individual constant individual constant identical formula formula arc formula formula formula show model theory work interpretation formula translates sentence student lecturer loathe specify interpretation formula complex formula model theory model consideration formula true false formula conditional first step truthconditions material implication word clause component formula loathe loathe necessary interpret component formula antecedent formula equative clause constant language extension model base clause extension determine truth value antecedent formula respect model identical man man manx identical man
79,"3 Negation and co-ordination
Because the antecedent is true with respect to the model, we cannot yet tell whether the conditional is true and must find out the truth value of the consequent.
This contains a two-place predicate, loathe' and two arguments, the-lecturer' and jo '.By the clause in (49.2) the truth-conditions of this formula are met if entities denoted by the-lecturer' and jo' form an ordered pair which is in the extension of loathe' in M,, as set out in (52).
Since this is the case, it follows from (50) that the whole conditional is true with respect to Mi.
Hence, we have indirectly interpreted the
English sentence IfJo was the student, then the lecturer loathed Jo as being true of the situation modelled by Mi, as required.
[loathe'(the-lecturer'jo')]M1 is 1 iff<[the-lecturer']M1,[jo']M1>e [loathe']M1
(by (49.2)).
b. [loathe']""1 = F,(loathe') =
{<MAN1,DOG>, <MAN2,DOG>,
<WOMAN1,DOG>, <WOMAN2,DOG>, <WOMAN2,MAN,>,
<CAT,DOG>} (by (49.1) and the definition of F, in (48.b)).
c. [the-lecturer']M1 = F,(the-lecturer') = WOMAN2(by (49.1) and F, in (48.b)).
d. [jo']M1 = F,(jo') = MAN,(by (49.1) and F, in (48.b)).
e.
Because <WOMAN2,MAN!> e {<MAN,,DOG>, <MAN2,DOG>,
<WOMAN 1 ,DOG>, <WOMAN2,DOG>, <WOMAN2,MAN1>,
<CAT,DOG>}, [loathe'(the-lecturer',jo')]M1 is 1.

(52) a.

This process, which may seem rather tedious (as indeed it is!), is a rigorous specification of the truth-conditional meaning of the formula that translates the sentence IfJo was the student, then the lecturer loathed Jo.
Each step is automatic and the final conclusion is reached just by following the rules set out in (49).
Thus, the model theory makes absolutely explicit how the.interpretation of formulae that translate sentences generated by G{ is to be carried out.
Note that the theory is not intended to represent the steps that we, as speakers of English, carry out in our heads when interpreting expressions generated by this small grammar.
It does, however, provide an automatic procedure for determining the truth or falsity of any formula associated with a sentence in d with respect to the model Mi and thus constitutes a theory of the truth-conditional meaning of the grammar fragment.
(49) thus provides an explicit theory of semantic interpretation whose precision enables us to check its predictions and see if they do indeed match up with our intuitions about what English sentences mean.
In the following chapters, it will be shown that the theory in (49) is not sufficient in itself to provide a full theory of interpretation for English (or any other natural language), but it does provide a firm foundation for the more adequate theories to be discussed later.
Exercise 3.6:
Translate the following sentences into LP and determine their truth or falsity with respect to Mi using the formal method shown in (50) to (52): i.
Jo didn't give the cat to the lecturer.
ii.
The dog ate the cat or the dog ate the cake.
iii.
If Chester was messy, then the cat didn't loathe the dog.

80",98,80,3 Negation and Co-ordination,No info,No info,negation true respect model conditional true truth value consequent loathe argument clause formula entity form pair extension loathe set whole conditional true respect english sentence ifjo student lecturer true situation loathe loathe loathe loathe dog dog dog dog man cat dog man man man dog woman dog dog cat dog loathe process tedious rigorous specification formula translates sentence ifjo student lecturer step automatic final rule model theory explicit formula translate sentence note theory represent step speaker english head expression small grammar automatic procedure truth falsity formula sentence respect model theory meaning grammar fragment explicit theory semantic interpretation precision enables prediction match intuition english sentence chapter theory sufficient full theory interpretation english natural language firm foundation adequate theory exercise translate sentence truth falsity respect formal method cat lecturer dog cat dog cake chester messy cat loathe dog
80,"Further reading
3.5

Further reading

The logical operators ~, &, v , -» and <-^ and their truth-conditional interpretations form the basis of propositional logic and there are many introductions to this system: see, in particular, Guttenplan (1986: 42-88) (which also discusses translation on pp.
105-124), Allwood, Andersen and Dahl (1977: ch.
4), Lyons (1977:138-150), Partee, ter Meulen and Wall (1990:99-107), Martin (1987: 8-30) and McCawley (1981: chs.
2 & 3) which gives a discussion of the syntax and semantics of propositional logic and inference, but uses a different notation that is potentially confusing to the novice.
(Barwise and Etchemendy (1987) offers an introductory text and a computer program for learning predicate logic on a Macintosh computer.)
The formal approach to interpretation discussed in Section 3.4 is discussed in Dowty, Wall and Peters (1981: ch.
2) which also touches on matters that will become important in later chapters.

81",99,81,3 Negation and Co-ordination,No info,No info,logical operator interpretation form basis propositional logic many introduction system particular guttenplan translation allwood andersen dahl lyon partee ter meulen wall martin mccawley chs discussion syntax semantics propositional logic inference different notation confusing novice barwise etchemendy introductory text computer program predicate logic macintosh computer formal approach interpretation dowty wall peter matter important later chapter
81,"4

4.1

Type Theory

Verb phrases and other constituents

One of the conditions of adequacy for a semantic theory set up in Chapter 1 is that it conform to the Principle of Compositionality.
This principle requires the meaning of a sentence to be derived from the meaning of its parts and the way they are put together.
The interpretation procedure for the grammar fragment set up in the last two chapters adheres to this principle insofar as the translations of sentences, and thereby their interpretations, are derived from the translations of their parts and the syntactic rules used to combine them.
Thus, for example, the translation of the sentence Ethel kicked the student is derived from the translations of the two noun phrases Ethel and the student and the verb kicked.
These are combined using the translation rule for transitive sentences to give kick'(etheV,the-student').
The truth or falsity of the resulting formula can then be directly ascertained by checking whether the ordered pair of entities denoted by the subject and object in that order is in the set of ordered pairs denoted by the predicate, kick'.
Unfortunately, in the theory of Chapters 2 and 3, compositionality is maintained only at the expense of the syntax.
The 'flat' structure of the predicate-argument syntax of Lp and its interpretation requires a flat sentence structure in the English syntax in order to maintain a direct correspondence between syntax and translation, and thus a transparent relation between elements in the interpretation and constituents of the
English sentence.
There is, however, strong syntactic evidence that many languages, including English, do not have a flat sentence structure, but one that contains a number of hierarchically defined constituents.
In particular, English sentences are usually analysed as containing verb phrases consisting of the verb and its complements and modifiers.
According to the principle of compositionality, all constituents within a sentence must have a well-formed translation and thus be assigned a denotation by the model.
Hence, if the sentence Ethel kicked the student were analysed as containing a verb phrase, a properly compositional semantics would need to assign a logical representation and denotation to the phrase kicked the student.
It is not too difficult to see what sort of thing such a phrase denotes: verb phrases denote the same things as intransitive verbs, i.e. sets of entities, because the simplest verb phrases consist only of a single intransitive verb.
Hence, in the same way that the verb ran may be associated with a predicate run' denoting the set of things that have the property of running, so the verb phrase kicked the student ought to be associated with some predicate denoting the set of all entities that kicked the student.
In formal terms, the extension of this verb phrase should be derived from the extension of predicate representing the verb kick' by taking the first element of each of the ordered pairs in this set where the second element of the pair is the entity denoted by the direct object, [the-student']M in this case.
There is, however, no expression in LP that could be assigned such an interpretation.
It is not possible, for example, to represent verb phrases by leaving out the subject expression from a formula.
Expressions like kick'(the-student') or kick'(_,the-student') are not well-formed expressions of LP because they do not conform to the construction rule for formulae given in Chapter
82",100,82,4 Type Theory,No info,No info,type theory verb phrase constituent condition adequacy semantic theory conform principle compositionality principle sentence part way interpretation procedure grammar fragment last chapter principle insofar translation sentence interpretation translation part syntactic rule translation sentence ethel student translation noun phrase ethel student verb combined translation rule transitive sentence kick ethev truth falsity formula pair entity subject object order pair predicate kick theory chapter compositionality expense syntax structure syntax interpretation flat sentence structure english syntax order direct correspondence syntax translation transparent relation element interpretation constituent english sentence strong syntactic evidence many language english flat sentence structure number constituent particular english sentence verb phrase verb complement modifier principle compositionality constituent sentence denotation model sentence ethel student verb phrase compositional semantics assign logical representation denotation phrase student difficult sort phrase verb phrase denote thing intransitive verb entity simplest verb phrase single intransitive verb way verb may run thing property running verb phrase student denoting entity student formal term extension verb phrase extension predicate verb kick first element pair second element pair entity direct object expression interpretation possible verb phrase subject expression formula expression kick kick expression conform construction rule formula
82,"A typed logical language
2, repeated in (1), below, which requires n-place predicates to have n arguments to make a formula.
The expression kick' is a two-place predicate, and so must combine with two individual expressions to make a well-formed formula.
(1) t = Pred n (e\...,e n ).

There are also, of course, many other constituents that the logical language L P cannot represent.
For example, adverbs like slowly or prepositional phrases like in the garden have no obvious representation or interpretation within the theory of the previous chapters.
The word slowly in the sentence Chester ran slowly cannot be treated as a simple predicate because such expressions do not define properties of individuals.
It makes no sense to translate Chester ran slowly as run'(chester') & slowly'(chester') because the idea of Chester 'being slowly' is not coherent.
Even if the adverb were translated as if it were equivalent to its adjectival base form to give run '(chester') & slow '(chester'), this would not provide an adequate interpretation for
Chester ran slowly.
This is because it is Chester's running that is described as slow, not Chester himself.
It is possible that Chester's slow running is still fast and thus to predicate slow of Chester would not capture the meaning intended to be conveyed by the use of the adverb.
Adverbs and prepositional phrases (in some of their uses) predicate properties, not of individuals, but of predicates themselves.
Since LP only contains expressions that are predicates, individuals or connectives, it is not capable of representing higher order concepts like predicates of predicates.
4.2

A typed logical language

There is no way to represent verb phrases or verb phrase modifiers in LP in such a way as to give their intuitively correct denotations.
A new logical language is therefore needed to represent more adequately the semantic structure of natural languages like English.
This logical language must have more flexibility than L P and, in particular, it should have a more complex system of semantic categories, to allow formulae to be given more structure in order to better represent the rich constituent structure of natural languages.
From now on, we will distinguish logical semantic categories, like e and t, from syntactic ones, like NP, S, etc., by referring to the former as semantic types (or just types).
The theory behind them is referred to as Type
Theory and the new logical language is called Ltype.
Although L ^ is a very different language from L? in many ways, it contains many of its features.
In particular, it contains the propositional operators and the notion of predicate/argument structure, albeit in a slightly modified form.
The interpretation of the language is also similar in that it is based on set theory, although again this is somewhat modified.
We now turn to the definition of the syntax of the language Ltype and see how translation into this language maintains the constituent structure of a sentence.
4.2.1

Semantic types

In Lp, there are only five logical types: individual constant (e), formula (t), one-place connective (i.e. ~), two-place connective (i.e. &, v , —> , <->) and n-place predicate
(Predn).
These types are all primitive in LP, i.e. they have no internal structure and cannot be further decomposed.
It is possible, however, to define them in such a way
83",101,83,4 Type Theory,No info,No info,typed logical language predicate argument formula expression kick predicate individual expression formula many constituent logical language adverb prepositional phrase garden obvious representation interpretation theory previous chapter word sentence chester simple predicate expression define property individual sense translate chester chester chester idea chester coherent adverb equivalent adjectival base form chester slow chester adequate interpretation chester running slow chester possible chester slow running fast slow chester meaning use adverb adverb prepositional us property individual predicate expression predicate individual connective capable higher order concept predicate predicate logical language way verb phrase verb phrase modifier way correct denotation new logical language semantic structure natural language english logical language particular complex system semantic category formula structure order rich constituent structure natural language distinguish logical semantic category syntactic former semantic type type theory type theory new logical language ltype different language many way many feature particular propositional operator notion structure form interpretation language similar set theory modified syntax language ltype translation language constituent structure sentence semantic type logical type individual constant formula connective connective predicate predn type primitive internal structure possible define way
83,"4 Type theory that only two of the types are primitive and the other three are defined in terms of these.
In order to do this, we must consider a different way of viewing the construction of logical formulae.
The main formula construction rule in (1) is a rule schema that collapses all the rules in (2) and (infinitely) many more.
(2) a.
b.
c.
d.
t -> Predo.
t -> Pred,(e).
t -> Pred2(e1,e2).
t ->

In most phrase structure grammars, the combinatorial properties of expressions of particular categories, like e and Predn in (2) (or NP and S in the grammar fragment d ) , have to be inferred from the set of rules that govern their distribution.
For example, from the grammar fragment G h we can extract the information that transitive verbs combine with two noun phrases to make a sentence or that a conjunction combines with two sentences to make another sentence.
In the same way, we can think of a two-place predicate as an expression that combines with two individual constants to give a formula, or a connective like & as an expression that combines with two formulae to make a complex formula.
Such information, however, instead of being encoded within a set of rules, could as well be directly encoded in syntactic categories or semantic types.
For example, instead of treating a two-place predicate like kick'as having a primitive type, Pred2, we may give it a complex type which itself contains the information that the expression combines with two individuals to make a formula.
Such complex types thus provide information about the number and types of the arguments with which particular expressions combine and the type of the expression that results after the combination.
Hence, the type of an expression directly encodes what other types of expression it can combine with and we only need to know exactly how the combination is effected to perform the required operation.
It is as if we have an equation like that in (3) where we need to replace the e's with particular individual expressions (like etheV and the-student') and to know what the combination operation x means to get to the resulting expression which is a formula of type t.
(3) kick' x e x e = t.

Generalising this idea and making it more formal, we can define non-primitive types as ordered pairs of types.
The first element of the pair indicates the required type of the expression which expressions of the complex type combine with, the input type and the second element gives the type of the resulting expression, the output type.
Thus, a one-place predicate, like scream\ which combines with an individual expression (an expression of type e) to give a formula (an expression of type t), has the complex type <e,t>.
Similarly, the negation operator, ~, which combines with a formula to make a formula that has the complex type <t,t>.
(4)

Complex types: <input type,output typo.

What, however, of expressions that combine with more than one argument, like n-place predicates and two-place connectives?
It would be possible to allow types to have an ordered list of types as their first element, instead of just a single type.
This list would give the types of all the expressions with which another expression
84",102,84,4 Type Theory,No info,No info,type theory type primitive term order different way construction logical formula main formula construction rule rule schema collapse rule many predo phrase structure grammar combinatorial property expression particular category predn grammar fragment set rule govern distribution fragment extract information transitive verb noun phrase sentence conjunction sentence sentence way expression individual constant give formula connective expression formula complex formula information rule syntactic category semantic type predicate primitive type complex type information expression individual formula complex type information number type argument particular expression type expression result combination type expression type expression combine combination perform operation equation particular individual expression ethev combination operation mean expression formula type kick idea formal define type pair type first element pair type expression expression complex type combine input type second element type expression output type predicate individual expression expression type formula expression type complex type negation operator combine formula formula complex type complex type input type output typo expression argument predicate connective type list type first element single type list type expression expression
84,"A typed logical language combines and the order in which they are combined.
On this definition, a two-place predicate would have two instances of type e as its input list and t as the type of the output, i.e. have a type <[e,e],t>.
A two-place connective, like &, would have two instances oft as its input and t again as its output, i.e. <[t,t],t> and so on.
It would then be a simple matter to state a rule that combines an expression with a complex type with expressions of all of its input types at the same time: a two-place predicate would combine with two expressions of type e to give a formula (as in the equation in (3)), and a two-place connective would combine with two formulae to give a formula and so on.
This approach would, however, maintain the basic syntax of Lp, since it combines a predicate expression with its argument expressions all in one go.
As such it is subject to the same problems in defining representations for constituents like VP as Lp itself.
Instead of defining complex types as having an ordered list as the first element, however, it is possible to restrict the number of input types to one, allowing only binary types and so only binary combination of logical expressions into more complex expressions.
This may seem far too strict.
If complex types only have one possible input type, how can n-place predicates be defined?
The answer is quite simple.
The types for one-place predicates, <e,t>, and the negation operator, ~, <t,t> have a primitive type, t, as its output type.
The output type could, however, be complex, not primitive.
For example, an expression could combine with an individual constant to give an expression that itself requires an individual constant in order to make a formula.
The type of such an expression would therefore be <e,<e,t» and, since an expression of this type ultimately requires two individual expressions to make a formula, we may associate this type with two-place predicates.
The combination of such expressions with their arguments would not be a one stage process as shown in
(3) but a two stage process as shown in (5).
First, the predicate is combined with one expression of type e to make an expression of type <e,t> as in (5.a) and then this expression is combined with another expression of type e to yield an expression of type t, i.e. a formula.
(5) a.
b.

<e,<e,t» x e = <e,t>.
<e,t> x e = t.

It is not only the result types that can be complex but argument ones as well.
For example, an expression may combine with a one-place predicate to give an expression of the same type.
As we have seen, one-place predicates have the type
<e,t> because they combine with an individual to make a formula.
A predicate modifier would, therefore, have the type «e,t>,<e,t», giving the type of a VP adverb, like slowly.
In fact, the theory imposes no constraints on the complexity of semantic types, beyond the fact that types must be binary: there must be only one input type and one output type.
Given this lack of constraint, there is an infinite number of types which must, therefore, be defined recursively.
The base of the recursion is given by the statement of what constitutes a primitive type, i.e. individuals and formulae, and the recursive clause defines complex types based on these, as fully specified in (6).

85",103,85,4 Type Theory,No info,No info,typed logical language order predicate instance type input list type output type connective instance input output simple matter state rule expression complex type expression input type time predicate expression type formula equation connective formula formula approach basic syntax combine predicate expression argument expression subject problem representation constituent complex type list first element possible number input type binary type binary combination logical expression complex expression strict complex type possible input type predicate answer simple type predicate negation operator primitive type output type output type complex primitive expression individual constant give expression individual constant order formula type expression expression type individual expression formula type predicate combination expression argument stage process stage process first predicate expression type expression type expression expression type yield expression type formula result type complex argument well expression predicate expression type predicate type combine individual formula predicate modifier type adverb fact theory constraint complexity semantic type fact type binary input type output type lack constraint infinite number type base recursion statement primitive type individual formula recursive clause complex type
85,"4 Type theory
(6) a.
b.
c.

Types for Ltype: e is a type, t is a type,
If a is a type and b is a type, then <a,b> is a type.

From (6), we can construct types like <e,t>, and <t,t>.
From the latter we can construct types like «e,t>,<e,t», «e,t>,t>, <t,<t,t».
From these we can construct more complex types like «e,t>,«e,t>,t», <«e,t>,t>,«e,t>,<e,t>» and so on.
All the types in (7.a) are thus well-formed according to the definition in (6) but those in
(7.b) are not.
(7) a.
b. <e,e,t>, <e,<oc,t», «e,e,e>,t>, <Predn>.
Now that the system of types has been given, the syntactic rules that combine expressions with different types must be specified in order to complete the definition of the language L ^ .
One of the advantages of encoding combinatorial properties directly in the types themselves is that it is not necessary to state individual rules for combining expressions of different types.
Instead, only one syntactic rule needs to be stated.
Because types are binary, the rule combines at most (and at least) two expressions.
The rule of functional application (or RFA for short), defined in (8), combines an expression with type, <a,b>, with an expression of type a to yield an expression of type b.
The expression with the type <a,b> is called the functor and the expression with which it combines is called the argument.
The result of applying the functor to its argument is obtained by writing the functor to the left of the argument, which is enclosed in parentheses.
So, in general, if/is the functor expression and a is the argument, then the functional application of/to a is f(a) (which is often read as
/applied to a or justfofa).
(8)

Rule of functional application (RFA): If/ is an expression of type <a,b>, and a an expression of type a, then f(a) is an expression of type b.

The rule of functional application can be thought of as performing some sort of logical cancellation analogous to the sort of cancelling that goes on in arithmetical multiplication.
If the cancelling yields a single result at the end, then the combination of expressions is well-formed.
If no cancelling takes place, however, or if it is anomalous, then the resulting expression is ungrammatical in L ^ .
As an arithmetical illustration, consider the simple multiplication in (9.a).
The result of this multiplication is determined by cancelling out the identical multiplier and divisor to leave the unique uncancelled dividend as the result.
In (9.b), on the other hand, because multiplier and divisor do not cancel each other out, the result is not equal to the dividend but must be computed.
(9) a.
b.

2/4x4 = 2.
2/4 x 3 * 2.

Similarly, to get the type of two expressions when they are combined by RFA, the type of the argument is cancelled with the identical first element of the type of the functor, as illustrated schematically in (lO.a).
The type of the resulting expression is given by the (uncancelled) output type of the functor category.
If no cancellation can
86",104,86,4 Type Theory,No info,No info,type theory type ltype type type type type type construct type latter construct type construct complex type type predn system type syntactic rule expression different type order complete language advantage combinatorial property necessary state individual rule expression different type syntactic rule type binary rule combine least expression rule functional application rfa short combine expression type expression type yield expression type expression type functor expression combine argument result functor argument functor argument parenthesis general functor expression argument functional application justfofa functional application rfa expression type expression type expression type rule functional application sort logical cancellation analogous sort cancelling arithmetical multiplication single result end combination expression place anomalous expression ungrammatical arithmetical illustration simple multiplication result multiplication identical multiplier divisor unique uncancelled dividend result hand multiplier divisor cancel result equal dividend type expression rfa type argument identical first element type functor expression uncancelled output type functor category cancellation
86,"A typed logical language take place, because the argument type and the first element of the functor's type are not identical, then the result of the combination has no type in L ^ and so is not a well-formed expression in the language, e.g. (lO.b).
To see whether a combination of expressions is well-formed, the types of the functor and the argument need to be checked: if the input type of the functor can be cancelled with the type of the argument expression then the functor can be applied to the argument.
If not, then there is no well-formed expression in L ^ that combines just those two expressions.
(10) a.
b.
f
+
<e,t> x g
+
<t,t> x a = f(a).
e =t a *g(a).
e

As a more concrete example, consider how the three expressions ~, scream' and bertie* may be combined.
In (11 .a), the functor expression, scream' of type <e,t>, is applied to the argument, bertie\ of type e, to get an expression of type t (a formula).
The negation operator (type <t,t>) can now be applied to this expression to get the resulting formula in (ll.b).
No other combination of these expressions yields a well-formed expression of L ^ , as illustrated in (1 l.c) and (1 l.d).
(11) a.
b.
c.
d.
scream' + bertie' = scream'(bertie').
<e,t> x e = t
- + scream'(bertie' ) = -(scream'(bertie')).
<t,t> x t = t
~ + scream'.
<t,t> x <e,t>
~ + bertie'.
<t,t> + e

The formula in (ll.b) looks the same as an equivalent combination of these three expressions in LP.
However, this is only true of a very restricted number of formulae in Ltype.
As we will see in Section 4.2.2, formulae containing two-place predicates look rather different from their LP counterparts and contain in particular a subexpression that corresponds to a verb phrase in the syntax of the English sentence being translated.
It is to the matter of translating English into L ^ that we now turn.
Exercise 4.1:
Given the following abstract expressions with their types, state whether the complex expressions that follow are well-formed according to RFA.
If they are, what are the types of the resulting expressions?
f is an expression of type <e,t>.
a is an expression of type <e>.
h is an expression of type <t,t>.
j is an expression of type «e,t>,t>.
g is an expression of type « e , t > , < e , t » .
i.
iv.
f(a) h(f) ii. g(f) v. j(f) iii. g(a) vi.

87",105,87,4 Type Theory,No info,No info,typed logical language place argument type first element functor type identical result combination type expression language combination expression type functor argument input type functor type argument expression functor argument expression expression concrete expression scream bertie functor expression scream type applied argument type expression type formula negation operator type applied expression formula combination expression yield expression scream bertie bertie bertie bertie bertie formula equivalent combination expression true restricted number formula ltype formula predicate different counterpart contain particular subexpression verb phrase syntax english sentence matter translating english turn exercise abstract expression type state complex expression follow rfa type expression expression type expression type expression type expression type expression type iii
87,"4 Type theory
4.2.2

Translating verb phrases

To see how the language defined in Section 4.2.1 is able to represent the translations of verb phrases, consider how the sentence Ethel kicked the student might be translated into Ly^.
In a grammar of English descriptively more adequate than Gu there will be a rule that combines a transitive verb, e.g. kicked, with a noun phrase, e.g. the student, to give a verb phrase, kicked the student.
L ^ contains a parallel means of combining two-place predicates, like kick' with its arguments.
In Ltype a two-place predicate is analysed as having a type that requires an individual expression to yield an expression that needs an individual expression to make a formula, i.e.
<e,<e,t», as has already been seen above.
An expression of such a type, like kick\ will combine, according to the RFA, with an individual expression like the-studenf to give an expression of type <e,t>, i.e. kick1 (the-studenf).
The parallelism between the syntactic construction of a verb phrase in English and the combination of a two-place functor with an argument in L ^ is shown in (12).
(12.a) gives the English expressions that are combined according to the (backwards) phrase structure rule in
(12.b), while in (12.c), the L ^ counterparts are combined according to the RFA shown by the valid 'cancellation' in (12.d).
(12) a. kicked + the student = kicked the student.
b.
Vt NP <r- VR c. kick' + the-student' => kick'(the-student').
d. <e,<e,t» x e = <e,t>.
Similarly, the construction of the sentence Ethel kicked the student from the verb phrase in (12.a) and the noun phrase Ethel is paralleled by the functional application of the one-place predicate in (12.c) with an individual constant, ethel\ as shown in
(13).
(13) a.
b.
c.
d.

Ethel + kicked the student = Ethel kicked the student.
NP VP <- S.
ethel' + kick'(the-student') =» (kick'(the-studenf ))(ethel').
e x <e,t> = t.

Notice that the translation of the sentence into the formula in L ^ given in (13.c) is not equivalent to the translation of the same sentence into LP.
Translation into the latter would result in the expression kick'(ethel\the-studenf).
Here the translation of the syntactic subject appears as the first argument of the predicate and that of the
(direct) object as the second.
In the 1 ^ expression, on the other hand, this order is reversed.
The translation of the object is combined with the predicate before the subject and so appears to the left of the translation of the latter.
This better accords with traditional grammar and with traditional semantic notions of subject and predicate which both include the direct object as part of the predicate.
It is possible, following Dowty (1982), to identify the positions of the translations of noun phrases in a formula in Ltype that translates some English sentence with the grammatical functions those noun phrases perform in that sentence.
In general, the more oblique the grammatical function of the noun phrase the closer its translation appears to the translation of the verb.
Thus, the translation of an indirect object (if present) appears next to the predicate, being combined first.
The translation of the direct object comes
88",106,88,4 Type Theory,No info,No info,type theory verb phrase language able represent translation verb phrase sentence ethel student grammar english adequate rule transitive verb noun phrase student verb phrase student parallel predicate kick argument ltype type individual expression yield expression individual expression formula expression type combine rfa individual expression expression type parallelism syntactic construction verb phrase english combination functor argument english expression phrase structure rule counterpart rfa valid student student kick kick construction sentence ethel student verb phrase noun phrase ethel functional application individual constant ethel student ethel student ethel kick kick ethel notice translation sentence formula equivalent translation sentence translation latter expression kick translation syntactic subject first argument predicate direct object second expression hand order translation object predicate subject left translation latter better traditional traditional semantic notion subject predicate direct object part possible dowty position translation noun phrase formula ltype english sentence grammatical function noun phrase sentence general oblique grammatical function noun phrase closer translation translation verb translation indirect object present next predicate first translation direct object
88,"A typed logical language next, while the translations of syntactic subjects are always combined last of all.
(14) gives a schematic representation of the relative order of the translations of noun phrases performing the three functions within some sentence.
Obviously, if not all three functions are represented in a sentence, the relative ordering remains the same: the translation of the object always precedes that of the subject in the functor-argument structure of the predicate.
If this is borne in mind while translating sentences of English into Ltype, the trap of mimicking the order of arguments in L P translations can be avoided.
(14)

(((verb' (indirect-object* ))(object' ))(subject')).

Let us now put the procedure for translating from English into L ^ on a firmer footing by specifying the new grammar fragment and stating its translation rules.
As in the previous chapters, the new grammar, G2, is defined in terms of phrase structure rules with the translation rules operating in parallel to the syntactic ones, in accordance with the rule-to-rule hypothesis.
The grammar G2 has much the same coverage as G] of Chapters 2 and 3, but with a more adequate constituent analysis.
Discussion and specification of rules for accounting for passive, copular and co-ordination constructions will, however, be left until Chapter 5.
Since it is now possible to have verb phrase constituents, the basic finite sentence of English can be constructed by the familiar rule in (15.a), the first rule of the new grammar G2.
Verb phrase rules can also be stated in their more usual form and intransitive, transitive and ditransitive VPs are analysed by the rules in (15.b) to
(15.e).
The variable a in these rules ranges over the values + and - so that these rules generate finite ([+FIN]) and non-finite ([-FIN]) verb phrases.
The NP, PP and impersonal sentence rules are the same in G2 as in G, and are repeated in (16).
(15) a.
b.
c.
d.
e.

Rule 1G2: S ->NP VP[+FIN].
Rule 2G,: VP[ocFIN] -> VJocFIN].
Rule3G 2 : VP[aFIN] -> V t [aFIN] NP.
Rule 4G2: VP[aFIN] -> Vdt[aFIN] NP, NP2.
Rule 5G2: VP[aFIN] -> Vdt[aFIN] NP PPto.

(16) a.
b.
c.
g.

Rule6G 2 : NP->N p r .
Rule7G 2 : N P - K h e N .
Rule 8G2: PPto -» to NP.
Rule 9G2: S —> it V0[+FIN].

As mentioned above, conjunction rules will be omitted for the time being, but, at the cost of compositionality, we can continue to include one of the negation rules of Gi in G2 as (17.a).
The category Neg which is rewritten as it is not the case that, cf. (17.b), is treated as a single unanalysed constituent.
The other negation rules of Gi can be collapsed into the single rule in (17.c).
This introduces the negated auxiliary didn't followed by a non-finite VP.
Because the VP rules given above can be expanded as finite or non-finite, nothing else is required to generate negative sentences.
(17) a.
b.
c.

Rule 10G 2 :S-> Neg S.
Neg —> {it is not the case that}.
Rule 11G2: S -> NP didn't VP[-FIN].
89",107,89,4 Type Theory,No info,No info,typed logical language translation syntactic subject last schematic representation relative order translation noun phrase function sentence function sentence relative ordering translation object subject structure predicate mind translating sentence english ltype trap order argument translation verb object subject procedure translating english firmer footing new grammar fragment stating translation rule previous chapter new grammar term phrase structure rule translation rule parallel syntactic accordance hypothesis much coverage chapter adequate constituent analysis discussion specification rule accounting passive copular construction possible verb phrase constituent basic finite sentence english familiar rule new grammar verb phrase rule usual form intransitive transitive ditransitive vps rule variable rule range value rule generate finite verb phrase impersonal sentence rule rule rule ocfin afin afin rule vdt afin rule afin ppto rule ppto rule conjunction rule time cost compositionality negation rule category neg single unanalysed constituent negation rule single rule introduces auxiliary rule finite nothing generate negative sentence neg neg rule
89,"4 Type theory
In order to begin translating English expressions generated by G2 into L ^ , the syntactic categories of G2 must first be linked up with corresponding logical types.
This is done by a type assignment function (often also called a type mapping) that associates each syntactic category with a unique type.
The reason that each syntactic category must be assigned only a single type is to ensure that no ambiguity is present in the logical translation and that each syntactic rule is paired with a unique translation rule.
Although each syntactic category must be associated with a unique type, it is not the case that that type is necessarily unique to that category, as can be seen from (18), below.
The type assignment function is called TYPE; its domain is the set of syntactic categories and its range is the set of types.
(See Section 4.3 for a definition of these terms.)
The part of this function that assigns types to phrasal categories is given in (18).
Notice that although there are six categories they only map into four types, since both NP and PP,O translate into expressions with the type of an individual, i.e. e, as in d .
(18) a.
b.
c.
d.

TYPE(S)
TYPE(VP)
TYPE(NP)
TYPE(PPto)

=
=
=
= t.
<e,t>.
e.
e.

Types for lexical categories are slightly more interesting.
Vf has the same type as
VP, i.e. that of a one-place predicate, <e,t>.
The type for a proper name remains that of an individual constant and that for an impersonal verb is t, but the types of the other three categories, Neg, Vdt and Vt, are more complex.
Transitive verbs, as we have seen, translate into expressions with a type whose argument type is an individual constant and whose resultant type is that of a one-place predicate (19.b).
Ditransitive verbs have a type that takes an individual constant to yield something of the type of a transitive verb (19.c).
The negation operator, ~, has the type <t,t> because it combines with a formula to give another formula.
These lexical types are summarised in (19).
(The type of a common noun, N, will be ignored until Chapter 6.)
(19) a.
b.
c.
d.
e.
f.

TYPE(Vi)
TYPE(Vt)
TYPE(Vdt)
TYPE(Vo)
TYPE(Npr)
TYPE(Neg)

= <e,t>.
=
=
= t.
= e.
= <t,t>.

The translation rules for G2 are of two sorts.
In the first place, there are rules where there is only a single category (as in Rules 2G2 and 6G2) or where there is a meaningless element plus one other category (as with the preposition to in Rule 8G2 and dummy it in rule 9G2) on the righthand side of the rule.
In all of these cases, the translation of the phrase is identical to that of the meaningful category, cf. (2O.a),
(2O.b) and (2O.c).
The rule introducing definite NPs, 7G2, is given the non-compositional translation in (2O.d) which is identical to its counterpart in G,.
This is for expedience only and will be rectified in Chapter 6 when we look in more detail at the semantics of noun phrases.

90",108,90,4 Type Theory,No info,No info,type theory order english expression syntactic category logical type type assignment function type mapping associate syntactic category unique type reason syntactic category single type ambiguity present logical translation syntactic rule unique translation rule syntactic category unique type type unique category type assignment function type domain set syntactic category range type term part function type phrasal category notice category map type translate expression type individual type type type type ppto type lexical category interesting type predicate type proper name individual constant impersonal verb type category neg vdt complex transitive verb translate expression type argument type individual constant resultant type predicate ditransitive verb type individual constant yield type transitive verb negation operator type combine formula formula lexical type type common noun type type type vdt type type npr type neg translation rule first place rule single category meaningless element category preposition rule dummy rule righthand side rule case translation phrase identical meaningful category rule definite np translation identical counterpart expedience rectified look detail semantics noun phrase
90,"A typed logical language
(20) a.
b.
c.
d.

T2G2:
T6G2:
T9G2:
T7G2:

W.
Npr\
Vo\ the-N'.

In the other cases, the translation is given by the functional application of the translation of a category with a functor type over the translation of one (or more) expressions of the argument types.
Thus, the translation of the transitive VP rule in (15.c) is provided by applying the translation of the verb, of type < e , < e , t » to that of the NP of type e, to give an expression of the correct type for a VP, i.e. <e,t>.
One thing that becomes apparent with the translation of the ditransitive VP rules is that Ltype, instead of being too flat like LP, appears, from a syntactic point of view, to be too structured.
This is because the logical language constructs complex expressions only through binary combination while VPs, in the analysis of English at any rate, are usually given a flatter structure.
This is not, however, a major problem and too much structure is preferable to too little (provided that it is the correct structure, of course).
For our own purposes, it is a simple matter to state for both of the ditransitive VPs the order of combination of the objects.
This, of course, follows the pattern set out in (14) above, but in the double object construction in (21.c) the
NP immediately following the verb is interpreted as its indirect object.
This allows the paraphrase relationship between sentences like Bertie gave Fiona the book and Bertie gave the book to Fiona to be captured directly within the translation rules.
The lexicon of d may be carried over to G2 and lexical items are translated in the same way as outlined in Chapter 2.
(21) a.
b.
c.
d.
e.
f.

TIG,: VP'(NP').
T3G2: V.'(NP').
T4G2: V dt '(NP,')(NP 2 f ).
T5G2: V dt '(PP to ')(NP').
T10G2: NEG'(S').
T11G 2 :~(VP'(NP')).

As before, the translation of a sentence proceeds via a syntactic derivation using the rule-to-rule translation algorithm of Chapter 2.
Thus, every time a syntactic rule is applied expanding a syntactic category, the parallel translation rule also applies to give the corresponding translation.
An example derivation of the sentence Fiona didn 'tgive Chester the cake appears in (22) where the numbers on the righthand side of the derivation indicate the syntactic and translation rule used in each step.
The derivation in (22) has a corresponding phrase structure analysis which appears in
(23).
In this analysis tree, each node is labelled with a syntactic category, its type and a translation constructed from the translations of the nodes it dominates.

91",109,91,4 Type Theory,No info,No info,typed logical language case translation functional application translation category functor type translation expression argument type translation transitive rule translation verb type type expression correct type one apparent translation ditransitive rule ltype flat syntactic point view logical language complex expression binary combination vps analysis english rate flatter structure major problem much structure preferable little correct structure course purpose simple matter state ditransitive vps order combination object course pattern double object construction verb indirect object paraphrase relationship sentence bertie fiona book bertie book fiona translation rule lexicon lexical item way tig neg translation sentence syntactic derivation translation algorithm time syntactic rule syntactic category parallel translation rule translation derivation sentence fiona chester cake number righthand side derivation syntactic translation rule step derivation corresponding phrase structure analysis analysis tree syntactic category type translation translation node
91,"4 Type theory
(22) a.

S b.

NP, didn't VP[-FIN]

11G2 c.

Npr didn't VP[-FIN]

6G2

' d.
e.
f.
g.

/

4G2

Npr didn't Vdt[-FIN] NP 2 NP 3
=> ~((V dt '(NP 2 ')(NP 3 '))(N pr ')).
Npr didn't Vdt[-FIN] Npr NP3
=> ~((V dt '(N pr ')(NP 3 '))(N pr ')).
Npr didn't Vdt[-FIN] Npr the N
=> ~((V dt '(N pr ')(the-N'))(N pr ')).
Fiona didn't give Chester the cake
=> ~((give(chester')(the-cake'))(fiona')).

6G2
7G2
Lex

(23)

S t
-((give' (Chester' )(the-cake' ))(fiona'))

VP
<e,t>
(give' (Chester' )(the-cake'))

Fiona didn't give

Chester the cake

Exercise 4.2:
Draw analysis trees, i.e. phrase structures trees annotated with the translations and types of each node as illustrated in (23), for the following sentences: i.
It is not the case that Chester liked Jo.
ii.
The cat ate the cake.
in.
Ethel didn't scream.
92",110,92,4 Type Theory,No info,No info,type theory npr npr vdt npr vdt npr npr vdt npr fiona chester cake chester fiona lex chester fiona chester fiona chester cake exercise analysis tree phrase structure tree translation type node sentence chester cat cake ethel scream
92,"More set theory
More set theory
As (23) shows, the adoption of L^. as the translation language allows us to provide a much better syntactic analysis of (a subset of) English sentences.
In particular, of course, our syntax now contains a verb phrase constituent that has a well-formed translation, one that is of the same type as an intransitive verb, i.e. <e,t>.
As these are desirable properties according to the discussion in Section 4.1, it seems that our original problem is solved, since we now have a means of representing VPs in the translation language.
This is not sufficient, however, as we still need to provide an interpretation of these constituents that conforms to our intuitions about the meaning of the sentences in which they appear.
Before this can be done, however, we need to take another look at sets and relations and to discuss further the notion of function introduced in Chapter 3.
4.3

4.3.1

Relations and functions

As we saw in Chapter 2, sets consist of collections of elements called its members which may be single items (entities), ordered n-tuples or even sets themselves.
Sets that contain ordered pairs of elements are said to specify relations which have so far been represented by sets of ordered pairs consisting of <(extension of) subject,(ex tension of) object>.
Thus, the relation denoted by loathe' in the model
Mi is represented by the set in (24).
(24)

{<MANbDOG>, <WOMAN!,DOG>, <WOMAN2,DOG>,
<WOMAN2,MANi>, <CAT,DOG>}.

This relation could, however, also be represented diagrammatically by drawing arrows between individual elements showing that the first element bears a particular relation
(e.g. of loathing) to the second.
This is shown in the diagram in (25) where X represents the set of loathers and Y the set of the loathed.
The arrows show who loathed whom.
(25)

X

Y

MANj.
MAN2 ^ v .

^rMAN1
^ ^ ^
MAN 2

WOMANX>^^><^

WOM AN2

CAT

DOG
BOOK
CAKE

WOMANX

WOMAN2
< C ^ \N .
:
_ 2 l ^ ^ £ ^ ^ CAT
BOOK
CAKE

93",111,93,4 Type Theory,No info,No info,set theory set theory show adoption translation language syntactic analysis subset english sentence particular course syntax verb phrase constituent translation type intransitive verb desirable property discussion original problem vps translation language sufficient interpretation constituent intuition meaning sentence look relation discus notion function relation function consist collection element member single item entity set pair element relation set pair extension subject tension object relation loathe model manbdog woman dog dog mani cat dog relation arrow individual element first element bear particular relation second diagram loather set arrow show manj man womanx wom cat dog book cake womanx cat book cake
93,"4 Type theory
In (25), both thefirstand second elements of the relation are taken from the same set, i.e. the set, A, of entities in the model, M b but this is, of course, not necessary.
A relation can be stated between the elements of any two sets, even sets that have complex members like ordered n-tuples or other sets.
For example, we could represent the relation being loathed by in Mj as a relation between entities and the sets of entities that loathe them, as in (26).
In talking about relations, we refer to the set of first elements of the ordered pairs in the relation (X in (25) and (26)) as the domain of the relation and the set of the second elements (Y in (25) and (26)) as its range.
In
(25), the set A forms both the domain and the range while in (26) it forms the domain only and the range is a set of subsets of A.
(26)
X (domain)

Y (range)

{CAT^OMAN! ,MAN1,MAN2}

{WOMAN2}

Certain relations have a special property: they assign every element in the domain to a single element in the range.
Relations of this sort are called functions and are very important in logic and mathematics.
Their importance has to do with the fact that they are complete (every element in the domain is assigned some value by the relation) and unambiguous (each element in the domain is assigned one and only one element in the range).
Thus, functions, unlike relations in general, admit of no gaps in the domain and provide one and only one value for each such element.
In (27), four relations between two sets are represented.
The domain contains four letters of the alphabet and the range contains the first five positive whole numbers.
Of these relations, those in (27.a) and (27.b) both represent functions, but those in (27.c) and
(27.d) do not.
(27.c) does not assign a value in the range to every element in the domain, while (27.d) assigns some members of the domain two values in the range.
< 27 >

94 a.
b.",112,94,4 Type Theory,No info,No info,type theory second element relation set entity model course necessary relation element complex member set relation relation entity entity loathe relation refer first element pair relation domain relation second element range form domain range form domain range subset domain range certain relation special property assign element domain single element range relation function important logic mathematics importance fact complete element domain value relation unambiguous element domain element range function relation general admit gap domain value element relation set domain letter alphabet range first positive whole number relation represent function assign value range element domain assigns member domain value range
94,"More set theory d.
c.

There is some terminology that is associated with mathematical functions that should be learnt at this point.
In the first place, assuming that F is a function with domain D and range R, F is said to map D to R Secondly, if a is an element in the domain D, then F applied to a is written as F(a) and read as *F of a1, a is then said to be the argument of F. Thirdly, if a is an element in the domain D and b is an element in the range R, and F assigns b to a then b is called the value of F applied to a
(written F(a) = b).
Fourthly, if a is an element in the domain D and b is an element in the range R, and F assigns b to a then we say that F maps a onto b.
Finally, if the domain and range are the same, i.e. D, then F is said to be an operation on D.
The two characteristic properties of functions, that of providing a value for every element in the domain and ensuring that that value is unique, make them very useful in linguistics, and especially in semantics.
We have already come across things that can be modelled by a function.
For example, in the truth-conditional semantics we have been developing, every formula is either true or false and cannot be both.
Hence, we could represent our model theory as a function from formulae (the domain) to truth values (the range) with respect to some model.
A very small part of this function is given in (28) for the formulae that translate sentences in G, with respect to Mi.
(28) laugh'(ethel') run'(the-dog') scream'(Chester')
~(eat' (the-dog' ,the-cake poison'(jo',the-cat')

Another example of a function that has already been introduced is the denotation assignment function, F, used in the specification of models.
As we have seen, this is a function from basic expressions to some element or set of n-tuples of elements in A, the set of entities in the model.
As discussed in Chapter 3, F assigns every constant in the object language a unique denotation in the model, since otherwise sentences containing words whose translations have no denotation would be meaningless.
Furthermore, F is required not to assign more than one denotation to some lexeme, as this would make the translation language semantically ambiguous.
Since both of these properties are properties of functions, denotation assignment is best treated as a
95",113,95,4 Type Theory,No info,No info,set theory terminology mathematical function first place function domain range map element domain written read argument element domain element range assigns value domain element range assigns map domain range operation characteristic property function value element domain value unique useful linguistics semantics thing function semantics formula true false model theory function formula domain truth value range respect model small part function formula translate sentence respect laugh ethel run scream chester poison function denotation assignment function specification model function basic expression element set element entity model assigns constant object language unique denotation model sentence word translation denotation assign denotation lexeme translation language ambiguous property property function denotation assignment
95,"4 Type theory function of the appropriate sort.
In fact, most aspects of the interpretation procedure of Chapter 3 can be reformulated in terms of functions over some appropriate domain and from now on functions start to play an increasingly important part in the theory.
In particular, the interpretation of L ^ is defined in terms of functions and it is to a discussion of the model theory required to interpret this language that we now turn.
4.3.2

Sets again

The last piece of groundwork that needs to be done before we can re-examine the model theory involves a re-characterisation of sets.
Until now we have been describing sets by listing their members.
It is possible, however, to describe them using a function that picks out just those entities that are members of the set and rejects anything else.
In other words, given each element of some domain, a function that defines a set gives yes or no as a value according to whether the element is in the set or not.
As an example, consider the set assigned as the extension of the expression run' in M,, i.e. {DOG,CAT}.
This can be represented as the function given in (29), which maps DOG and CAT onto yes and everything else in the domain (i.e. A {DOG,CAT})onto/io.
(29)

[run']*1 no

Functions that map all the elements in a domain onto one of two values, e.g. yes and no, are called characteristic functions of sets of elements of the domain, because they characterise the sets they are associated with.
Formally, the characteristic function of a set, Z, can be defined as a function from a domain, A, into the set {0,1}
(the truth values) so that every element in Z is mapped onto 1 (i.e. yes) and everything else is mapped onto 0 (i.e. no).
Thus, every subset, Z, of a set of individuals, A, can be associated with a characteristic function, fi, which has the following formal definition:
(30)

Characteristic function of a set: For all a e A, fz(a) = 1, if a e Z , andfi(a) = 0, i f a g Z .

The characteristic function, fi, of a set, therefore, divides the domain A into two subsets of A: the set Z and every element that is in A but not in Z_.
The latter set is called the complement of Z relative to A. This is often written as Zand is equivalent to A - Z , as shown in the diagram in (31).
96",114,96,4 Type Theory,No info,No info,type theory function appropriate sort fact aspect interpretation procedure term function appropriate domain function important part theory particular interpretation term function discussion model theory interpret language turn last piece groundwork model theory member possible function entity member set reject word element domain function defines value element set assigned extension expression run dog cat function map dog cat everything domain dog cat function map element domain value characteristic function element domain characterise set characteristic function function domain truth value element everything subset individual characteristic function formal characteristic function andfi characteristic function divide domain subset set element latter set complement relative zand equivalent diagram
96,"More set theory
A set and its complement

(31)

The diagram in (29) above represents the characteristic function of the set
{DOG,CAT} with respect to M, and (32) provides two more illustrations of the concept.
(32.a) represents the characteristic function, fN, of the set N, where N is the set of even numbers with respect to the set consisting of the first nine positive whole numbers, i.e. N = {2,4,6,8}.
(32.b) represents the characteristic function of the set, B, of bilabial consonants in the set {b, d, g, t, k, p, v, (3, 0 }.
(32) a.
fN b. fiB

97",115,97,4 Type Theory,No info,No info,set theory complement diagram characteristic function dog cat respect illustration concept characteristic function number respect first positive whole number characteristic function bilabial consonant fib
97,"4 Type theory

Exercise 4.3:
Draw diagrams representing the characteristic functions of the following sets in the manner of (30) and (32) above: i. the set of all square numbers in the positive integers between 1 and 20.
ii. the set {a,e,i,o,u} with respect to the Roman alphabet.
iii. the extension of happy' and scream' in the model Mj with respect to A.

Instead of talking about a single function with a particular domain and range, we often need to refer to all the functions that have the same domain and the same range.
For example, it is often necessary to refer to all possible subsets of the set of entities,
A, in some model, but we do not want to have to laboriously write out all the actual subsets of A, (e.g. in M,, 0 , {DOG}, {CAT,DOG}, {DOGJVIAN!}, etc.), or to draw diagrams representing all the characteristic functions of these sets.
There is a way of referring to a set of functions which all have the same domain and range: the name of the set defining the domain is written as a righthand superscript to that of the set defining the range.
Hence, the set of all functions with domain A and range B is written as B A .
For example, the characteristic functions of all subsets of A have A as their domain and {0,1} as their range and so we can refer to all such functions as
{0,1}*.
This is an important piece of notation that will be used to a considerable extent in the following chapters, so it is necessary to learn its significance.
(33)

RANGE°°MAIN =def the set of all functions from DOMAIN to RANGE.

4.4

Interpreting LtyPe

We are now in a position to provide an interpretation for L ^ and begin by looking at the sorts of denotations that expressions of particular types have in a model.
The model theory of Chapter 3 will then be revised to take the revisions in denotation and the syntax of expressions into account.
4.4.1

Denotation

As discussed in Chapter 2, the extension of an expression is the entity, property or relation that the expression is associated with in some model.
Although it is not useful to specify the actual denotation of some expression in every possible model, it is useful to define the sort of denotation it should have in any possible model.
The specification of the sorts of denotations associated with expressions of different types was done in Lp by directly assigning possible denotations to the types.
For example, one-place predicates were defined as denoting subsets of A, two-place predicates as denoting sets of ordered pairs of A, and so on.
Because L ^ contains an infinite number of different types, however, we cannot list the types and the sorts of denotation expressions of that type should have in some model, but must provide a recursive definition of such denotations.
To refer to the set of possible denotations that expressions of some type, T , can have, we use the symbol Dv which is defined in a
98",116,98,4 Type Theory,No info,No info,type theory exercise draw diagram characteristic function manner square number positive integer set respect roman alphabet iii extension happy scream model respect single function particular domain range refer function domain range necessary refer possible entity model actual subset dog cat dog dogjvian diagram characteristic function way function domain range name domain righthand superscript set range set function domain range characteristic function domain range refer function important piece notation considerable extent chapter necessary significance set function domain range ltype position interpretation sort denotation expression particular type model model theory revision denotation syntax expression account denotation extension expression entity property relation expression model useful specify actual denotation expression possible model useful define sort denotation possible model specification sort denotation expression different type possible denotation type predicate subset predicate denoting set pair infinite number different type list type sort denotation expression type model recursive denotation refer possible denotation expression type use symbol
98,"Interpreting L,ype way that is parallel to the definitions given to the types themselves.
Firstly, the sort of denotations assigned to expressions of the primitive types, e and t, is given and then a general rule is specified for determining the sorts of denotations expressions of complex types have.
The basis for the interpretation of Ltype is the same as for the LP: i.e. a set A of entities given by a model and the set of truth values, {0,1}- As before, individual constants, i.e. expressions of type e, denote members of A and formulae, i.e.
expressions of type t, denote truth values.
In other words, the set of possible denotations for expressions of type e, De, is the set A and the set of possible denotations for expressions of type t, D t , is {0,1}.
This provides the base of the recursive definition of D ^ , the sets of possible denotations of expressions in LryPe.
The denotations of expressions of complex types are defined in terms of the possible denotations of their input types and those of their output types.
Because L ^ is an unambiguous language, the denotation of an expression must be properly and uniquely determined within a model.
Furthermore, the Principle of Compositionality requires the denotation of a composite expression to be determined by the denotations of its parts.
Hence, because L ^ allows only binary combination of expressions, consisting of a functor and a single argument, the functor must denote a function that when applied to its argument yields a unique value, the denotation of the complex expression.
Since functors must, by definition, combine with an expression of a particular type to yield an expression of another type, they must denote functions from the denotations of the type of their arguments to denotations of the types of expression that result after combination.
For example, one-place predicates in L ^ have the type
<e,t>, as we have already seen.
Thus, they combine with expressions of type e to yield expressions of type t.
Hence, by the above reasoning, expressions of type <e,t> must denote functions from domain De to range Dt.
As we saw at the end of Section 4.3, the set of all functions from a domain A to a range B is written B A , so that we can define
D<et> as DtDe, the set of all functions from De to Dt, as shown schematically in (34).
(34)

D<et>

The set of possible denotations of expressions of type e, De, is the set A and the set of possible denotations of expressions of type t, D,, is the set of truth values, {0,1}.
Hence, D<e.t> is the set of all functions from the set of entities A to the set of truth values {0,1}, i.e. { 0 , l } \ As we saw in Section 4.3.2, functions from A to {0,1} are characteristic functions of subsets of A and so we maintain the intuitively appealing idea from L P that one-place predicates denote such sets, although they are now being defined in terms of functions.
Generalising this approach, we may interpret the denotations of expressions with a complex type, <a,b>, as functions from the set of possible denotations of the input
(first) type, a, to the set of possible denotations of the output (second) type, b.
In other words, D^fe is the set of all functions from Da to Db, written DaDb and shown
99",117,99,4 Type Theory,No info,No info,ype way parallel definition type denotation expression primitive type general rule sort denotation expression complex type basis interpretation ltype entity model truth value individual constant expression type denote member formula expression type denote truth value word possible denotation expression type set possible denotation expression type base recursive possible denotation expression lrype denotation expression complex type term possible denotation input type output type unambiguous language denotation expression model principle compositionality denotation composite expression denotation part binary combination expression functor single argument functor function argument unique value denotation complex expression functors expression particular type yield expression type function denotation type argument denotation type expression result combination predicate type expression type yield expression type reasoning expression type function domain range end function domain range define dtde function possible denotation expression type set possible denotation expression type truth value function entity truth value function characteristic function subset appealing idea predicate denote term function approach denotation expression complex type function possible denotation input first type possible denotation output second type word set function dadb
99,"4 Type theory schematically in (35).
The full recursive definition of the possible denotations of expressions of some type is given in (36) which directly parallels the recursive definition of types given in (6), above.
(35)

D ^

(36) a.
b.
c.

The denotations of types:
De is A.
D t is{0,l}.
If a and b are types then D<ab> is DbDa.

This definition thus provides a transparent relationship between the types of L ^ and the sort of denotations they are associated with in the model.
However complicated the type is, the sort of denotation it can have can be worked out by checking the possible denotations of its argument and result types.
For example, the denotation of an expression of type «e,t>,t> is a function from D<et> to D t , i.e. DtD<et>.
But D<et> is also a function, from De to D, so D«et>,t> is {0,1 J ^ w , the set of all functions from functions from entities to truth values to truth values.
This is shown more perspicuously by the schematic diagram in (37).
(37)

D<<et>t>

D t

Exercise 4.4:
Given the definition in (37), what are the sets of possible denotations associated with the following types?
iii.
ii.
iv.
Let us now take a more concrete example and look at the sort of denotation that is assigned to a two-place predicate, i.e. an expression of type <e,<e,t».
According to (37), an expression of type < e , < e , t » denotes a function from domain, D e , of entities to a range, D<e.,>, itself a set of functions from De to D,.
Thus, D<e,<e,,» is worked out according to the steps in (38), with (38.e) giving the set of possible denotations of

100",118,100,4 Type Theory,No info,No info,type theory full recursive possible denotation expression type parallel recursive type denotation type type dbda transparent relationship type sort denotation model complicated type sort denotation possible denotation argument result type denotation expression type function dtd set function function entity truth value truth value schematic diagram exercise possible denotation type iii concrete denotation predicate expression type expression type domain entity range function step possible denotation
100,"Interpreting L^ expressions of this type as functions from entities to functions from entities to truth values.
The reference on each line is to the line of the recursive definition in (37) that provides the justification for each step.
(38) a.
b.
c.
d.
e.

D<e,<e,t» = D ^ .
D < e ^=D t D e .
Dt={0,l}.
De=A.
D <e<et>> =({0,l} A ) A .

(37.c)
(37.c)
(37.b)
(37.a)

A two-place predicate therefore denotes a function that, when applied to an entity, yields a function that picks out the set of entities that bear a particular relation to the first.
As an example, consider a simple situation where Jo and Ethel (from M J are both kicking the dog, Chester, and the dog is kicking Jo.
No-one else in A (of Mi) is doing any kicking at all.
This relation, which provides the extension of the two-place predicate kick' with respect to a model (let us call it M2), can be represented by a function that associates each element in A with the set of elements in A that kick it.
Thus, assuming the association of entities and names of Mi, DOG is associated with the set {MAN^WOMAN!}, MANi is associated with the set {DOG} and all the other entities in A are associated with the empty set 0 , as shown in (39).
(39)

{DOG}
MAN 2
WOMAN X
WOMAN 2
CAT
DOG
CAKE
BOOK

{MAN^WOMANj}

As we have seen, sets of entities in A can be defined as characteristic functions, functions from A to {0,1}- Hence, the extension of kick* with respect to M2 should more properly be represented as a function from elements in A to the characteristic functions that pick out the sets of entities that kick them.
This is shown in (40), where f, represents the characteristic function of the set {DOG}, f2 represents that of 0 and f3 that of {MAN t , WOMAN,}.
The complex function in (40) defines a relation between entities in the set A, something that can also be represented as a set of ordered pairs, as we have seen.
To recover this set, each entity in the characteristic functions, fh f2 and f3, in (40) is made the first element of an ordered pair if it is mapped onto 1.
The second element of each pair is provided by the entity that is associated with the relevant characteristic function.
Thus, in f, DOG is mapped onto 1 and so forms the first element of an
101",119,101,4 Type Theory,No info,No info,expression type function entity function entity truth value reference line line recursive justification step predicate entity yield function entity bear particular relation simple situation ethel dog chester dog relation extension predicate kick respect model call function associate element set element kick association entity name dog associated mani associated set dog entity empty set dog man woman woman cat dog cake book entity characteristic function function extension kick respect function element characteristic function entity kick characteristic function dog man woman complex function relation entity pair recover entity characteristic function first element pair second element pair entity relevant characteristic function dog form first element
101,"4 Type theory
(40)

[kick'] M2

MAN
WOMANX
WOMAN 2
CAT
DOG
CAKE
BOOK

MAN X
MAN 2

MAN 2
WOMAN X

WOMAN 2

CAT
DOG
CAKE
BOOK

WOMAN 2

CAT
DOG
CAKE
BOOK

MAN 2
WOMAN X
WOMAN 2

CAT
DOG
CAKE
BOOK ordered pair with MAN1? the entity mapped onto f,, to give the pair <DOGJMANi>.
Nothing in f2 is mapped onto 1 and so we turn straight to f3 where both MANi and
WOMANi are mapped onto 1.
These thus form the first elements of two ordered pairs whose second element is DOG, since (40) maps the latter onto f3.
This yields the set

102",120,102,4 Type Theory,No info,No info,type theory kick man womanx woman cat dog cake book man man man woman woman cat dog cake book woman cat dog cake book man woman woman cat dog cake book pair entity pair dogjmani nothing mani womani form first element pair second element dog map latter yield
102,"Interpreting L^
{<MAN1,DOG>,<WOMAN!J)OG>,<DOG,MAN1>} which is the extension assigned to kick' in M, by the denotation assignment function of Chapter 3.
In other words, functions from entities to characteristic functions are semantically equivalent to sets of ordered pairs.
Hence, the sort of denotation assigned to two-place predicates has not been significantly changed but just reformulated to allow for the interpretation of VPs.
The extensions of three-place predicates have the same pattern as the extensions of two-place ones, except that they are functions from entities to functions from entities to characteristic functions.
In other words, they denote functions from entities to the sorts of thing denoted by two-place predicates.
To illustrate, let's take a quite complex example using the ditransitive verb, gave, that translates into an expression in Ltype of type <e,<e,<e,t>».
In Mi, Fiona gave the cake to Bertie who gave it to the dog.
Jo also gave the book to Bertie who gave it to Fiona who was also given the cat by Jo.
This situation can be represented by the function in (41) which looks somewhat complicated but it just defines in terms of functions the set of ordered
<MAN2,CAKE,DOG>, triples, { < W O M A N 2 , C A K E , M A N 2 > ,
<MAN1,BOOK,MAN2>, <MAN2JBOOK,WOMAN, >, <MAN1,CAT,WOMAN2>}, the extension assigned to give' in Mj.
This can be checked by taking those entities that are mapped onto 1 by the characteristic functions, f4 to f7 and letting them form the first elements of ordered triples.
The second elements are provided by the entities mapped onto these functions and the third elements are given by the leftmost entities that are mapped onto the latter.
The order of the mapping from entities to functions in these diagrammatic representations of functions follows the order of the arguments in Ltype expressions containing the appropriate functors.
In other words, in (41) the leftmost entities are those denoted by the indirect object, the second set of entities gives those denoted by the direct object and the third set those denoted by the subject.
Such diagrams thus go from most oblique object on the left to least oblique on the right.
4.4.2

Revising the theory

It is not difficult to redefine the model structure so that it can be used to interpret expressions in the language, L ^ .
First of all, the denotations in a model of all predicates must be redefined as functions of some sort rather than as sets.
For expressions of types e (e.g. etheV) and t (e.g. rain'), there is no change from previous models.
These are assigned entities and truth values, respectively, as before.
The denotation assignment function, F, however, assigns appropriate functions to all expressions with complex types, instead of sets of n-tuples of entities.
Thus, one-place predicates, of type <e,t>, are assigned characteristic functions over A (as in (43), below); two-place predicates, of type <e,<e,t», are assigned functions from entities to characteristic functions (as in (40)) and three-place predicates, of type
<e,<e,<e,t>», are assigned functions from entities to functions from entities to characteristic functions (as in (41)).
As we have seen, this is equivalent to assigning sets of entities, sets of ordered pairs and sets of ordered triples, respectively, but allows the interpretation of expressions other than basic expressions and formulae, as we will see directly.
103",121,103,4 Type Theory,No info,No info,dog woman dog extension kick denotation assignment function word function entity characteristic function equivalent ordered pair sort denotation predicate interpretation vps extension predicate pattern extension function entity function entity characteristic function word denote function entity predicate illustrate complex ditransitive verb translates expression ltype type fiona cake bertie dog book bertie fiona cat situation function complicated defines term function cake dog triple book woman cat extension entity characteristic function first element triple second element entity function third element leftmost entity latter order entity function diagrammatic representation function order argument ltype expression appropriate functors word leftmost entity indirect object second entity direct object third set subject diagram oblique object least oblique right revising theory difficult redefine model structure interpret expression language first denotation model predicate function expression type ethev rain change previous model entity truth value denotation assignment function appropriate function expression complex type entity predicate type characteristic function predicate type function entity characteristic function predicate type function entity function entity characteristic function equivalent assigning entity set pair set interpretation expression basic expression formula
103,"4 Type theory
(41)

[give']M2 u
MANj - ^ ^

MANi

MAN2 — - ^
^
WOMAN! v \

MAN 2 \^\
WOMANjT\

\

^*l WOMAN2 \ Y\
CAT <s.
\
DOG ^
^
CAKE — — -W
BOOK - ^ ^ ^

WOMAN2\\\ \ f CAT >.
/

DOG

\\\\^^ /
\N^\v\ /

///1 ,

Yi

MAN2

•—-~--AlIII^X^__

WOMAN!

TJ^5§^^

W O M A N

2

^ ^ ^ ^ ^ ^

CAT

MAN! '

MAN2

A

1

WOMAN! » \ \
WOMAN2 s V\ \

MAN2 ^
/
WOMANj /
/
WOMAN2 \

/

/

/

CAT — ~ y

CAKE
BOOK

\ f \
W N

DOG y/f/Iki
I //I niln

M A N // l/ y

\/ /

-> Y /

\

MAN2

A / nM

/I/

///Ink

0 k,
MAN! ^ — - ^

MAN2

I\

\ ZZl^///// \ r

^ 1

WOMANj V

\

DOG

\

/ ///HI

CAKE

//HI

BOOK v

\

//HI

\

MANX

^rll// TrU
II

\

MAN2

//1

\

\ l\

CAT v ^ ^ >
DOG - ^ \
CAKE — —
BOOK ^^^ f

MANi ^

MAN2

^

A .• * •

1

^ ^ WOMAN! \
\ WOMAN2
' / / / ^
^ WOMAN2 v \
CAT v
\
CAT — Z ^ ^ ^ \ ^
WOMAN! — / / / / /

DOG-^^^^^^/
CAKE - ^ ^ ^
/
BOOK

104

0
%

CAT - ^ ^ \
^f
^ ^ ^ / A >^^
- C ^ ^
// DOG—~//' \\^vi DOG
CAKE — —^
I/7J1 4 BOOK
/ I CAKE 'y'
^ ^ ^ yy/\//
1 i 1 BOOK^

MANj ^Jj

1

DOG C ^ v .

CAKE - _ ^
BOOK ^^~

0 °

7",122,104,4 Type Theory,No info,No info,type theory manj mani woman man cat dog cake book cat dog woman cat man woman womanj cat cake book dog niln man womanj dog cake book manx tru cat dog cake book mani woman cat cat woman cake book cat dog cake book cake manj dog cake book
104,"Interpreting L^
Given a model containing a set of entities A, as before, and a denotation assignment function, F, revised to assign functions rather than sets, the interpretation of all expressions in Ltype (excluding formulae containing the connectives) can be specified by two clauses.
The first clause equates the interpretation of any basic expression with the denotation assigned to it in the model (i.e. by F).
This gives the basis of the interpretation which is built on by the recursive application of the second clause which provides the means of interpreting all complex expressions formed from these.
This clause derives the denotation of a well-formed expression in L ^ consisting of a functor expression,/, and an argument expression, a, from the application of the denotation of/ in some model to that of a in the same model.
In other words, the
(41)
[give']M2 denotation in a model of an expression/fa) is as the value of a function denoted b y / applied to the denotation of an argument a.
The two clauses of the model theory needed to interpret L ^ are formally specified in (42).
(42)
1.
2.

Given a model, M = «A,F», then
For any constant a, [a]M = F(a).
If/is of type <a,b> and the type of a is a, then \f(a)]M = [/]M(MM).

The simplicity of the model theory results directly from the adoption of mathematical functions as the denotations of complex types.
If the output type of the functor (the second member of the ordered pair of types defining the complex type) is basic then the value obtained when the function is applied to some argument is either a truth value or an entity (usually the former).
If, on the other hand, it is a complex type, then the denotation resulting from the application of the function to some argument is itself a function.
To make this more concrete, let us take over the extension of the predicate laugh * in the model, Mi, into M2 (assuming that M2 has the same ontology, i.e. A, and the same assignment of entities to individual constants as MO.
The situation modelled is thus one where only Bertie and Fiona are laughing, which is represented by the characteristic function in (43).
(43)

[laugh']

MAN 2
WOMANX
WOMAN2
CAT
DOG
CAKE
BOOK

105",123,105,4 Type Theory,No info,No info,model entity denotation assignment function assign function interpretation expression ltype formula connective clause first clause interpretation basic expression denotation model basis interpretation recursive application second clause mean complex expression clause denotation expression functor expression argument expression application denotation model model word denotation model value function applied denotation argument clause model theory interpret model constant type type simplicity model theory mathematical function denotation complex type output type functor second member pair type complex type basic value function argument truth value entity former hand complex type denotation application function argument function concrete extension predicate laugh model ontology assignment entity individual constant situation bertie fiona laughing characteristic function laugh man womanx cat dog cake book
105,"4 Type theory
Given this function, it is simple to work out the extension (i.e. truth value) of a formula containing laugh'.
Once the extension of the subject expression has been ascertained, the function is applied to it and the automatic result is a truth value, the value of the function denoted by the predicate applied to the argument.
So, for example, to find out the truth value of a formula laugh'(jo') (translating the sentence Jo laughed) we go through the steps in (45), where the number on the righthand side refers to the clause in the model theory or the representation of the extension that justifies the step taken.
We see from the last line that the formula is true in Mi, since the function denoted by laugh' in M2 returns the value 1 when applied to MANi which is the extension of jo' in the same model.
(44) a.
b.
c.
d.
e.

[laugh'Oo')] M2 is[laugh'] M2 ([jo'] M2 )[laugh']M2 is F2(laugh') is the function in (43) (call it f43).
[jo']M2 is F,(jo') = MANi.
f43(MAN0 is 1.
Hence, [laugh'(jo')]M2 is 1.

(42.2)
(42.1)
(42.1)
(43)

More complex formulae are interpreted in the same way, except that more applications of the rule in (42.2) are involved.
The interpretation of a formula containing a two-place predicate like kick' or a three-place predicate like give' proceeds by reducing the complexity of the function until a truth value is arrived at.
In the former case, the function denoted by the predicate is applied to the entity denoted by the direct object, the first argument combined with the predicate, to give a characteristic function.
Applying this function to the entity denoted by the subject yields a truth value, the truth value of the whole formula.
With the translations of ditransitive verbs, the function denoted by the predicate is first applied to the extension of the indirect object and then to that of the direct object to get the characteristic function that yields the truth value of the formula when applied to the extension of the subject.
As an example, consider the interpretation of the formula,
(kick'(the-dog '))(the-singer') translating the sentence The singer kicked the dog.
First of all, the rule in (42.2) is applied to the formula to unpack the function/argument structure, starting with the rightmost argument and working inwards until the constant expressions are reached, as shown in (45).
(45) a.
b.
c.

[(kick'(the-dog'))(the-singer')] M2 .
[kick'(the-dog')]M2([the-singer']M2).
([kick>]M2([the-dog']M2))([the-singer']M2).

(42.2)
(42.2)

The constants in (45.c) can then be then 'cashed out1 in terms of their extensions in the model M2 as specified by F. The value of each function is computed at every step, starting from the functor and working outwards.
Thus, we first retrieve the extension of kick' in M2, i.e. the function in (40) (which we may call f40, for convenience).
Then, this is applied to the extension of the-dog\ i.e. DOG, to get the extension of the expression kick'(the-dog') which is the characteristic function f3 in (40).
Applying the latter to the extension of the-singer\ i.e. WOMAN 2 , gives a truth value, in this case
0.
Hence, the formula (kick '(the-dog'))(the-singer') is false with respect to M2.
These automatic steps are spelled out in (46) which should be compared to the function denoted by kick' given in (40) to see how the final result is obtained.
106",124,106,4 Type Theory,No info,No info,type theory function simple work extension truth value formula laugh extension subject expression function automatic result truth value value function predicate applied argument truth value formula laugh sentence step number righthand side clause model theory representation extension justifies last line formula true function laugh return value mani extension model laugh laugh laugh function mani laugh complex formula way application rule interpretation formula predicate kick predicate proceeds complexity function truth value former function predicate applied entity direct object first argument predicate characteristic function function entity subject yield truth value truth value whole formula translation ditransitive verb function predicate applied extension indirect object direct object characteristic function truth value formula applied extension subject interpretation formula kick translating sentence singer dog first rule formula unpack structure rightmost argument constant expression kick kick kick constant term extension model value function step functor working outwards extension kick function convenience extension dog extension expression kick characteristic function latter extension woman truth value formula false respect automatic step function kick final result
106,"Adverbs
(46) a.
b.
c.
d.
e.

[kick'] M2 = F2(kick') = f40.
[the-dog']M2 = F2(the-dog') = DOG.
[kick']M2([the-dog']M2) = ^ 0 (DOG) = f3.
[the-singer']M2 = F2(the-singer') = WOMAN 2 .
([kick']M2([the-dog']M2))([the-singer']M2) = f3(WOMAN2) = 0.

We have now properly solved the problem posed in Section 4.1: how to incorporate verb phrases into the grammar.
In our example sentence, the VP, kicked the dog, has the translation kick'(the-dog') whose extension is given in (46.c) as f3 in
(41).
This results from the application of the function denoted by the two-place predicate to the extension of the direct object.
Since this is a characteristic function over A, and such characteristic functions define sets of entities, we have neatly captured the intuition that verb phrases should pick out sets, the sets of entities that bear the appropriate relation to their subjects.
Indeed, the adoption of Lvpe gives us a powerful logical language into which to translate natural language sentences, one that can reflect the syntactic structure of the object language.
By taking the denotations of L ^ expressions to be either truth values, entities or more or less complex functions based on these two sets, we can ensure that the syntactic structure of an expression is maintained in the interpretation, as shown in the earlier examples.
Thus, in addition to having a Ltype representation, a VP also has a model-theoretic interpretation, i.e. as some function from entities to truth values.
Hence, each independently meaningful expression generated by the grammar is associated with an extensional meaning and so compositionality is maintained.
Exercise 4.5:
1.
Assuming that the negation operator, ~, is of type <t,t> what is the actual function that it denotes?
2.

4.5

Using the step-by-step interpretation method outlined above, work out the truth value of the translation of the sentence The student didn 'tgive the book to Ethel with respect to M2 (i.e. using the function drawn in (41)), assuming the interpretation of negation given in Chapter 3.

Adverbs

The grammar fragment G2 as yet covers only the same ground as the earlier G!
(although without the recursion allowed by conjunction) but our new theory of translation and interpretation allows us to extend the grammar in a number of new and interesting directions.
In particular, we are now in a position to tackle certain sorts of adverbial modification, including simple English adverbs of manner like slowly, happily, pathetically, etc. Such adverbs modify verbs, or more correctly, verb phrases and so may be syntactically analysed as combining with a VP to give another VP, as in the rule in (47).

107",125,107,4 Type Theory,No info,No info,adverb kick kick dog kick dog woman kick problem incorporate verb phrase grammar sentence dog translation kick extension result application function predicate extension direct object characteristic function characteristic function define entity intuition verb phrase pick set entity bear appropriate relation subject adoption lvpe powerful logical language translate natural language sentence syntactic structure object language denotation expression truth value entity le complex function syntactic structure expression interpretation earlier example addition ltype representation interpretation function entity truth value meaningful expression grammar associated extensional meaning compositionality exercise negation operator type actual function interpretation method work truth value translation sentence student book ethel respect function interpretation negation adverb grammar fragment ground recursion conjunction new theory translation interpretation allows grammar number new interesting direction particular position certain sort adverbial modification simple english adverb manner adverb modify verb verb phrase rule
107,"4 Type theory
(47) a.
b.

Rule 12G2: VP[aFIN] -> VP[aFIN] Adv.
Adv -> {slowly, happily, stupidly, crazily}.

Since VPs have the type of one-place predicates, i.e. <e,t>, adverbs introduced by this rule must be associated with Ltype expressions that combine with one-place predicates as arguments to yield one-place predicates.
In other words, the type of an adverb is «e,t>,<e,t».
This type assignment entails that the translation rule associated with
Rule 12G2 is given by the functional application of the translation of the adverb to that of the VP, as in (48).
A verb phrase like walked slowly is thus translated into L,ype as slowly'(walk*).
(48)

TRule 12G2: Adv'(VP').

The question that must be asked whenever we augment the grammar with a new category and an associated type is Does the type assignment make sense semantically?.
In the case of manner adverbs, the suggestion made above does accord with intuition.
VPs with simple -ly adverbials in English pick out a subset of the set of entities denoted by the VP without the adverbial.
So, for example, the set of things that walk slowly in any situation is a subset of the set of things that walk in that situation.
The semantic effect of slowly can thus be analysed as a function that maps a set, the extension of the translation of a VP, onto a subset of that set.
This parallels the semantic relation between adjectives like slow or happy to their common nouns in phrases like a happy student.
Such adjectives pick out a subset of the set of entities denoted by the common nouns, so that, for example, the phrase happy student denotes a subset of the set of all students, i.e. the happy ones.
The relation between such adjectives and common nouns will be discussed in Chapter 6, but the functions that are denoted by both manner adverbials and their adjectives have characteristic functions as both their domain and range.
In other words, such expressions have denotations in D^,^0^^ which is the set of denotations associated with the type
«e,t>,<e,t», as shown in (49).
(49)

D«e,t>,<e,t»

D

D.<e,t>

<e,t>

{1,0}

A

{1,0}

According to the model theory for interpreting expressions in L ^ , the interpretation of an expression like slowly'(walk') is given by applying the function denoted by slowly' to that denoted by walk\ i.e. [s low ly'(walk f)]M is
[slowly'^[walk']1*) or more generally as in (50).
(50)
[Adv'(VP')]M = [Adv']M([VP']M).

108",126,108,4 Type Theory,No info,No info,type theory rule afin afin adv adv vps type predicate adverb rule ltype expression combine predicate argument yield predicate word type adverb type assignment entail translation rule functional application translation adverb verb phrase ype trule adv question augment new category type type assignment sense manner adverb suggestion accord intuition vps simple adverbial english pick subset entity adverbial set thing situation subset thing walk situation semantic effect function map set extension translation subset parallel semantic relation adjective slow happy common noun phrase happy student adjective pick subset entity common noun phrase happy student denotes subset set student happy relation adjective common noun function manner adverbial adjective characteristic function domain range word expression denotation denotation type model theory expression interpretation expression function low walk walk adv adv
108,"Adverbs
As an example, let us assume that in M2 Bertie, Ethel and the cat are the only entities that are walking, a situation that can be represented as the function in (51), supplying the extension of walk' in M2.
The things that are slowly walking in M2 are
Bertie and the cat, giving us the extension of slowly '(walk') in (52).
The effect of applying [slowly *]M2 to [walk']M\ then, is to pick but a subset of the set of things that walk, i.e. the set of things that walk slowly.
This means that part of the function denoted by slowly' is that given in (53).
Note that this is only a part because the function applies to other characteristic functions of sets (i.e. VP extensions) to yield other results.
(51)

[walk']M2
MANj
MAN2
WOMAN!
WOMAN2
CAT
DOG
CAKE
BOOK

(52)

[slowly'(walk')] M2

109",127,109,4 Type Theory,No info,No info,adverb assume bertie ethel cat entity situation function extension walk thing bertie cat extension effect pick subset thing walk thing part function part function characteristic function extension yield result walk manj woman cat dog cake book
109,"4 Type theory
(53)

[slowly '] M 2

MAN 2

MAN 2

WOMANX

WOMANX

WOMAN 2

WOMAN 2

CAT
DOG
CAKE
BOOK

CAT
DOG
BOOK

Exercise 4.6:
Assume that in M2, the man, Ethel, the cat, the dog and the bike are all moving, and that the man, the cat and the bike are all moving slowly.
i.
Draw the characteristic function denoted by [move '] M2 .
ii.
Draw the characteristic function denoted by [slowly'(move')]M2.
iii.
Draw the function now associated with slowly' in M 2 , assuming that nothing else is happening slowly and representing all characteristic functions apart from those associated with move' and walk' as <|).

There is much more that could be said about the extensions of adverbs.
In particular, we need to constrain the functions denoted by adverbs like slowly so that they do pick out subsets of the sets denoted by their associated VPs in every model
(cf. subsequent chapters, particularly Chapter 7, for details of how to do this).
Furthermore, in a more extensive fragment, we would need to provide the means for interpreting other VP modifiers like prepositional phrases, other classes of adverbials and sentential modifiers (like necessarily, unfortunately, etc.).
Such constructions present their own problems in semantics (which may or may not necessitate the extension or revision of certain aspects of the theory presented so far), but the introduction of a typed logical language and its transparent relation to possible denotations at least allows for the expressions to be representable in the logical translation language.
Hence, for the rest of this book, L ^ will form the basis for all revisions to the translation language required by the development of the grammar fragment and the basis of the model theory will remain the binary application of functions to their arguments in the way that we have seen.

110",128,110,4 Type Theory,No info,No info,type theory man man womanx womanx woman woman cat dog cake book cat dog book exercise assume man ethel cat dog bike man cat bike characteristic function move draw characteristic function iii draw function nothing characteristic function associated move walk extension adverb particular constrain function adverb subset set associated vps model subsequent chapter extensive fragment mean modifier prepositional phrase class adverbial sentential modifier present problem semantics extension revision certain aspect theory logical language transparent relation possible denotation least expression representable logical translation language rest book form basis revision translation language development grammar fragment basis model theory binary application function argument way
110,"Further reading
4.6

Further reading

The idea that the combinatory properties of expressions can be encoded directly in their categorial definition is central to categorial grammar which evolved out of the work of certain logicians, most particularly Ajdukiewicz (1937) and Bar-Hillel (1953).
A simple introduction can be found in Allwood, Andersen and Dahl (1977: 132-135) and more detailed discussions can be found in the articles in Oehrle, Bach and
Wheeler (1988).
Montague himself used categorial grammar for his syntactic analysis in Montague (1973) which is therefore also used in Dowty, Wall and Peters (1981).
The definition of logical types can be found in Dowty, Wall and Peters (1981: 83-97) and Partee, ter Meulen and Wall (1990: 338-341).
Discussions of type theory, translation and the syntax of natural languages can be found in Dowty (1982) and
Gazdar, Klein, Pullum and Sag (1985: ch.
9).
The notion of a function is introduced in Partee, ter Meulen and Wall (1990: 30-33), Allwood, Andersen and Dahl (1977:
9-13) and Chierchia and McConnell-Ginet (1990: 438-440).
An early discussion of the semantic representation of adverbs can be found in Thomason and Stalnaker
(1973).
Cresswell (1985a) contains a collection of papers on adverbial and prepositional phrases, primarily with respect to temporal and spatial modification; and see also Parsons (1980).
The discussion in the latter two references is somewhat technical and uses concepts that have not yet been presented or discussed in the present work and readers are advised to consult this book only after they have tackled subsequent chapters (particularly Chapters 8 and 9).
The application of type theory to natural languages is discussed in Parsons (1979).
There is a current debate about whether higher order types are necessary for the analysis of the semantics of natural languages.
Representative articles on this subject are Thomason (1989), Turner
(1989), and Chierchia and Turner (1989), but these are very technical and should not be tackled until the reader has read most of this book.

Ill",129,111,4 Type Theory,No info,No info,idea combinatory property expression categorial central categorial grammar certain logician simple allwood andersen dahl detailed discussion article bach wheeler montague categorial grammar syntactic analysis montague dowty wall peter logical type dowty wall peter partee ter meulen wall discussion type theory translation syntax natural language dowty gazdar klein pullum notion function partee ter meulen wall allwood andersen dahl chierchia early discussion semantic representation adverb thomason stalnaker cresswell collection paper adverbial prepositional phrase temporal spatial modification parson discussion latter reference technical us concept present work reader consult book subsequent chapter application type theory natural language parson current debate higher order type necessary analysis semantics natural language representative article subject thomason turner chierchia turner technical tackled reader book
111,"The Lambda Operator

5.1

The passive

In discussing the translation from English into L ^ in Chapter 4, rules for generating and interpreting simple passives were omitted.
Although it is possible to define the extension of a passive verb phrase like kicked by Jo as the characteristic function of the set of things that Jo kicks, it is not possible with the apparatus we currently have to link this function directly with the extension of the active verb kick, kicks, kicked.
The appropriate relationship between the two voices is that, in the relation denoted by the passive, the entity denoted by the object of the preposition by corresponds to the entity denoted by the subject of the active and the entity denoted by the passive subject corresponds to that denoted by the object in the active.
This correspondence was handled in Chapter 2 directly in the translation for the passive rule by switching around the individual constants translating the two noun phrases in the passive rule to yield an identical translation to that of the active.
So, for example, Jo kicked Chester and Chester was kicked by Jo are both translated into Lp as kick'fjo',Chester').
Unfortunately, this simple expedient is no longer open to us because of the existence in G2 of a verb phrase constituent.
This prevents subject and complement NPs from being ordered with respect to each other in a translation rule because they are no longer introduced by the same syntactic rule.
To see the problem that passives pose, together with other constructions that involve a change in grammatical functions, let us devise an extension of G2 that not only generates passive sentences but also ensures that active and passive pairs of sentences are semantic paraphrases.
The appropriate syntactic rules to generate passives are easy to define and appear in (1).
In accordance with the general policy of this book, no attempt is made to draw out the syntactic regularities shown by different constructions.
The rules in (1) clearly lose the obvious syntactic relations with their active counterparts and this problem may be resolved in a number of ways according to the system of syntax with which the theory of semantics is associated.
Readers who are familiar with one of the many other systems of generative grammar currently used by linguists are invited to adapt the following grammar and its interpretation to suit the requirements of the theory they know.
The important thing from the point of view of the semantics, however, is that, no matter what the appropriate syntactic relationship between active and passive happens to be and however it is formalised, active and passive pairs are truth-conditionally synonymous and this, at least, must be shown by an adequate semantic theory.
(1) a.
b.
c.
d.
e.
f.
g.
112

13G2:VP->wasVP[PAS].
14G2: VP[PAS] -> Vt[PAS] PPby.
15G2: VP[PAS] -> Vdt[PAS] PPto PPby.
16G2: VP[PAS] -> Vdt[PAS] NP PPby.
17G 2 :PP by -»byNP.
VJPAS] = {kicked, loathed, poisoned, read, eaten, liked}.
Vdt[PAS] = {given}.",130,112,5 The Lambda Operator,No info,No info,lambda operator passive translation english rule simple passive possible define extension passive verb phrase characteristic function thing kick possible apparatus function active verb kick kick appropriate relationship voice relation passive entity object preposition entity subject active entity passive subject corresponds object active correspondence translation passive rule individual constant noun phrase passive rule identical translation active chester chester chester simple expedient open existence verb phrase constituent prevents subject complement np respect translation rule syntactic rule problem passive construction change grammatical function extension passive sentence active passive pair sentence semantic paraphrase appropriate syntactic rule generate passive easy define accordance general policy book attempt syntactic regularity different construction rule obvious syntactic relation active counterpart problem number way system syntax theory semantics reader familiar many system generative grammar linguist adapt grammar interpretation suit requirement theory important point view semantics appropriate syntactic relationship active passive active passive pair synonymous least adequate semantic theory wasvp pa pa pa ppby pa vdt pa ppto ppby pa vdt pa ppby bynp vjpas read vdt pa
112,"The passive
For ease of exposition, it is assumed that the prepositions in passive by phrases function simply as syntactic case markers, like indirect objects marked by the preposition to, and the syntactic problems posed by this assumption will be ignored.
The syntactic category, PPby, thus has the same type and translation as the noun phrase it contains.
Given this, it is possible to assign to the translations of passive verbs the same type as that assigned to their active counterparts, as shown in (2).
These give rise to the set of translation rules in (3) for the syntactic rules in (1).
(2) a.
TYPE(VJTAS]) = <e,<e,t».
b.
TYPE(Vdt[PAS]) = <e,<e,<e,t>».

(= TYPE(Vt))
(= TYPE(Vdt))

(3) a.
T13G2: VP[PAS]\ b.
T14G2: Vt[PAS]'(PPby').
c.
T15G2: Vdt[PAS]'(PPto')(PPby').
d.
T16G2: Vdt[PAS]'(NP')(PPb/).
e.
T17G2:NP\
The question that must now be addressed is: how to translate/interpret passive verbs to ensure that the rules in (3) yield the appropriate truth-conditions?
If we stick to the rules for translating lexical items that we have been using until now, we should translate passive verbs exactly like their active counterparts, because translation is based on the lexeme underlying the word form.
Given the usual assumption that passive morphology in English is inflectional, the lexeme associated with the formkicked, passive and active past tense, is KICK, so both ought to translate as kick' (as in Chapter 2).
However, if we do this we will end up with the incorrect interpretations for passive sentences: they will come out with different truthconditions from the corresponding active sentences.
To see why this is so, consider the diagram in (4) which represents part of the extension for kick' in the model, M2.
The translation of a sentence like Ethel kicked the dog comes out as true here with the translation of the VP, kick'(the-dog'), having the extension shown by the function f3 which picks out the set of entities kicking the dog, i.e. {MAN!,
WOMANi}.
If the passive participle is translated by the expression kick', however, the translation of the corresponding passive The dog was kicked by Ethel comes out as false, because the VP translation, by T17G2, is kick'(ethel') which denotes the function represented by f2, i.e. the characteristic function of the null set.
This, of course, picks out the set of things that kick Ethel, not that kick the dog, but, intuitively, the phrase be kicked by Ethel does not denote this set but the set of things that Ethel kicked.
There is unfortunately no way of representing this set in L ^ directly without assigning an extension to the passive participle kicked that is unconnected with that of the active verb kicked.
The required function is that shown in (5).
Although the two diagrams in (4) and (5) represent different functions, there is an obvious relation between them.
The function in (5) switches around the entities denoted by the first and second arguments of the function in (4).
Unfortunately, this generalisation is not actually expressed in the grammar.
If we give kick' and kicked' separate extensions as specified by the denotation assignment function, F, we lose the semantic generalisation about the passive-active relation and cannot guarantee that the extensions of passive participles do not depart radically from the extensions of their active counterparts.
This would mean that the grammar was descriptively
113",131,113,5 The Lambda Operator,No info,No info,passive ease exposition preposition passive phrase function syntactic marker indirect object preposition syntactic problem assumption syntactic category ppby type translation noun phrase possible assign translation passive verb type active counterpart rise translation rule syntactic rule type vjtas type vdt pa type type vdt pa pa ppby vdt pa ppto ppby vdt pa question passive verb rule appropriate stick rule lexical item translate passive verb active counterpart translation lexeme underlying word form usual assumption passive morphology english inflectional lexeme associated passive active tense kick translate kick incorrect interpretation passive sentence different truthconditions active sentence diagram part extension kick model translation sentence ethel dog true translation kick extension function entity dog man womani passive participle expression kick translation passive dog ethel false translation kick ethel function characteristic function null course pick thing kick ethel kick dog phrase ethel denote set thing ethel way assigning extension passive participle unconnected active verb required function diagram different function obvious relation function entity first second argument function generalisation grammar kick separate extension denotation assignment function semantic generalisation relation guarantee extension passive participle active counterpart grammar
113,"5 The lambda operator inadequate, because it failed to capture an intuition about the relation between active and passive.
To maintain the adequacy of our theory, therefore, some way must be found of relating the extensions of active and passive verbs.
(4)

MAN
JL

WOMANj
DOG

MAN X

DOG

WOMAN!
DOG

MANt
WOMANt
DOG""

(5)

MAN
WOMANj
DOG
WOMAN 2
DOG
WOMANX
DOG

114",132,114,5 The Lambda Operator,No info,No info,lambda operator inadequate capture intuition relation active passive maintain adequacy theory way extension active passive verb man womanj dog man dog woman dog mant womant dog man womanj dog woman dog womanx dog
114,"Introducing the lambda operator
5.2

Introducing the lambda operator

To solve this problem, we need to take another look at sets.
As we have seen, a set can be specified by listing of all its members or by defining a characteristic function for that set.
These two methods of defining a set are easy to do if the set being defined is finite, but if the set is not finite but infinite a simple listing is not sufficient because, by definition, the list or the function will never be complete.
It is possible, however, to define infinite sets by describing in general terms the property that picks out all the members of the set.
Thus, instead of giving the definition of a set by listing its members, we can give a definition that describes the general property that determines which entities are members of that set.
For example, the set of all natural numbers is an infinite set for which we can give a partial listing, e.g.
{1,2,3,4,5,6,7,8,9,10,...} (the three dots before the right hand curly bracket conventionally indicates that the set is open and not fully listed), but we could also describe this set as the set consisting of all the natural numbers.
Slightly more formally, we can define it as the set of all things that are natural numbers, or more formally still, as the set of all x such thatx is a natural number.
This latter definition selects a variable and specifies a property that any entity substituting for the variable must have in order to be a member of the set in question.
Traditionally, individual variables (i.e. variables ranging over individual entities) are written as lower case members of the end of the alphabet, i.e. x, y, z, which sometimes appear with subscripts, e.g. x b y243, z15, etc., if a large number of such variables are required.
The intensional description of a set may be symbolised by writing some individual variable before a vertical stroke, I, which both precede a quasi-English expression where the variable takes the place of some noun phrase in the expression, e.g. x is a natural number.
The resulting expression is enclosed in curly brackets, {•} to indicate that what is being defined is a set.
So, the set of natural numbers may be defined as fx I x is a natural number}.
Although this is the most convenient way of specifying an infinite set, we can, of course, use it to specify a finite one.
For example, we might specify the sets in (6), which are all presumably finite, and which could be used to describe the extensions of the English phrases kicked Chester, was kicked by Jo and was a drunken lecturer, respectively.
(6) a.
b.
c.

{x I x kicked Chester}.
{y I Jo kicked y}.
{z I z was drunk and z was a lecturer}.

The semi-English set descriptions in (6) may easily be translated into formulae in
Ltype, but with the formulae containing a variable in place of one of the argument individuals.
Hence, x kicked Chester can be represented in
L ^ as
(kick'(chester'))(x), (6.b) can be represented as (kick'(y)Xjo') and (6.c) as drunk'(z)
& lecturer'(z).
Formulae containing variables are semantically incomplete, since variables do not have a fixed interpretation like constants but take their meaning from being associated with specific entities in specific situations, rather like pronouns in natural languages.
Thus, a formula like (kick'(chester'))(x) does not denote a truth value until the variable, x, is associated with some entity in the model.
Thus, to interpret such a formula, some entity, say MAN2, must be assigned to the variable x and the formula
115",133,115,5 The Lambda Operator,No info,No info,lambda operator lambda operator problem look specified member characteristic function method finite set finite infinite simple sufficient list function possible define infinite set general term property pick member set member general property entity member natural number infinite partial dot right hand bracket open natural number thing natural number thatx natural number latter selects variable property entity variable member question individual variable variable individual entity lower member end alphabet subscript large number variable intensional description set individual variable vertical stroke expression variable place noun phrase expression natural number expression bracket set natural number natural number convenient way infinite set course use specify finite finite extension english phrase chester drunken lecturer chester drunk lecturer set description formula ltype formula variable place argument individual chester kick chester kick xjo drunk lecturer formula variable incomplete variable interpretation constant take meaning specific entity specific situation pronoun natural language formula kick chester denote truth value variable entity model interpret formula entity variable formula
115,"5 The lambda operator
(kick'(chester'))(x) thus gets assigned the same truth value in the model as
(kick'(Chesterf))(bertie')y since bertie' denotes MAN2.
Interpreting formulae containing variables of this sort is thus like trying to ascertain the meaning of a sentence containing a pronoun, like Chester was kicked by him.
The pronoun must be associated with a referent through the context before interpretation can proceed.
Formulae in L ^ (and other logical languages) which contain a free variable, i.e. a variable not associated with some operator (see below), are referred to as propositional functions or open formulae.
5.2.1

Extending L^

Each of the descriptions in (6) provides the intensional property that determines the membership of some set of entities.
The semantic theory developed so far has little to say about intensional things such as properties, but we may instead interpret them extensionally as equivalent to the sets they pick out.
In other words, we may equate the set descriptions in (6) with one-place predicates in L ^ which denote characteristic functions of sets of entities, as we saw in Chapter 4.
Thus, given any entity, a, in some domain, if a substitutes for the variable in a set description to give a true statement, then a is in the set denoted by that description.
If the resulting statement is false, however, then a is not in the set.
The propositional functions used at the end of the last section to translate the descriptions in (6) do not, however, denote sets.
They are expressions of type t and not of type <e,t>.
Such expressions can be turned into one-place predicates by the use of a special logical symbol, written X (lambda), called the lambda operator.
This operator picks up, or, more technically, abstracts on, a variable contained in a propositional function and turns the expression into something that denotes a characteristic function.
The lambda operator is paired with the variable it abstracts upon which it is said to bind.
For example, Xx abstracts on the x variable and binds all instances of x in some propositional function while Xy abstracts on and binds the y variable, and so on.
The operator together with the variable it selects is written to the left of a propositional function which is itself enclosed in square brackets.
For example, given the propositional function (kick'(Chester'))(x) we can form the lambda expression Xx [(kick'(chester'))(x)] which is a well-formed L ^ expression of type <e,t>.
The fact that all instances of the variable abstracted upon by the lambda operator which are contained in the propositional function are bound by the operator is an important point that will be returned to below.
Generally, given
| , containing an instance of the variable x, of type e, a propositional function <>
Xx [<))] is a well-formed expression of type <e,t>.
This requires the addition to the syntax of L ^ of the rule in (7) which allows expressions like those in (8), but not those in (9):
(7)

116

If $ is an expression of type t containing an unbound instance of a variable x of type e, then Xx[((>] is a well-formed expression of type",134,116,5 The Lambda Operator,No info,No info,lambda operator kick chester truth value model kick chesterf bertie bertie formula variable sort ascertain meaning sentence pronoun chester pronoun referent context interpretation formula logical language free variable operator propositional function open formula description intensional property membership entity semantic theory little intensional thing property equivalent pick word set description predicate denote characteristic function entity entity domain substitute variable description true statement denoted description statement false propositional function end last translate description denote expression type type expression predicate use special logical symbol lambda lambda operator operator pick abstract variable propositional function expression characteristic function lambda operator variable abstract abstract variable bind instance propositional abstract bind variable operator variable selects propositional function square bracket propositional function kick chester form lambda expression kick chester expression type fact instance lambda operator propositional function operator important point instance variable type propositional function expression type addition syntax rule expression expression type unbound instance variable type expression type
116,"Introducing the lambda operator
(8) a.
b.
c.
d.
e.

Xy [(kick'(y))(jo')].
Xz [drunk'(z) & lecturer* (z)].
Xx [-(crazy'(x))].
Xx [(kick'(y))(x)].
Xz [(kick'(z))(z)].

(9) a.
b.
c.

Xx [(kick'(y))Go)].
Xy [(kick' (Chester' ))(jo)].
kk

In effect, the lambda operator turns a propositional function containing a free individual variable into a one-place predicate which denotes the characteristic function of the set of entities that satisfy the propositional function.
An entity is said to satisfy a propositional function, $, containing a variable, JC, if the association of x with that entity gives rise to a true formula.
A lambda expression A,x [(()] is thus interpreted as if it were a set-theoretic expression {x I <J>}, extensionally denoting the set of all x such that <|).
For example, the one-place predicate XK [(kick'(chester'))(x)] denotes the set of all x such that x kicked Chester, while the predicate Xy [(kick'(y))(jof)] is interpreted as the set of all y such that Jo kicked y and Xz [drunk (z) & lecturer (z)] denotes the set of all z such that z was drunk and z was a lecturer.
Indeed, because propositional functions are formulae with at least one free variable, ^-expressions can be set-denoting expressions of indefinitely complex internal structure.
An expression like Xx [(((loathe'(x))(jof) v (like(x))(joy)) & ((x = the-cakey) -> (eaty(x))(joy)))] is perfectly well-formed in Ltype and denotes the set of all x such that either Jo loathed x or he liked x and if x was the cake then Jo ate x.
Thus, ^-expressions provide a representation in LtyPe of the sorts of set descriptions introduced above.
Exercise 5.1:
Give an informal description of the sets denoted by the expressions: i.
Xy [(like'(y))(jo') & ~((like'(y))(ethel'))].
ii.
Xz [(give'(z)(the-cake'))(z)].
iii.
A,x[x=jo'].
iv.
Xz [student' (z) & (like' (jo' ))(z)].
following lambda

Because lambda expressions of the sort given above are of type <e,t>, they can combine with expressions of type e by the rule of functional application to yield an expression of type t.
Applying the predicate Xx [(kicky(chester'))(x)] to the individual constant 70' we get the expression Xx [(kick'(chester'))(x)](jo').
This formula, which may be read as Jo is an x such that x kicks Chester, has identical truth-conditions to the one obtained by replacing the bound variable x in the propositional function following the lambda operator by the argument expression, jo* and removing the lambda operator.
Thus, Xx [(kick'(chester'))(x)](jo') is equivalent to (kicky(chestery))(jo').
The process of replacing variables by constants and removing the lambda operator is known as lambda conversion because it converts a complex lambda expression into a simple one.
117",135,117,5 The Lambda Operator,No info,No info,lambda operator drunk lecturer crazy kick kick kick kick chester effect lambda operator propositional function free individual variable predicate characteristic function entity propositional function entity propositional function variable association entity true formula lambda expression expression predicate kick chester denotes chester predicate kick jof set drunk lecturer denotes drunk lecturer propositional function formula least free variable expression complex internal structure expression loathe jof joy eaty joy ltype denotes cake representation ltype description exercise informal description denoted expression ethel student lambda lambda expression sort type expression type rule functional application yield expression type predicate kicky chester individual constant expression kick chester formula kick chester identical variable propositional function lambda operator argument expression lambda operator kick chester equivalent kicky chestery process variable constant lambda operator lambda conversion convert complex lambda expression simple
117,"5 The lambda operator
(10)

Lambda Conversion: If Xx [0] is a lambda expression of type <e,t> and a is an expression of type e, then Xx [<|)](a) is an expression of type t and is truth-conditionally equivalent to the expression <|>* where <|>* is derived from 0 by replacing every occurrence of x in § bound by X by the expression a.

The rule for lambda conversion in (10) requires all instances of the variable bound by lambda to be replaced by an instance of the argument expression.
If this were not done, the expression after conversion would still contain a variable and so would not be a formula but a propositional function that does not directly denote a truth value.
The equivalence would, therefore, not hold.
For example,
Xz[drunk'(z) & lecturer'(z)J(ethel') is equivalent to drunk'(ether) & lecturer'(ethel'), but not to drunk'(ethel') & lecturer'(z) nor drunk'(z) & lecturer (etheV), which are both propositional functions and not full formulae.
A second very important point about the use of the lambda operator is that, in the definition of lambda abstraction given in (7) above, mention was made of the fact that the variable abstracted on by the lambda operator must itself not be bound, i.e.
not abstracted on by any other lambda operator.
As an illustration, consider the lambda expression Xx [(like'(x))(fwna')] where the x variable is bound by the lambda operator.
This can be applied to an individual constant to yield a formula, hc[(like'(x))(fiona')](ethel') which in turn could be coordinated with a propositional function like laugh(x) to give the expression Xx [(like'(x))(fiona')](ethel')
& laugh'(x).
The second instance of the variable x in this expression is not bound by the lambda operator, as can be seen from the application of lambda conversion to the expression.
The rule of lambda conversion in (10) allows the variable bound by X to be replaced by the argument expression of the X-expression to yield a truth-conditionally equivalent formula.
In the case of the expression
Xx[(like'(x))(fiona')](ethel')
& laugh'(x), ethel' is the argument of the functor
Xx[(likef(x))(fwna')] so that the result of lambda conversion is (like'(ethel'))(fiona')
6 laugh '(x), a propositional function.
Thus, if we now take the original expression before lambda conversion XJC [(like '(x))(fiona ')](ethel') & laugh '(x), we can abstract on the variable x again to get the one-place predicate XJC [XX [(like '(x))(fiona')](ethel')
& laugh'(x)].
The variable x in (like'(x))(fiona') in the latter expression is not bound by the outermost lambda operator, but only by the inner one.
This means that the extension of the expression Xx [Xx [(like'(x))(fwna')](ethel')
& laugh'(x)] is the set of all x such that Ethel is in the set of things such that Jo liked x and x laughed, but not the set of all x such that Jo liked x (who is Ethel) and x laughed.
If this expression is applied to an individual constant like jo' to yield
Xx[Xx[(like '(x))(fwna ')](ethel') & laugh '(x)](jo') and is then lambda converted, the resulting expression is [Xx [(like'(x))(fiona')](ethel')
& laugh'(jo')] and not
[Xx[(like '(jo '))(fwna ')](ethel') & laugh '(jo')].
The latter would have a very strange extension something like Ethel is an x such that Fiona liked Jo and Jo laughed, i.e.
no properties are predicated of Ethel at all.
It is necessary, therefore, to be careful when using variables.
Even if two variables look the same in an expression, they may not behave in the same way in the expression concerned, as they may be bound by different operators and so behave differently semantically.
For your own lambda expressions, try to differentiate variables as much as possible, writing the same
118",136,118,5 The Lambda Operator,No info,No info,lambda operator lambda conversion lambda expression type expression type expression type equivalent expression occurrence expression rule lambda conversion instance variable lambda instance argument expression expression conversion variable propositional function truth value equivalence drunk lecturer ethel equivalent drunk ether lecturer ethel drunk ethel lecturer drunk lecturer ethev propositional function full formula second important point use lambda operator lambda abstraction mention fact variable lambda operator lambda operator illustration lambda expression variable bound lambda operator individual constant yield formula fiona ethel turn propositional function laugh expression fiona ethel second instance variable expression lambda operator application lambda conversion expression rule lambda conversion variable bound argument expression yield equivalent formula expression fiona ethel laugh ethel argument functor likef lambda conversion ethel fiona laugh propositional function original expression lambda conversion xjc fiona ethel laugh abstract variable predicate xjc fiona ethel laugh variable fiona latter expression bound outermost lambda operator inner mean extension expression ethel laugh ethel set thing liked set ethel expression individual constant yield ethel laugh lambda expression fiona ethel laugh ethel laugh latter strange extension ethel fiona laughed property ethel necessary careful variable variable look expression way expression different operator behave expression differentiate variable possible writing
118,"Introducing the lambda operator symbol for different instances of variables only when they are bound by the same operator.
This helps in keeping track of what conversions to make and ensuring that constants are not accidentally put where they shouldn't go.
Using the symbol » to stand for X-converts into the statements in (11) are all true and valid instances of lambda conversion, according to (10), while those in (12) are not.
(11) a.
b.
c.

(12) a.
b.
c.
d.

Xy [(kick'(y))Go')](chester')
» (kick'(chester'))(jo').
Xx [(kick'(x))(x)](jo')
» (kick'(jo'))Go').
Xx [Xy [(kick'(y))(x)](jo')](bertie')
» Xy [(kick'(y))(bertie')]Go')
»(kick'(jo')Xbertie').
Xx [(kick'(x))(x)](jo')
( ( ) ) ( j )
Xx [Ax [howl'(x)](the-cat')](the-dog')
» Xx [howr(the-dog')](the-cat').
Xy [(like'(jo'))(x)](bertie')
» (like'(jo'))(bertie').
Xz [crazy'(z)](etheP) v drunk'(z)
» crazy'(ethel') v drunk'(ethel').

Exercise 5.2:
1.
Explain why are the A-conversions in (12) wrong.
2.
Convert the following lambda expressions plus arguments into their equivalent formulae: i.
Xy [(like'(y))Go') & ~((Uke'(y))(ethel'))](the-dog').
ii.
Xz [(give'(z)(the-cat'))(z)](bertie').
iii. ^x [~(x = jo')](bertie').
iv.
Xy [(like'(the-cat')Xy) v ~(like'(the-dog'))(y)](bertie').
v. Xx [Xy [crazy'(x) & (like'(x))(y)]Go') v -(crazy'(x))](bertie').

5.2.2

Interpreting lambda expressions

What lambda expressions denote has already been briefly discussed above.
Essentially the idea is that by abstracting on a variable using the lambda operator, an expression is formed that denotes a set, the set of things that have the property specified by the propositional function in the scope of the operator.
So, an expression like Xx [(Ukey(x))(etheV)] denotes the set of things that Ethel liked.
It is now time to put this on a more formal footing and specify precisely how the denotation of a lambda expression can be determined from the denotation of the propositional function it is made from.
Although the fundamental idea behind lambda abstraction is a simple one, i.e. that it is a set-forming operator, the formal definition is unfortunately quite complicated, but, as with all formal definitions given in this book, it does no more than restate explicitly the informal definition given earlier.
119",137,119,5 The Lambda Operator,No info,No info,lambda operator symbol different instance variable operator help track conversion constant symbol statement true valid instance lambda conversion kick chester kick chester kick kick kick bertie kick bertie kick xbertie kick howl bertie bertie crazy ethep drunk crazy ethel drunk ethel exercise wrong convert lambda expression argument equivalent formula uke ethel bertie iii bertie bertie crazy crazy bertie lambda expression lambda expression denote idea variable lambda operator expression denotes set thing property propositional function scope operator expression ukey ethev denotes set thing ethel time formal footing specify denotation lambda expression denotation propositional function fundamental idea lambda abstraction simple operator complicated formal definition book informal
119,"5 The lambda operator
To see how the formal semantics of lambda abstraction works, let us look at what happens in lambda conversion.
The equivalence between <|>* and Xx [ty ] in (10) provides the interpretation of the lambda expression when applied to an appropriate argument.
As we have seen, an expression like Xx[(kick'(x))(jo')](chester') is, by the rule of lambda conversion, equivalent to (kick'(Chester '))(jo')9 i.e. the formula that is obtained when (all occurrences of) the abstracted variable are replaced by the argument expression.
In yet other words, the truth-conditions of a lambda expression
Xx [<))] (where <>
| is a propositional function containing x) applied to an individual argument a are identical to those of the expression (()* derived by substituting a for all free occurrences of x in ty .
From the semantic point of view what this equivalence expresses is that the value of the function denoted by Xx[ty] applied to the denotation of a in a model is identical to that denoted by <|>* in the same model.
This can be more formally represented as (13), but at the moment we have no way of formally expressing what (|>* is, or, more exactly, what its semantics is.
To do this, the model theory needs to be extended to cope properly with the existence of variables in Ltype expressions.
(13)

[Xx [((>](a)]M if, and only if, [c|)*]M.

In a number of places in this book, it has been said that variables are like pronouns: if the referent of a pronoun is unknown, there is no way that an expression containing it can be interpreted (assigned a truth value).
For example, to know whether She didn 7 like him expresses a true proposition, one has to know who she and him refer to.
In a similar way, the truth value of a formula containing a variable cannot be ascertained until the variable is associated with some entity in the model.
In an expression Xx [(|>](a), the lambda operator binding a variable x gives the information that x is to be associated with the entity denoted by a, the argument that the lambda expression applies to.
For example, Xx [(kicky(x))(jo')](chesterf) is a formula that associates x in the model with [Chester']M2, i.e. DOG.
On the other hand, the equation of x with DOG is not appropriate for every occurrence of x in any formula, since variables are not uniquely associated with particular entities in any particular model.
The point of a variable is that it can be associated with different things in different circumstances, unlike constants, whose denotations are fixed by the denotation assignment function of a model.
The association of variables with entities in a model is something in addition to, and separate from, the model itself.
Because variables do not have a fixed denotation, they are associated with entities in a model not by the denotation assignment function F, but by a variable assignment function, usually represented by the symbol g.
This function assigns to each variable an entity in the model as its value.
It is usually assumed that the number of variables available is infinite, but of course we are only ever interested in a small number of variables and in particular only the ones appearing in the L^pe expressions we are interpreting.
Because of this, and because infinite functions pose no real problem in interpretation, we shall ignore all but a very few of the infinite number of variables mentioned in any variable assignment function.
Formally, then, g is an infinite function but in practice we will deal with only a very small part of it.
Because the number of variables is infinite, the number of variable assignment functions for any set of entities in a model is infinite and varies quite considerably.
For instance, there is a function that maps every variable onto only a single entity
120",138,120,5 The Lambda Operator,No info,No info,lambda operator formal semantics lambda abstraction work lambda conversion equivalence interpretation lambda expression appropriate argument expression kick chester rule lambda conversion equivalent kick chester formula occurrence variable argument expression word lambda expression propositional function individual argument identical expression free occurrence semantic point view equivalence express value function applied denotation model identical model moment way semantics model theory variable ltype expression number place book variable pronoun referent pronoun unknown way expression assigned truth value true proposition similar way truth value formula variable variable entity model expression lambda operator variable information entity argument lambda expression kicky chesterf formula associate model chester dog hand equation dog appropriate occurrence formula variable particular entity particular model point variable different thing different circumstance constant denotation denotation assignment function model association variable entity model addition separate model variable denotation entity model denotation assignment function variable assignment function symbol function variable entity model value number variable available infinite course interested small number variable particular expression infinite function real problem interpretation infinite number variable variable assignment function infinite function practice deal small part number variable infinite number variable assignment function entity model infinite instance function variable single entity
120,"Introducing the lambda operator in the model, one that maps every seventeenth variable onto the same entity or one that maps variables onto entities in strict rotation.
These are all perfectly valid functions but not really very useful for our purposes.
The sorts of function we will be dealing with are very restricted, and the only important thing to bear in mind is that because g is a function, every variable is assigned one and only one entity as its value.
From now on, therefore, expressions in L ^ are interpreted with respect not just to a model, M, but also to a variable assignment g.
Denotations of expressions are written between square brackets with the names of the model and the variable assignment function as superscripts outside the right bracket:
(14)

If a is an expression in L^,*, then [a]M» is its denotation with respect to a model, M, and a variable assignment g.

We need to look at the interpretations of expressions with respect to the same model, but different assignments of values to variables and, in particular, with respect to similar variable assignments.
For example, we might have a (partial) variable assignment like that in (15) and we could also have one that is almost identical except that x is assigned DOG as value as in (16)
(15) g
MANj
MAN2
\VOMANj y z x i z i

X

2

Z

2

X

3

WOMAN2
CAT
DOG
CAKE
BOOK

In the case of the variable assignments in (15) and (16), we say that g' is exactly like g except for the fact that x is assigned DOG as value.
The relation between g and g' can be symbolised as: g' = g000'*, where the notation a/x indicates that a is assigned as the value of x in the appropriate function.
Hence, g000^ is that function exactly like g but with the value DOG assigned to x, i.e. g\ This notation is useful in discussing the interpretations of expressions with respect to the same model but slightly different variable assignments; in particular, variable assignments that may differ only in the value of one variable.

121",139,121,5 The Lambda Operator,No info,No info,lambda operator model map seventeenth variable entity map variable entity strict rotation valid function useful purpose sort function important bear mind function variable entity value expression respect model variable assignment denotation expression square bracket name model variable assignment function superscript right bracket expression denotation respect model variable assignment need interpretation expression respect model different assignment value variable particular respect similar variable assignment partial variable assignment identical dog value manj cat dog cake book variable assignment fact dog value relation notation value appropriate function value dog notation useful interpretation expression respect model different variable assignment particular variable assignment value variable
121,"5 The lambda operator
(16) g'
X

\ y z

MAN2
\
\ x l

WOMAN2
CAT
DOG z l

X

2

Z

2

X

3

CAKE
BOOK

For expressions that contain no variables, the choice of variable assignment function is irrelevant.
If there are no variables, it obviously makes no difference to the interpretation what variables are assigned to what entities.
Hence, the interpretation of [laugh'(ethel')]M* is identical to [laugh'(etheV)]u*\ where g' is not identical to g.
Such expressions are still assumed to be interpreted with respect to an assignment of values to variables in order to make the theory more general, i.e.
without having to refer to whether or not an expression contains a variable or not.
Just bear in mind that the assignment is significant only when the interpreted expression does contain a variable.
The introduction of the variable assignment function provides a way of formally characterising ())* in (13) in terms of the semantics rather than by the syntactic method of substituting the argument expression of a X-expression for every occurrence of the abstracted variable.
Given the use of variable assignment functions, the interpretation of an expression like Xx [(kick'(x))(jo')](chesterf) with respect to a model, M 2 , and a variable assignment, g, can be defined as being identical to the interpretation of the expression (kick'(x))(jo') with respect to the same model M 2 but a different variable assignment function g'.
The assignment function required is that one exactly like g except that the variable bound by X, x in this instance, is assigned as value the extension of the argument Chester' in M2.
In the example given,
[chester']m is the entity DOG, so that g' maps the variable x onto this entity (i.e. g' is gi*>G/x) Because x is associated with an entity, DOG, the truth value of
[(kick'(x))(jo 'j] M2 g' is determined by first applying the function denoted by kick' in M2
(with respect to g') to the entity DOG and then applying the resulting function to
[jo']M2*\ This is, of course, equivalent to the truth value that is assigned to the expression (kick'(chester')Xjo') in M2, as required.
More generally, then, we can restate the equivalence in (13) more accurately as in (17), where (() is a propositional function, and a is an individual constant.
(17)
122

Lambda conversion: [Xx [<|>](a)]M-8 <-> [(|)]M.g[a]M/x",140,122,5 The Lambda Operator,No info,No info,lambda operator cat dog cake book expression contain variable choice variable assignment function irrelevant variable difference interpretation variable entity interpretation laugh ethel identical laugh ethev identical expression interpreted respect assignment value variable order theory general refer expression variable bear mind significant expression contain variable variable assignment function way term semantics syntactic method argument expression occurrence variable use variable assignment function interpretation expression chesterf respect model variable assignment identical interpretation expression kick respect model different variable assignment function assignment function variable instance value extension argument chester chester entity dog map variable entity entity dog truth value kick first function kick respect entity dog function course equivalent truth value expression kick chester xjo restate equivalence propositional function individual constant lambda conversion
122,"Introducing the lambda operator
The equivalence in (17) needs, however, to be shown to be true.
In order to do this, it is necessary to define how the denotation of a lambda expression is determined and how the application of this denotation to that of its argument guarantees the truth of (17).
It has already been established that the type of a lambda expression, Ax[(|) ], is<e,t>and so it must denote a characteristic function (i.e. a function from entities to truth values), but what function?
To find this out, let us consider a concrete example.
The function denoted by the (active) verb liked in M2 (more strictly the extension of its translation, like') is shown in (19), overleaf.
This is equivalent to the extension of the expression in Mu i.e. the set of ordered pairs {<MAN 1 ,WOMAN 1 >,
<MAN1,WOMAN2>, <MAN1,MAN1>, <MAN1,MAN2>, <WOMAN1,MAN1>,
<WOMAN1,WOMAN2>, <WOMAN2,CAT>, <WOMAN 2 ,WOMAN 1 >}.
It is now our task to work out the denotation of the lambda expression foc[(like'(x))(jo')] based on this function.
Clearly, the characteristic function denoted by this expression must pick out the set of entities that Jo liked in the model, i.e.
WOMANi, WOMAN 2 ,MAN 2 and himself, M A N L This function can be defined formally by using different variable assignment functions and checking the truth value of the expression (like '(x))(bertie') with respect to the model and the appropriate variable assignment function.
To get the function denoted by the lambda expression, therefore, we ascertain the truth value of [(like '(x))(jo ')]M2<* for every assignment function g' exactly like g except that x is assigned to a different member of A, the set of entities in the model.
If the truth value of the expression for some assignment of a value to x is 1 (i.e. true), then in the function denoted by the lambda expression, the entity assigned to x is mapped onto 1.
Otherwise, it is mapped onto
0.
To see how this works, let us go through the construction of the characteristic function denoted by Xx [(like'(x)Xjo')] with respect to M2, step by step.
In the first place, let g be the assignment function in (15).
Here x is mapped onto
M A ^ and the value of [(like '(x))(jo ')]m•«is 1 because Jo did like himself.
This result can be checked by comparing the function in (19), where MAN t is mapped onto a function that maps MANi onto 1.
Hence, the information in (18) must be part of the function denoted by [he [(like '(x))(jo ')]]M2*.
(18)

Next, we look at the truth value of (like '(x))(bertie') with respect to a variable assignment function exactly like g except that x is mapped on to some other member of A, say MAN2.
This function is gMAN2/* and, as shown by (19),
[(like YJtJX>')]M2'gMAN2/x is 1 and so the function [Xx[(like'(x))(joy)]]M2* maps MAN 2 onto 1 as well, giving (20).

123",141,123,5 The Lambda Operator,No info,No info,lambda operator equivalence true order necessary define denotation lambda expression application denotation argument guarantee truth type lambda expression characteristic function function entity truth value function concrete function active verb extension translation overleaf equivalent extension expression pair man woman cat woman woman task work denotation lambda expression foc function characteristic function expression entity model womani woman man function different variable assignment function truth value expression bertie respect model appropriate variable assignment function function lambda expression ascertain truth value assignment function different member entity model truth value expression assignment value true function lambda expression entity work construction characteristic function xjo respect step step place assignment function value result function man function map mani information function next look truth value bertie respect variable assignment function member function yjtjx function joy map man
123,"5 The lambda operator
(19)

MANj
MAN 2
WOMANj
WOMAN 2

CAT
DOG
CAKE
BOOK
MANj

MAN

MAN 2
WOMANj
WOMAN 2

CAT
DOG
CAKE
BOOK
MANj
MAN 2
WOMANj
WOMAN 2
CAT
DOG
BOOK
MANj
MAN 2
WOMANX
WOMAN 2
CAT
DOG
BOOK

124",142,124,5 The Lambda Operator,No info,No info,lambda operator manj man womanj woman cat dog cake book manj man man womanj woman cat dog cake book manj man womanj woman cat dog book manj man womanx woman cat dog book
124,"Introducing the lambda operator
(20)

This process is repeated with a new variable assignment function like g but where x is mapped onto WOMAN! to get the value of [(like '(x))(jo') ]M2,8WOMANI/X w hich again is 1.
This is repeated again and again until the value of [(like '(x))(jo')]M2*u* has been ascertained for every member of A. This yields the complete characteristic function in (21) which provides the extension of the expression he [(like'(x)Xjo')] with respect to the model M2 and the variable assignment function, g.
(21)
MAN X
MAN 2
WOMAN!
WOMAN 2
CAT
DOG
CAKE
BOOK

This description of the way in which the denotations of lambda expressions containing abstracted individual variables are constructed provides the basis for the formal definition for ascertaining the denotations of such ^-expressions.
The definition is added to the model theory used to interpret Ltype as the new clause which appears in (22).
This restates in a more general and precise fashion how the function in (21) was determined and introduces no new concepts.
(22)

For any model M = «A,F», if ty is an expression of type t containing an unbound instance of the individual variable x (of type e), then [tac [§]]M<* is that characteristic function K such that for all individuals, a , in A, K(a)
= 1 if, and only if, [<)>]**.*/* = l and K(a) = 0, otherwise.

(22) guarantees that the equivalence in (13) holds for any model.
The reason is that, according to (13), the truth value of an expression Xx[<|) ](a) with respect to M and g is given by assigning the value of [a]M«, say a, to x and ascertaining the truth value of [c|)]M ga/x.
Since the denotation of ^x [(j)], according to (22), includes a mapping from [a]M'8 to [<|>]M-8«*, the equivalence always holds.
Hence, the informal syntactic process of ^-conversion can be carried out validly, because the semantics of X
-expressions in (22) entails that Xx [<|>](a) is always truth-conditionally equivalent to
(J)3*, no matter what model is being used for the purposes of interpretation.
125",143,125,5 The Lambda Operator,No info,No info,lambda operator process new variable assignment function woman value hich value member complete characteristic function extension expression xjo respect model variable assignment function man man woman woman cat dog cake book description way denotation lambda expression individual variable basis formal ascertaining denotation model theory interpret ltype new clause general precise fashion function new concept model expression type unbound instance individual variable type tac characteristic function individual guarantee equivalence model reason truth value expression respect assigning value truth value denotation mapping equivalence informal syntactic process semantics equivalent matter model purpose interpretation
125,"5 The lambda operator

Exercise 5.3:
Using the definition in (22) and assuming that the model M2 is the same as M|, except for parts already specified, work out the extensions of the following L ^ lambda expressions: i.
Xy [drunk* (y) & lecturer' (y)].
ii.
Xz [(give'(bertie')(z))(jo')].
iii.
Xx [laugh' (x)].
iv.
Xy [~((y = the-lecturer') v (y = the-student'))].

5.2.3

The passive again

The lambda operator, as should be clear from the above discussion, provides an elegant way of capturing the semantic relation between active and passive verbs, or, more precisely, verb phrases.
As we have already noted, the syntactic subject of a passive sentence corresponds semantically to the direct object of the active.
In order to capture this relation, all that needs to be done is to translate passive VPs by a lambda expression that abstracts on a variable in the appropriate position.
So, for example, we can translate the passive VP kicked by Jo as XK [(kick'(x))(jo')] which denotes the set of things that Jo kicked.
Assuming that copular be adds nothing to the truth-conditions of the passive sentence (beyond tense), this is the expression that is functionally applied to the translation of the subject.
Hence, Chester was kicked by
Jo translates into L ^ . as Xx [(kick'(x))(jo')](Chester').
By lambda conversion, this is equivalent to (kicky(chestery))(jo') which is, of course, the translation of the active sentence Jo kicked Chester, exactly as required.
To complete the analysis of the simple passive in G2, here are the translation rules for the syntactic rules 13G2 to 17G2.
The rule in (23.b) is for the passive of transitive verbs, and so the abstracted variable x appears in the object position nearest the verb.
The two rules for ditransitive passives in (23.c) and (23.d) differ in the place where the variable appears.
In the former rule, the X-operator binds the second, direct object, position while in the latter it binds the indirect object position, nearest the verb, capturing the difference between ordinary ditransitive passives like the book was given to Ethel by Bertie and the ones associated with double object ditransitive sentences like Ethel was given the book by Berth.
(23) a.
b.
c.
d.
e.

T13&: VP[PAS]\
T14G2: Xx [V t [PAS]'(x)(PP by ')].
T15G,: Xx [Vdt[PAS]'(PPto')(x)(PPby')].
T16G2: Xx [V dt [PAS]'(x)(NP')(PP by ')].
T17G 2 :NP\

(24) presents a sample derivation and translation of the ditransitive passive sentence, Ethel was given the book by Bertie.
That this translation is equivalent to that of the active sentence Bertie gave the book to Ethel can be seen by deriving the translation of the latter.
This is left as an exercise to the reader.

126",144,126,5 The Lambda Operator,No info,No info,lambda operator exercise model part work extension lambda expression drunk lecturer bertie iii laugh passive lambda operator clear discussion elegant way semantic relation active passive verb verb phrase syntactic subject passive sentence direct object active order capture relation translate passive vps lambda expression abstract variable appropriate position translate passive kick denotes thing copular nothing passive sentence tense expression translation subject chester translates chester lambda conversion equivalent kicky chestery course translation active sentence chester complete analysis simple passive translation rule syntactic rule rule passive transitive verb variable position nearest rule ditransitive passive place variable former rule second direct object position latter indirect object position verb capturing difference ordinary ditransitive passive book ethel bertie double object ditransitive sentence ethel book berth pa pa vdt pa ppto ppby pa present sample derivation translation ditransitive passive sentence ethel book bertie translation equivalent active sentence bertie book ethel translation latter left exercise reader
126,"Generalising lambda expressions
(24) a.
b.
c.
d.
e.
f.
g.
h.
i.

S
=>S\
NP VP[+FIN]
=> VP'(NP').
N pr VP[+FIN]
=> V F ( N P / ) .
N pr wasVP[PAS]
=> VP[PAS]'(N P /).
Npr was Vdtpas NP PPby
=> Ax [v d , pas '(x)(NP')(PP b ;)](N p ;).
Npr was Vdt.pas the N PPby
=> Ax [V d , pa ;(x)(the-N')(PP b ;)](N p ;).
Npr was V ^ ^ the N by NP
=> Ax [V d , pas Xx)(the-N')(NP')](N pr ').
Npr was Vdt.pas the N by Npt2
=> Ax [V d , pas '(x)(the-N')(N pr2 ')](N p /).
Ethel was given the book by Bertie
=> Ax [give\x)(the-book')(bertie')](ether)
» give'(ethel')(the-book')(bertie').

1G2
6G2
13G2
16G2
7G 2
17G2
6G2
Lex

Exercise 5.4:
Translate the following passive sentences into L ^ and compare their translations with their active counterparts: i.
The cake was eaten by Chester.
ii.
The book was given to Fiona by Ethel.

5.3

Generalising lambda expressions

Because propositional functions may contain more than one free variable, it is possible to construct expressions that have more than one instance of the lambda operator in them.
According to the formulation we gave above, however, this is not possible because we have restricted lambda abstraction to binding individual variables in propositional functions.
There is, however, no sound reason to adhere to this restriction and the theory benefits from generalising the definition of lambda abstraction to allow the lambda operator to bind a variable of any type contained within an expression of any type.
For example, instead of introducing the lambda operator in the translation rules for the passive VPs, it is possible to state the semantics of the passive participle directly by manipulating the argument structure of the verb using multiple lambda abstraction.
For the passive of a transitive verb, this allows the first and second arguments to be permuted in the translation.
For example, it is possible to derive the semantics of the passive participle kicked from that of its active counterpart kicked, kicks, kick by creating an open formula from the translation of the active verb using two variables.
This would give the propositional function (kick'(y))(x).
Because the direct object argument (the second to last argument to be combined with by a
127",145,127,5 The Lambda Operator,No info,No info,lambda expression wasvp pa pa npr vdtpas ppby pa npr ppby npr pa npr pa ethel book bertie bertie ether ethel bertie lex exercise translate passive sentence translation active counterpart cake chester book fiona ethel lambda expression propositional function free variable possible construct expression instance lambda operator formulation possible lambda abstraction individual variable propositional function sound reason adhere restriction theory benefit lambda abstraction lambda operator bind variable type expression type lambda operator translation rule passive vps possible state semantics passive participle argument structure verb multiple lambda abstraction passive transitive verb first second argument translation possible derive semantics passive participle active counterpart kick kick open formula translation active verb variable propositional function direct object argument last argument
127,"5 The lambda operator predicate) appears last in the passive, surfacing as the syntactic subject, we abstract on the y variable first to give the expression Xy [(kick'(y))(x)] oftype<e,t>.
This expression contains the free variable x associated with the subject, or final, argument of the verb which appears in the passive as the object of the preposition by.
Abstracting on this variable gives an expression of type <e,<e,t»,
Xx[Xy[(kick '(y))(x)]].
Using this approach, the translation of a passive VP like kicked by Ethel comes out as Xx [Xy [(kick'(y))(x)]](ether), which by lambda conversion is equivalent to Xy [(kick'(y))(ethel')]y which has the form of the output of the translation rule T14G2 in (23 .b).
The translation of the sentence Prudence was kicked by Ethel is thus equivalent to the application of this latter expression to the translation of the subject, i.e. Xy l(kick'(y))(ethel')](prudence') which, of course, is equivalent to (kick'(prudence'))(ethel') by lambda conversion, as shown in (25).
(25) a.
b.
c.
d.
e.
kicked
=*Ax[Ay[(kick'(y))(x)]].
kicked by Ethel
=* Xx [Xy [(kick'(y))(x)]](ethel').
Prudence was kicked by Ethel
=» (Xx [Xy [(kick'(y))(x)]](ether))(prudence').
» Xy [(kick'(y)Xether)Kprudence').
» (kick'(prudence' ))(ethel').

If lambda abstraction is allowed to operate over expressions of any type in this way, then the rule of lambda conversion must be relaxed to allow this.
All that needs to be done is to say that a lambda expression, Ax [<()], applied to an individual argument is semantically equivalent to $ with the denotation of the argument as value of the free variable x, as in (26).
(26)

Lambda conversion: If <)| is an expression of type a containing a free instance of x, a variable of typee, and a is an expression of type e, then
[Ax[(|)](a)]M8<-> [(j)]1^* where a is [a]M-«.

When converting lambda expressions with multiple abstractions, it is very important to make sure that the correct variable is replaced by the correct argument.
(26) requires that lambda conversion be successive.
Conversion starts from the leftmost lambda operator and the first argument after the square brackets demarcating the scope of the operator, then moves on to the next lambda and the argument it combines with and so on until there are no more lambdas left.
Thus in
(25.c), the leftmost lambda abstracts on the variable x and the first argument after the square brackets is etheV'.
Hence, it is this argument that must replace instances of x.
The second argument prudence' becomes the first argument after this lambda conversion and because the leftmost X is now associated with the variable v, prudence' replaces the instance of y to give the correct expression after X-conversion, i.e. (kick*(prudence'))(etheV).
A further example is given in (27) which shows the necessary steps in the conversion of the triple abstraction in the lambda expression
((Xx[Xy[Xz[(give'(x)(z))(y)]]](fiona'))(bertie'))(the-book')y the translation of the sentence The book was given to Fiona by Bertie.
In this example, each variable is given a different subscript which also appears with the arguments that are to replace them.
Although strictly speaking unnecessary, this co-indexing of variable and
128",146,128,5 The Lambda Operator,No info,No info,lambda operator predicate last passive syntactic subject abstract variable expression kick oftype expression free variable subject final argument verb passive object preposition variable expression type kick approach translation passive ethel ether lambda conversion equivalent kick ethel form output translation rule translation sentence prudence ethel equivalent application latter expression translation subject kick ethel prudence course equivalent kick prudence ethel lambda conversion shown kick ethel kick ethel prudence ethel kick ether prudence xether kprudence kick prudence ethel lambda abstraction operate expression type way rule lambda conversion lambda expression individual argument equivalent denotation argument value free variable lambda conversion expression type free instance variable typee expression type lambda expression multiple abstraction important sure correct variable correct argument lambda conversion successive conversion leftmost lambda operator first argument square bracket demarcating scope operator move next lambda argument combine lambda leftmost lambda abstract variable first argument square bracket ethev argument instance second argument prudence first argument lambda conversion variable prudence replaces instance correct expression kick prudence ethev necessary step conversion triple abstraction lambda expression fiona bertie translation sentence book fiona bertie variable different subscript argument replace unnecessary variable
128,"Generalising lambda expressions argument shows the dependencies between them very clearly and allows the order of
X-conversion to be more easily traced.
(27) a.
b.
c.
d.

» ((Xx, [Xy2 [Az3 [give'(x1)(z3)(y2)]]](fiona)1))(bertie'2))(the-book)3)
» (Xy2 [Az3 [give'(fiona' i)(^(y2)]](beitie'2))(the-book'3)
» Xz3[give'(fiona'i)(z3)(bertie%)](the-book%)
»[give'(fiona',)(the-book'3)(bertie'2)].

Exercise 5.5:
Which of the following lambda conversions are well-formed?
i.
Xx [ Xz [(like'(x))(z)](jo')](bertie')
» (like'(jo')Xbertie').
ii.
(Xx [XL [(Hke'(x))(z)]]Oo'))(bertie')
» (like'(jo')Xbertie').
iii.
(Xx [Xy [(like'(x)Xy) & laugh'(y)]](the-cat'))(ethel')
» (like'(the-caf))(ether) & laugh'(ethel').
iv.
Xx [scream'(x)] v Xx [-(laugh'(x))](jo')
» scream'(jo') v -(laugh'(jo')), v. Xx [scream'(x) v -(laugh'(x))](jo')
» scream'(jo') v-(laugh'(jo')).
•Exercise 5.6:
Construct a lexical rule for passivisation in English along the lines suggested in the text above.
•Exercise 5.7
Another process by which grammatical functions are altered in English is the one often referred to as dative shift whereby a prepositional indirect object becomes the direct object and the direct object appears in second place, as shown in the relation between a and b below.
Using the X-operator, construct a rule that relates the semantic structure of the non-dative-shifted verb in i to that in ii, making sure that the paraphrase relation that holds between these sentences is maintained.
i.
Ethel gave the cake to the dog.
ii.
Ethel gave the dog the cake.
Not only is it possible to abstract over expressions of any type, it is also possible to abstract on variables of any type.
Thus, we can generalise the definition of lambda abstraction given in (7) to derive lambda expressions of all types.
For example, variables of type t, usually written using the letters p, q and r, may be abstracted upon in an expression like snow' <->/? to create an expression Xp [snow1
<-» p] of type <t,t>.
This denotes the set of all truth values that are identical to that assigned to snow' in a model.
Alternatively, a one-place predicate variable, P, may apply to an individual constant like the-caf to give the expression P(the-cat').
The free predicate variable can then be abstracted upon to yield the expression,
)dP[P(the-cat')], of type «e,t>,t> which denotes the set of all sets of which the cat is
129",147,129,5 The Lambda Operator,No info,No info,lambda expression argument show dependency order fiona bertie fiona beitie fiona bertie fiona bertie exercise lambda conversion bertie xbertie hke bertie xbertie iii laugh ethel ether laugh ethel scream laugh scream laugh scream laugh scream laugh lexical rule passivisation english line text process grammatical function english one dative shift prepositional indirect object direct object direct object second place relation construct rule semantic structure verb sure paraphrase relation hold sentence ethel cake dog ethel dog cake possible abstract expression type possible abstract variable type generalise lambda abstraction lambda expression type variable type letter expression snow expression type denotes truth value identical snow model variable individual constant expression free predicate variable yield expression type denotes set cat
129,"5 The lambda operator a member.
Indeed, Ltype contains variables of every type and allows any of these to be bound by the lambda operator in any expression of whatever type.
Hence, the rules for constructing well-formed expressions in Ltype include the general syntactic rule for lambda expressions in (28).
(28)

Lambda Abstraction: If <|) is an expression of type b, and u is an unbound variable of type a contained in <|>, then hi [(()] is a well-formed expression of type <a,b>.

The type of a lambda expression is derived from taking the type of the abstracted variable as the argument type and the type of the expression abstracted over as the result type.
Thus, taking p and q to be variables of type t, an expression like Xp[p
-» q] is of type <t,t>, because p and p -> q are both of type t.
The expression
Xq[Xp[p -» q]]y on the other hand, is of type <t,<t,t», because q is of type t and
^
~* ql is of type <t,<t,t», and so on.
Exercise 5.8:
Given the variables below, what are the types of the lambda expressions that follow?
(Where a is a type, the set of variables of type a can be symbolised as Var a .)
P,Q e Var<e.t> x,y,z G Vare p,q e Vart
A e Var«e.t>.<et>> i.
XR [(RGo')Xbertie')].
iii.
X?
[XA [A(P)]].
v. XQ [Q(ether)].

R e Var<e,<e,t» ii.
Xx [Xy [XL [(give'(x)(y))(z)]]].
iv.
Xp [p <-> rain'], vi.
Xp [Xq [p <-> q]].

The interpretation of these generalised lambda expressions is similar to that for expressions where the abstracted variable is an entity contained in a propositional function.
The denotations, however, have different domains and ranges.
For example, the expression XP [P(chester')] is of type «e,t>,t> and so denotes a function from sets (denotations of type <e,t>) to truth values.
This function maps every set of entities onto 1 if the extension of Chester* is in the set, i.e. if [P(chester')]M&/p is 1 where s is some subset of A. Otherwise [XP [P(chester')J]M* maps s onto 0.
In other words, the expression XP [P(chester')] denotes the set of all subsets of A of which
Chester is a member.
A more complex example is given by the denotation of an expression that has more than one instance of lambda operator, e.g.
Xx[Xy[(like'(y))(x)]].
This expression denotes a set of ordered pairs: the set of all pairs of entities <oc,p> such that (3 is liked by ot, or, more formally, {<(3,oc> I <a,(3> e [like ']M'8}.
More examples of informally described denotations of complex lambda expressions appear in (29) where the variables have the types given in exercise 5.8.

130",148,130,5 The Lambda Operator,No info,No info,lambda operator member ltype variable type allows lambda operator expression type rule expression ltype general syntactic rule lambda expression lambda abstraction expression type unbound variable type expression type type lambda expression type variable argument type type expression result type variable type expression type type expression hand type type type exercise variable type lambda expression follow type variable type symbolised var var vare vart var rgo xbertie iii ether var rain interpretation lambda expression similar expression variable entity propositional function denotation different domain range expression chester type denotes function denotation type truth value function map entity extension chester chester subset chester map word expression chester denotes subset chester member complex denotation expression instance lambda operator expression denotes pair set pair entity example denotation complex lambda expression variable type exercise
130,"Generalising lambda expressions
(29) a.
b.
c.
d.
e.
f.
g.

Xx [(like'(x))(jo') & (hate'(x))(ethel')] denotes the set of all x such that Jo and Ethel hate x.
XP [P(bertie') -» P(chester')] denotes the set of all sets P such that if Jo is in P then Chester is also in P.
XR [(R(chester')Xbertie')] denotes the set of all relations R that hold between Chester and Bertie.
Xy [Xx [give'(y)(tne-book')(x)]] denotes the set of all ordered pairs <x,y> such that x gives the book to y.
XP [Xx [P(x)]] denotes the set of ordered pairs of entities and sets <x,P> such that x is in the set P.
A,R[A,x [(R(x))(chester')]] denotes the set of ordered pairs of entities and sets of ordered pairs <x,R> such that Chester stands in the relation R to x.
XP [XQ [Q(ethel') & P(ethel')]] denotes the set of ordered pairs of sets of entities <Q,P> such that Ethel is a member of both sets.

Exercise 5.9:
Give informal descriptions of the denotations of the lambda expressions given in exercise 5.8 along the lines of those in (29).

The formal definition for the denotations of generalised lambda expressions is very similar to that given in (22) for simple lambda expressions involving only individual variables and propositional functions.
Any lambda expression Xu [(()] denotes a function from the denotations of the type of the abstracted variable, u, to denotations of the type of the expression that is abstracted over, i.e. <|).
The actual function denoted by Xu [(()] is one that when applied to any object in the domain of the function (i.e. of the type of the abstracted variable) yields a semantic object that is identical to the interpretation of the expression abstracted upon, (|), with respect to a variable assignment where the abstracted variable, u, is associated with the object denoted by the argument.
The formal definition is given in (30), which forms part of the model theory interpreting L ^ .
(30)

If u is a variable of type a and (() an expression of type b containing a free instance of u, then [Xu [(|>]]M«8 is that function h from Da into Db such that for all elements a in Da, h(a) is [(j>]M-»l/u.

To make this definition clearer, consider the interpretation of the expression
Xx[Xy[(like'(y))(x)]].
Informally, as we have seen, this denotes the set of ordered pairs of entities such that the first is liked by the second.
Formally, it denotes a function from entities to characteristic functions where each member of the set of entities, A, is mapped onto the characteristic function obtained from the extension of Xy [(Hkef(y))(x)] wherex is associated with the relevant element in A. For example, if the function [Xx [Xy [(like'(y))(x)]]]M2s is applied to the entity DOG, then the result is [Xy [(likeXy))00]]M2'8DOG*. which denotes the set of entities that the dog likes.
Since the latter is truth-conditionally equivalent to the expression
Xy[(like'(y))(chester')], we get the effects of lambda conversion.
Hence, it again follows from the definition of the interpretation of lambda expressions in (30) that
131",149,131,5 The Lambda Operator,No info,No info,lambda expression ethel denotes ethel hate bertie chester denotes chester chester xbertie relation hold chester bertie denotes pair book denotes ordered pair entity set chester denotes ordered pair entity pair chester stand relation ethel ethel denotes pair entity ethel member set exercise informal description denotation lambda expression exercise line formal denotation lambda expression similar simple lambda expression individual variable propositional function lambda expression function denotation type variable denotation type expression actual function applied object domain function type variable yield semantic object identical interpretation expression respect variable assignment variable object argument formal form part model theory variable type expression type free instance function element clearer interpretation expression denotes pair entity second function entity characteristic function member set entity characteristic function extension hkef wherex relevant element function entity dog result likexy entity dog latter equivalent expression chester effect lambda conversion interpretation lambda expression
131,"5 The lambda operator lambda conversion holds and Xx [Xy [(like'(y))(x)]](chester') is equivalent to
Xy[(like'(y))(chester')].
Thus, the generalised version of the definition of lambda conversion in (17) given below is valid for all lambda expressions whatever the type of the variable abstracted upon and whatever the type of the expression abstracted over.
(But see Chapter 10 for some environments in which it is not valid.)
(31)

[XU [<|>](a)]M 8 = [(|>]M.g[a]M/x

To complete the example of generalised lambda abstraction, let us work through the construction of the function denoted by Xx [Xy [(like '(y))(x)]] in M2.
To do this, it is necessary to construct the denotation of the lambda expression Xy [(like y(y))(x)] for all values of x.
In M2, the extension of like' is the function in (19) above.
We begin constructing the function [Xx [Xy[(like'(y))(x)]J]M2* by taking an arbitrary member of the set of entities, A, say MAN^ and working out the value of
[Xy[(like'(y))(x)]]M2*MAt*]/x.
The latter is, of course, the characteristic function that picks out the set of things Jo liked, i.e. himself, Bertie, Fiona and Ethel.
This function can be laboriously constructed by working out the value of [(like'(y))(x)]M2*'a * for all members a of A where g' isg MAN1/ \ Working out the values of (like'(y))(x) with respect to M2 and the variable assignment function noted above (which may also be written as gM^m**) yields the function in (32).
(32)

[Xy [(like'(y))(x)]]M2-*MAN1/x

MAN 2
WOMAN!
MANt

WOMAN^

Next we take another member of A, say DOG, and compute the value of
[Xy[(liket(y))(x)]YA^yoGtx, the set of things that the dog liked.
This gives another part of the extension of X x [X y [(like '(y))(x)]].
Stepping through this procedure for the remaining members of A we get the function in (33) which reverses the relations between the entities in the diagram in (19), as can be checked by interpreting the function in (33) in terms of sets of ordered pairs.

132",150,132,5 The Lambda Operator,No info,No info,lambda operator lambda conversion chester equivalent chester version lambda conversion valid lambda expression type variable type expression environment valid complete lambda abstraction work construction function necessary construct denotation lambda expression value extension function function arbitrary member set entity value mat latter course characteristic function thing bertie fiona ethel function working value member isg value respect variable assignment function yield function man woman mant next member dog compute value liket set thing dog part extension stepping procedure member function revers relation entity diagram function term pair
132,"Generalising lambda expressions
(33)

MAN 2
WOMANX
WOMAN 2
CAT
DOG
CAKE
BOOK

MAN
WOMAN
WOMAN 2
MAN

WOMAN 2

CAT
DOG
CAKE
BOOK

CAT
DOG
CAKE
BOOK
MAN
MAN
WOMAN
WOMAN 2

CAT
DOG
CAKE
BOOK
MAN 2
WOMANX
WOMAN2

CAT
DOG
CAKE
BOOK

133",151,133,5 The Lambda Operator,No info,No info,lambda expression man womanx woman cat dog cake book man woman woman man woman cat dog cake book cat dog cake book man man woman woman cat dog cake book man womanx cat dog cake book
133,"5 The lambda operator
(34)

[Xy [(like'(y))(x)]]M2'81**5'*

DOG

To further illustrate the formal interpretation of generalised lambda expressions, let us take a look at a second example expression, one that abstracts on a variable over one-place predicates, e.g. XP [P(ethel')].
As mentioned above, this expression denotes the set of all sets of which Ethel is a member.
In functional terms, this is construed as a function from characteristic functions to truth values, where each characteristic function, k, in the domain is mapped onto 1 if (and only if) WOMAN!
(the extension of [ethel']m*) is mapped onto 1 in k itself, i.e. if [P(ethel')]M2^k/p is true.
For example, in M2 (assuming the denotations in M! are carried over into M2) the sets that contain Ethel include the sets denoted by the expressions happy' and laugh' but not the sets denoted by run' or XK [(like'(x))(bertie')].
Hence, the function in (35) forms part of [XP [P(etheV)]]U2*.
The domain of the functions that expressions like XP [P(ethel')] denote include, not only the extensions of simple one-place predicates specified by the denotation function of a particular model, but all the characteristic functions denoted by some expression in the logical language.
This includes the sets of entities liked by Jo, those given the book by the man, those that were loathed by the cake and more abstruse sets like the set of all entities that were eaten by the dog and did not poison it.
(35) thus only represents a part of the function denoted by AP [P(ethel')] in M2, but gives enough information to show what this function looks like.
Exercise 5.10:
Give the formal definitions of the denotations of the following lambda expressions in M2 and represent these in the way shown in the examples in (33) and (35): i.
Xp [p <-»rain'].
ii.
Xz [Xy [Ax [give'(x)(y)(z)]]].
iii.
XP [slowly'(P)].

134",152,134,5 The Lambda Operator,No info,No info,lambda operator dog formal interpretation lambda expression second expression abstract variable predicate ethel expression denotes set ethel member functional term function characteristic function truth value characteristic function domain woman extension ethel ethel true denotation set contain ethel expression happy laugh set run bertie function form part ethev domain function expression ethel denote extension simple predicate denotation function particular model characteristic function expression logical language entity book man cake abstruse entity dog poison part function ethel enough information show function exercise formal definition denotation lambda expression represent way example rain iii
134,"Generalising lambda expressions
(35)

[AP [P(ethel'))]]M2*
[ happy']M2'8

MAN2 _

T

^^

1

WOMANj ~ "" ^ 5 ^
WOMAN2 * ^
\
CAT - ^ ^
^\
DOG — ^ ^ ^ ^\

CAKE

T^^r

BOOK - ^

~

[ laugh' ] M2 '§
MAN

1 ^-^^_
MAN2
— ^
WOMANX ^ ^
WOMAN2 ^
CAT ^ ^ ^ ^ V
DOG "" ~ ^ ^
CAKE
^ ^
BOOK —""

^^ i
T
\
^\
^\
Z a* o

MANj v
. \
MAN2
WOMANj v \ \ >

WOMAN 2 >X<^A
CAT
ONV\
DOG

/

LAKE
BOOK

\\
—W 0

[\x[like'(x)(bertie')]]]*
MANj

MAN2 v

A

1

WOMANj \ \ \
WOMAN2 \ V \ V
CAT - ^ ^ ^ s > ^
DOG ^ ^ ^ ^ ^
CAKE ~ ^ ^ ^ ^ ^= ^ 0
BOOK ~-~~^
135",153,135,5 The Lambda Operator,No info,No info,lambda expression ethel happy womanj cat dog cake book laugh man womanx cat dog cake book manj womanj woman cat dog lake book bertie manj womanj cat dog cake book
135,"5 The lambda operator
5.4

Reviewing co-ordination

So far, G2 contains no means of generating compound sentences.
This section will remedy the fault and show how lambda abstraction and an interpretation of propositional connectives in terms of functions can provide a more adequate account of English co-ordinate structures.
The syntactic analysis of co-ordinate sentences in
Chapter 3 is not the best that can be made.
First of all, there is some evidence that a conjunction like and in English and the clause that follows it form a single binary constituent, rather than that they both combine with the preceding clause to give a flat ternary branching structure.
Secondly, and more importantly, there are a number of constructions not handled in G^ in particular conditional sentences where the antecedent follows the consequent, e.g. Ethel sang, if Chester howled and non-sentential co-ordination, e.g. Bertie and Fiona loathed Chester.
It is not my intention to discuss the syntax of co-ordination in great detail, but a set of rules is presented below that remedy the above inadequacies.
This analysis is a simplified version of the GPSG account presented in Weisler et al. (1986) and Gazdar et al.
(1985), one of the better analyses of constituent co-ordination in the generative literature.
In keeping with the spirit of the rest of the book, I will ignore the alternatives to this account that may be proposed.
5.4.1

Sentential co-ordination

We begin with a revision of sentential co-ordination.
Syntactically the new analysis involves a rule that expands S as two sentential nodes one of which is marked with a syntactic feature of co-ordination.
Another rule then realises this category, S[CONJ], as a conjunction plus an ordinary sentence.
The new rules are given in (36) and a sample phrase structure tree generated by them appears in (37):
(36) a.
b.
c.

18G 2 :S-»S S[CONJ].
19G2: S[CONJ] -> CONJ S.
CONJ -» {and, or, if and only if, if}.

(37)

The dog ate the cake

136 or

Ethel didn't laugh",154,136,5 The Lambda Operator,No info,No info,lambda operator compound sentence remedy fault show lambda abstraction interpretation propositional connective term function adequate account english structure syntactic analysis sentence first evidence conjunction english clause form single binary constituent combine clause flat ternary branching structure number construction particular conditional sentence antecedent consequent ethel chester bertie fiona chester intention syntax great detail rule remedy inadequacy analysis version gpsg account weisler gazdar better analysis constituent generative literature spirit rest book alternative account sentential revision sentential new analysis rule sentential node syntactic feature rule category conj conjunction ordinary sentence new rule sample phrase structure tree conj conj conj conj dog cake ethel laugh
136,"Reviewing co-ordination
The interpretation of the logical connectives presented in Chapter 3 is, as we will see in Chapter 7, broadly adequate as an account of the semantics of the basic
English conjunctions.
In view of this, the truth-conditional interpretation of the connectives is maintained in the new grammar, as, for the sake of convenience, is the logical syntax of compound formulae familiar from LP.
Strictly speaking, in L ^ the logical connectives which take two formulae to yield a formula have the type
<t,<t,t», denoting functions from truth values to functions from truth values to truth values.
If the connectives are treated as having this type, then by the usual rule of functional application we should get expressions like (&(p)) of type <t,t> and
(&(p))(q) of type t, where/? and q are variables of type t.
However, this notation is not as perspicuous as the infix notation used in L P and, for the sake of clarity, we import into Ltype the syntactic rule for generating complex formulae from L P repeated in (38).
(38) a.
b.
t -> t Op 2 1.
O P 2 e {&,v ,->,<-> }.

This decision, however, poses a problem for the syntactic analysis proposed above, because the new co-ordination rules introduce the conjunctions as combining with only one of the two co-ordinated clauses.
According to the construction rule in (38), however, these connectives require two formulae at a time to make a formula, not one.
There is thus no simple translation of rule 19G2 in (36.b), since expressions like
(& S') are not well-formed in LP.
It is possible, however, to use lambda abstraction to help out here, so that instead of translating and simply as &, or as v , if as —> and if, and only if as <-» , we can translate them as complex lambda expressions that combine with one formula at a time.
In order to obtain appropriate translations of the conjunctions, we first replace each of the formulae that they combine with by a different propositional variable, to get p & qy p <-> qy p v qy and p -> q.
These propositional functions are turned into expressions of the correct type (i.e. <t,<t,t») by using the lambda operator to bind the variables.
This provides the revised translations of the connectives shown in (39).
(39) a.
b.
c.
d.
and => Xp [Aq [p & q]].
or => Xp [Xq [p v q]].
if =»A.p[Aq[p-»q]].
if, and only if => Xp [Xq [p <-> q]].

Adopting these translations allows the translation of rule 19G2 to combine the translations of the conjunction and the clause it combines with simply by functional application.
The translation rule in (4O.a) thus induces translations like Xp [Xq [p v q]](laugh '(ethel')) for the phrase or Ethel laughed, and Xp [Xq [p —> q]](rain') for If it rained, expressions which can be reduced by ^-conversion to
Xq[laugh '(ethel') v q] and X q[rain' —» q], respectively.
It follows from this that the type of S[CONJ] must be <t,t> and so the translation of rule 18G2 results directly from the application of the translation of the sentence containing the co-ordinating morpheme to that of the higher sentence, yielding a full formula.
The translation rules and appropriate type assignment appear in (40) and give rise to the translation tree in
(41) which parallels the syntactic analysis in (37).
The translation of the topmost sentence node in (41) can be simplified by lambda conversion to the expression in

137",155,137,5 The Lambda Operator,No info,No info,interpretation logical connective adequate account semantics basic english conjunction view interpretation connective new grammar sake convenience logical syntax compound formula familiar logical connective formula yield formula type denoting function truth value function truth value truth value connective type usual rule functional application expression type type variable type notation perspicuous infix notation sake clarity import ltype syntactic rule complex formula decision problem syntactic analysis new rule conjunction clause construction rule connective formula time formula simple translation rule expression possible lambda abstraction help translating complex lambda expression formula time order appropriate translation conjunction formula different propositional variable propositional function expression correct type lambda operator bind variable revised translation connective translation translation rule translation conjunction clause functional application translation rule translation laugh ethel phrase ethel laughed rain expression laugh ethel rain type conj translation rule translation sentence morpheme higher sentence full formula translation rule appropriate type assignment rise translation tree parallel syntactic analysis translation topmost sentence lambda conversion expression
137,"5 The lambda operator
(42.c), the latter being identical to the LP translation of the same sentence.
The fact that the order of the formulae is permuted in these examples from the order found in previous chapters is semantically insignificant because of the commutativity of v and
&, as discussed in Chapter 3.
(40) a.
b.
c.

T19G2: CONJ'(S').
TYPE(S[CONJ]) =
T18G2: S[CONJ]'(S').

(41)
(Xp [Xq [p V q]]~(laugh'(ether)))((eat'(the-cake'))(the-dog>))

(eat' (the-cake' ))(the-dog'))

Xp[Xq[pVq]]
(42) a.
b.
c.

Xp [Xq [p V q]]~(laugh'(ethel'))

-(laugh '(ethel'))

(Xp [Xq [p v q]]~(laugh'(ether)))((eat'(the-cake'))(the-dog')).
» Xq [-(laugh'(ethel')) v q]((eat'(the-cake'))(the-dog')).
» [-(laugh'(ethel')) v (eat'(the-cake')Xthe-dog')].

A further example of this approach is shown in the analysis tree of the sentence
It rained if it didn 't snow in (45).
This tree assumes a negative counterpart of the rule introducing impersonal verbs, i.e. S —> it didn't V0[-FIN] which translates as ~(V0)
(call this rule 9'G2).
Again although the translation of the topmost sentence node looks complicated, it reduces to the more familiar logical expression in (43.c).
(43) a.
b.
c.

(Xp [Xq [p -> q]](-snow'))(rain').
» Xq [-snow' —> q](rain').
» -snow' -»rain'.

The grammar does not yet contain a rule for generating sentences containing if...then.
For the sake of completeness, this is remedied by the rules in (44), which specifically mention the appropriate morphemes.
A more elegant solution could be proposed but this is sufficient for our purposes.
(44) a.
b.
c.

138

20G,: S -> S[if] S[then].
21G 2 :S[if]-»ifS.
22G2: S[then] -> then S.",156,138,5 The Lambda Operator,No info,No info,lambda operator latter identical translation sentence fact order formula example order previous chapter insignificant commutativity conj type conj conj laugh ether pvq laugh ethel laugh ethel laugh ether laugh ethel eat laugh ethel eat approach analysis tree sentence snow tree negative counterpart rule impersonal verb translates rule translation topmost sentence complicated reduces familiar logical expression rain rain rain grammar rule sentence sake completeness remedied rule appropriate morpheme elegant solution sufficient purpose ifs
138,"Reviewing co-ordination
(45)
(Xp [Xq [p -> q]](~snow'))(rain')

S[CONJ]
Xp [Iq [p -> q]](~snow')

VQ[+FIN] rain'

CONJ
^P \ rained if

It didn't

VQ[-FIN] snow snow
Assuming that the sentences generated by these rules are truth-conditionally equivalent to those generated by rules 17G2 and 18G2, where CONJ rewrites as //, we get the translation rules in (46).
(46) a.
b.
c.

T20G2: S[if]'(S[then]').
T21G2: if (S').
T22G2: then'(S').

The translation rule for 22G2 assumes that the expression then is also translated and so interpreted, just as if it were an ordinary conjunction morpheme.
Unlike the others, however, the word then does not add any semantic information to the sentence.
It should, therefore, be given a translation (and interpretation) that reflects this.
According to the translation rules in (46), then' combines with a formula to yield an expression that forms an argument to if(S').
The latter, as we have already seen, is an expression of type <t,t> and so S[then] must be a formula and then' must therefore be an expression of type <t,t>, as well.
Expressions of this type denote functions from truth values to truth values.
One of the four possible functions of this sort is the one that maps falsity onto falsity and truth onto truth as shown in (47).
This function, which is called the identity function over truth values because it maps a truth value onto itself, is denoted by a lambda expression of type <t,t> that applies to a formula to give an expression that is truth-conditionally equivalent to the argument formula.
This expression is Xp [p] which applies to a formula like crazy'(etheV) to give
139",157,139,5 The Lambda Operator,No info,No info,rain conj conj snow snow sentence rule equivalent rule conj translation rule translation rule expression ordinary conjunction morpheme others word semantic information sentence translation interpretation translation rule formula yield expression form argument latter expression type type expression type denote function truth value truth value possible function map falsity falsity truth truth function identity function truth value map truth value lambda expression type formula expression equivalent argument formula expression formula crazy ethev
139,"5 The lambda operator
Xp[p](crazy'(ethel')), an expression that ^-converts into crazy'(etheU).
This truth-conditionally empty expression, which denotes the function represented in (47), thus provides an appropriate translation of the meaningless element then.
[Xp [p]]M*

(47)

As an example of the way the rules and translations in (44) and (46) work, the derivation of the sentence If it didn't snow, then it rained is given in (48).
The translation, as can be seen from the lambda conversion equivalents, turns out to be truth-conditionally synonymous with It rained, if it didn't snow, as desired.
(48) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.

S
=>S\
S[if] S[then]
=> S[if]'(S[then]').
ifSS[then]
=> (Ap [Xq [p -> q]](S'))(S[then]').
if S then S if it didn't V0[-FIN] then S
=> (Ap [Xq [p -> q]](~V0'))(Xr [r](S')).
if it didn't V0[-FIN] then it V0[+FIN]
=» (Ap [Xq [p -> q]](~V0'))(Xr [r](V0')).
if it didn't snow then it rained
=> (Ap [Xq [p -> q]](~snow'))(Xr [r](rain'))
» Xq [(-snow') —> q](A,r [r](rain'))
» [(-snow') -> (Xr [r](rain'))]
» [(-snow') -» (rain')].

20G2
21G,
22G,
9'G2
9'G,
Lex

Exercise 5.11:
Translate the following formulae into L ^ using grammar G2, giving the full translations and their converted equivalents: i.
ii.

The dog ate the cake and the cake poisoned the dog.
Ethel was crazy or the student didn't like Ethel and Chester didn't like
Ethel, iii.
Jo laughed, if Chester howled or the cat yowled.

The truth-conditional connectives are interpreted in the same way as in Chapter
3 and, as in the model theory of that chapter, the truth-conditions of compound formulae are specified directly in the model theory used to interpret L^pe.
The full specification of this theory in (49) includes clauses for interpreting lambda abstraction and negation, as well as for functional application and the connectives.
This will
140",158,140,5 The Lambda Operator,No info,No info,lambda operator crazy ethel expression crazy etheu empty expression function appropriate translation meaningless element way rule translation work derivation sentence snow translation lambda conversion equivalent turn synonymous snow ifss snow rain rain rain rain lex exercise translate formula grammar full translation equivalent dog cake cake dog ethel crazy student ethel chester ethel chester cat connective way model theory compound formula model theory interpret full specification theory clause lambda abstraction negation well functional application connective
140,"Reviewing co-ordination remain the basis of the interpretation procedure throughout the rest of the book, just as Ltype will remain the basis of the translation language.
There will, however, be additions to the theory in later chapters as more data are covered.
(49)
1.
2.
3.

4.
5.
6.
7.
8.

Given a model, M = «A,F» and assignment of values to variables g, then:
For any item a in the lexicon, [a] M «= F(a ).
If a is of type a a n d / is of <a,b>, then \f(a)]M* = (/]M<[tf]M<8).
If u is a variable of type a and 0 an expression of type b containing a free occurrence of u, then [Xu/<t> ]] M 8 is that function h from Da into Db such that for all objects, a in Da, h(a) is [c|)]M8a/u.
If <>
| is a formula, then [~(<t>)]M* is 1, iff [c|)]M-8 is 0.
Otherwise, [~((|>)]M-8 is 0.
If (|> and \\f are formulae, then [(|) & \j/]M« is 1, iff [(|>]M'8 is 1 and [\|/]M8 is 1.
Otherwise, [$ & \\f]M* is 0.
If (() and \\f are formulae, then [<() v \j/]M-8 is 1, iff [<|)]M'8 is 1 or [\j/]M-8 is 1.
Otherwise, [$ v \|/]M<8 is 0.
If ()) and \|/ are formulae, then [(() —> \|/] M s is 1, iff [<|)]M'8 is 0 or [\\f]M<& is 1.
Otherwise, [(|) -> \j/]M•« is 0.
If (() and \j/ are formulae, then [()) <-^ \j/]M 8 is 1, iff [c))]M-s is [\j/]Ms. Otherwise,
[()) <-> \j/]M'8 is 0.

As discussed in Chapter 3, the meanings of the connectives are specified directly in the model theory above because their interpretation does not vary from model to model.
Their interpretations can, however, be modelled as functions in the same way as other denotations in the grammar.
For example, \p [Xq [p & q]] is that function that when given a true formula yields a function which yields truth when given another true formula and yields falsity on all other occasions.
The functions denoted by all the connectives, &, v ,—>,<-> and ~, are set out diagrammatically in (50) to
(54) and provide precisely the same information as the truth tables of Chapter 3.
(50)

Xp[X

141",159,141,5 The Lambda Operator,No info,No info,basis interpretation procedure rest book ltype basis translation language addition theory chapter data model assignment value variable item lexicon type variable type expression type free occurrence function formula formula formula formula formula connective model theory interpretation vary model model interpretation function way denotation grammar function true formula yield function yield truth true formula yield falsity occasion function connective set information truth table
141,"5 The lambda operator
(51)

Xp[Xq[pvq]]

1

0
0

•

^

^

1

0
W,

-a

1

^

1

1

>fc

1

^

(52)

0

A

W

A

1

^

1

^
0

(53)

1 n

0

142

>fc,

1

W,

A

^ ^

0

_^",160,142,5 The Lambda Operator,No info,No info,lambda operator pvq
142,"Reviewing co-ordination

(54)

~p

5.4.2

Co-ordinating other categories

In the last section, sentential co-ordination was (re-)introduced into the grammar, but the lambda operator allows an extension of the grammar to include some types of NP and VP co-ordination, while still maintaining a propositional interpretation of the conjunctions themselves.
The sorts of VP and NP co-ordination that we can now handle are those like (55.a & b) which are truth-conditionally identical to the sentences in (55.c & d), respectively.
(55) a.
b.
c.
d.

Jo loathed the dog and liked the cat.
The student and the lecturer loathed Chester.
Jo loathed the dog and Jo liked the cat.
The student loathed Chester and the lecturer loathed Chester.

The phrase structure rules to generate VPs and NPs conjoined by and and or are relatively straightforward and the appropriate rules are given in (56).
In these rules,
(p stands for any features associated with the VP (e.g. [+/-FIN]) which are passed down onto both conjuncts and the PL marking on the mother NP node is for agreement purposes.
In the latter case, conjunction is restricted to subject NPs (again to avoid unnecessary confusion) and so some slight revision needs to be made to rule
1G2 to allow for singular and plural verbs.
The revised Rule 1G2 appears in (56.e), but the other revisions to make sure that the right forms of verbs appear in the right places are again left as an exercise for the reader.
Because the conjunctions if and if and only if do not appear in VP and NP co-ordination the rules must be restricted to the conjunctions and and or which can be done by specifying the value of the conjunction.
(56) a.
b.
c.
d.
e.

23G2: VP[q>] -» VP[<p] VP[cp,CONJ:a] a e {and, or}.
24G2: NP[+PL] -> NP NP[CONJ:a] a e {and, or}.
25G2: VP[cp,CONJ:a] -> a VP[q>].
26G2: NP[CONJ:a] -> a NP.
1' G2: S -> NP[aPL] VP[+FIN,aPL].

Since the truth-conditions of sentences like (55.a & b) are identical to those of
(55.c & d), respectively, the conjunctions and and or should have the same interpretation in sentences containing NP and VP co-ordination as in sentential co-ordination.
But this gives rise to a problem in the translation of rule 23G2 and
24G 2 :the conjunctions are of type <t,<t,t» and so cannot directly combine with expressions of type <e,t> (the type of a VP) or of type e (the type of a NP).
To see
143",161,143,5 The Lambda Operator,No info,No info,category last sentential grammar lambda operator extension grammar type propositional interpretation conjunction sort identical sentence dog cat student lecturer chester dog cat student chester lecturer chester phrase structure rule generate vps np straightforward appropriate rule rule feature conjuncts mother node agreement purpose latter conjunction subject np avoid unnecessary confusion slight revision need rule singular plural verb rule revision sure right form verb right place exercise reader conjunction rule conjunction value conjunction conj conj conj conj apl apl sentence identical conjunction interpretation sentence sentential rise problem translation rule conjunction type expression type type type type
143,"5 The lambda operator how the lambda operator can solve this apparent problem, let us work through the analysis of (55.a) backwards, as it were, undoing lambda conversions as we go along.
First of all here is the syntactic analysis of the sentence according to G2.
(The numerical subscripts on the VP nodes are for ease of reference.)
(57)

NP[-PL]

Jo

Vt[+FIN,-PL] loathed

NP[-PL] the

N[-PL] dog and

VP4[+FIN,-PL]

Vt[+FIN,-PL] liked

NP[-PL] the

N[-PL] cat

As mentioned above Jo loathed the dog and liked the cat is truth-conditionally equivalent to Jo loathed the dog and Jo liked the cat.
The translation of the latter sentence is shown in (58.a) and, because of the equivalence noted above, this translation can be analysed as the ^-converted equivalent of that of the S node in (57).
According to the translation rule T1G2, (58.a) must result from X-converting an expression derived from the application of the translation of VP! to that of the subject
NP as in (58.b).
Tofindthefirststage of the ^-conversion the result of which is shown in (58.b), the rule is applied backwards to (58.a) in order to arrive at an expression that is truth-conditionally equivalent to VPj.
Since the argument of VP/ is jo\ each instance of the individual expression jo' in (58.a) is replaced by an individual variable x which is then abstracted on to give the expression in (59.c).
This expression when applied to the argument jo* gives an expression equivalent to (58.a).
(58) a.
b.
144

(loathe'(the-dog'))(jo') & (like'(the-cat'))(jo').
VP,'(NP') = VPr(jo')
» (loathe*(the-dog'))(jo') & (like'(the-cat'))(jo').",162,144,5 The Lambda Operator,No info,No info,lambda operator lambda operator apparent problem analysis lambda conversion first syntactic analysis sentence numerical subscript ease reference dog cat loathed dog cat equivalent loathed dog cat translation latter sentence equivalence translation equivalent node translation rule expression application translation subject tofindthefirststage result rule backwards order expression equivalent vpj argument instance individual expression individual variable expression expression applied argument expression equivalent loathe vpr loathe
144,"Reviewing co-ordination
(59)

VP,'
» A,x [(loathe'(the-dog')Xx) & (like'(the-cat'))(x)].

The syntax of the co-ordinate VP consists of two VPs, one of which contains a conjunction morpheme.
In order to obtain the correct type for VPj ', the latter should translate into a functor over VP expressions, i.e. of type «e,t>,<e,t» so that the translation rule T23G2 must be derived from the application of VP[CONJ]' to VP' as shown in (6O.b).
Thus, the expression in (59), translating VP,, must be derived from the application of VP3' to VP2 (cf. (6O.c)).
Since VP2 translates directly into the expression loathe'(the-dog'), we can apply backwards X-conversion to (59) by replacing the latter with a variable P, of type <e,t>, and abstracting on this to give the expression in (6O.f), of type «e,t>,<e,t» as required.
(60) a.
b.
c.

TYPE(VP[CONJ:oc]') = «e,t>,<e,t».
T23G2: VP[CONJ:oc]'(VF).
VP3[CONJ:and]'(VP2')
» Xx [(loathe'(the-dog'))(x) & (like'(the-cat'))(x)].
d.
VP2'=loathe'(the-dog').
e.
VP/
» XP [Xx [P(x) & (like'(the-cat'))(x)]](loatheJ(the-dog0).
f.
VP3[CONJ:and]'
» XP \Xx [P(x) & (like'(tne-cat'))(x)]].
The translation in (6O.f) is derived in turn from the combination of the translations of the conjunction and and the VP liked the cat.
The translation of the former is A/?
[Xq [p & q]], as we have already seen, and that of VP4 is like'(the-cat').
However, because the type of the translation of the conjunction is <t,<t,t» and that of the VP is <e,t>, the combination of these expressions cannot result directly from the functional application of one expression to the other.
Hence, the translation of the rule expanding VP[CONJ:oc], rule 25G2, must directly specify the way these translations are combined.
As can be seen from (6O.f), the rule must introduce and abstract upon the predicate variable P and the individual variable x, since these do not appear in the translations of and or liked the cat Furthermore, the expressions P(x) and like'(the-cat') must be associated with the p and the q variables in the translation of the conjunction (the order is immaterial because of the commutativity of & as mentioned in Chapter 3).
Hence, (6O.f) must be derived by ^-conversion from the expression in (61 .a) and the appropriate translation rule for VP[CONJ:a] must be that in(61.b).
VP3' = X?
[Ax [ftp [Xq [p & q]](P(x)))((like'(the-cat)))(x))]]
» X?
[Xx [P(x) & (like'(the-cat'))(x)]].
b.
T25G2: AP [Ax [(oc'(P(y)))(VP'(y))]].
(62) shows that the rules that we have come up with for VP co-ordination by applying backwards A,-conversion work in the way intended by giving the derivation and translation of the example sentence Jo loathed the dog and liked the cat.
The Xconversion of the resulting complex expression is carried out in (63) to show its equivalence to (58.a) as required.
(61) a.

145",163,145,5 The Lambda Operator,No info,No info,loathe syntax vps conjunction morpheme order correct type vpj latter translate functor expression type translation rule application conj expression translating application translates expression loathe apply latter variable type abstracting expression type type conj conj conj loathe loathej conj translation combination translation conjunction cat translation former type translation conjunction combination expression result functional application expression translation rule conj rule way translation rule abstract predicate variable individual variable translation cat furthermore expression variable translation conjunction order immaterial commutativity expression appropriate translation rule conj rule work way derivation translation sentence dog liked cat xconversion complex expression show equivalence
145,"5 The lambda operator
(62) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.

(63) a.
b.
c.
d.
e.

S
=>S\
NP VP,[+FIN,-PL]
VG->
=> VP,'(NF).
NprVP,[+FIN,-PL]
6G2
=> VP/CNp/).
Npr VP2 [+FIN,-PL] VP3[CONJ:and,+FIN,-PL]
23G2
=> (VP3[CONJ:and]'(VP2'))(Npr').
Npr VJ>FIN,-PL] NP VP3[CONJ:and,+FIN,-PL]
3G,
=> (VP3[CONJ:and]XV;(NF)))(Np/).
Npr Vf+FINrPL] NP and VP4[+FIN,-PL]
25G,
=> (AP [Xx [(Xp [Xq [p & q]](P(x)))(VP4'(x))]](Vt'(NP')))(Np/).
3G,
Npr V{+FIN,-PL] NP and Vt NP
=> (XP [A.x [(Ap [Xq [p & q]](P(x)))((V;(NP'))(x))]](Vt'(NP*)))(Np;).
Npr Vf+FINrPL] the N and Vt NP
7G2
=> (XP [Xx [(Xp [Xq [p & q]](P(x)))((V;(NP'))(x))]](Vt'(the-N')))(Np/).
Npr VJ>FIN,-PL] the N and Vt the N
7G2
=> (XP [Xx [(Xp [Xq [p &q]](P(x)))((V;(the-N'))(x))]](Vt'(the-N')))(Np/).
Jo loathed the dog and liked the cat
Lex
=> (XP [Xx [(Xp [Xq [p & q]](P(x)))((like'(the-cat'))(x))]]
(loathe'(the-dog')))(jo').
(XP [Xx [(Xp [Xq [p & q]](P(x)))((like'(the-cat'))(x))]]
(loathe'(the-dog')))(jo').
» (XP [Xx [Xq [P(x) & q]((like)(the-cat)))(x))]](loatheXthe-dogO))Go').
» (XP [Xx [P(x) & (like'(the-cat)))(x)]](loathe>(the-dog')))Go>).
» Xx [(loathe'(tne-dog'))(x) & (like'(the-cat'))(x)](jo').
» [(loathe'(the-dog'))Go') & (like'(the-cat'))Go')].

This method of arriving at translation rules, while perhaps not strictly interesting from a purely semantic viewpoint, does illustrate one of the advantages of the semantic theory being advanced here.
It is possible, using this formal theory, to work out the meanings of expressions in a language from the interpretation of expressions with which they are synonymous and from the interpretations of the entailments of the phrase.
So from the equivalence of (58.a) and (58.c) we were able to work out that the translation of the VP and liked the cat is XP [Xx [P(x) &
(like*{the-caf))(%)]], something that was not previously obvious.
By working backwards like this, we can be sure that entailment and paraphrase relations are maintained in the semantics and that constituents of complex sentences are assigned appropriate denotations.

146",164,146,5 The Lambda Operator,No info,No info,lambda operator nprvp npr conj conj npr npr fin conj conj npr npr npr npr fin dog cat lex loathe loathe loathe loathe loathe method translation rule interesting semantic viewpoint advantage semantic theory possible formal theory work expression language interpretation expression synonymous interpretation entailment phrase equivalence able work translation cat obvious working sure entailment paraphrase relation semantics constituent complex sentence appropriate denotation
146,"Reviewing co-ordination
Exercise 5.12:
It is also possible to co-ordinate transitive verbs as in the following sentences: i.
Ethel loathed and detested Jo.
ii.
The farmer shot and killed the dog.
iii.
The student loved or loathed the lecturer.
State a syntactic rule and an appropriate translation rule like that for VP co-ordination above to generate co-ordinate transitive verbs, making sure that the translations given to the above sentences are truth-conditionally equivalent to the respective co-ordinate sentences that follow: iv.
Ethel loathed Jo and Ethel detested Jo.
v. The farmer shot the dog and the farmer killed the dog.
vi.
The student loved the lecturer or the student loathed the lecturer.
A similar process can be gone through to obtain the translations oftheNP co-ordination rules which are given in (56.b) and (56.d).
We begin by noticing the truth-conditional equivalence between the sentences in (64.a) and (64.b), the latter of which has the simple translation in (64.c).
(64) a.
b.
c.

Ethel or Bertie was the golfer.
Ethel was the golfer or Bertie is the golfer.
(ether = the-golfer') v (bertie* = the-golfer').

The formula in (64.c) is truth-conditionally equivalent to some expression constructed from the translations of the VP was the golfer and the NP Ethel or Bertie.
The former is given by the L ^ expression in (65.a) (denoting the set of entities that are identical to the golfer).
An LtyPe expression that combines with this to give an expression that
X -converts to (64.c) is given in (65.b) which may be taken to be the translation of the subject NP.
(65) a.
b.
was the golfer => Xx [x = the-golfer'].
Ethel or Bertie => XP [P(ethel') v P(bertie')].

(65.b) must be derived from the translations of or Bertie and Ethel, i.e. ethel\ while the former is derived from the translations of or, i.e. A,p [^q [p v q]], and Bertie, i.e.
bertie \ Without going into further details, the appropriate translation rules and type assignments are given in (66) and the derivation of the NP Ethel or Bertie according to these is given in (67).
(68) provides the appropriate ^-conversion showing the equivalence of the translation to (65.b).
(66) a.
b.
c.

TYPE(NP[CONJ: a]') = <e,«e,t>,t».
TR 24G2: NP[CONJ:a ]'(NP').
TR 26G2: Ax [XV [(a'(P(x)))(P'(NP'))]].

147",165,147,5 The Lambda Operator,No info,No info,exercise possible transitive verb following sentence ethel farmer shot dog iii student lecturer state syntactic rule appropriate translation rule transitive verb sure translation sentence equivalent respective sentence ethel ethel farmer shot dog farmer dog student lecturer student lecturer similar process translation ofthenp rule equivalence sentence latter simple translation ethel bertie golfer ethel golfer bertie golfer ether bertie formula equivalent expression translation golfer ethel bertie former expression entity identical golfer ltype expression combine expression translation subject golfer ethel bertie ethel bertie translation bertie ethel former derived translation bertie bertie detail appropriate translation rule type assignment derivation ethel bertie appropriate equivalence translation type conj conj
147,"5 The lambda operator
(67) a.

NP
=>NP\ b.
NP NP[CONJ:or]
24G2
=> NP[CONJ]'(NF).
7G2 c.
NprNP[CONJ:or]
=> NP[CONJ]'(Npr').
26G2 d.
N pr orNP
=> Ax [XP [(Xp [Xq [p v q]](P(x)))(P(NF))]](Npr').
7G2 e.
N pr orN pr
=> Xx [XP [(Xp [Xq [pvq]](P(x)))(P(Npr'))]](Npr').
f.
Ethel or Bertie
Lex
=> Xx [XP [Xp [Xq [p v q]](P(x)))(P(bertie'))]](etheD.
(68) a.
Xx [XP [(Xp [Xq [p v q]](P(x)))(P(bertie'))]](ether).
b. »
Xx [Xp [Xq [P(x) v q](P(bertie'))]](ethel').
c. »
X,x [XP [P(x) v P(bertie')]](ethel').
d. »
XP [P(ethel') v P(bertie')].
There is an important thing to notice about the expressions that result from the application of the rules in (66) (and the equivalent expressions in (68)) and that is their type.
In (68.d), we have a formula containing two instances of a predicate variable, P, bound by the X operator.
Since the type of the variable is <e,t> and that of the expression in its scope is t, the type of the whole expression is «e,t>,t>, denoting a function from sets to truth values.
This is not, however, the type previously assigned to noun phrases, i.e. e, which we have been assuming is appropriate up until now.
This leads us into our next topic, the interpretation of noun phrases generally, which is taken up in Chapter 6.
*Exercise5.13:
It is often argued nowadays that auxiliary verbs in English like does/didn 7 form a constituent with its dependent content VP (e.g. like the cat) (cf. Pullum and Wilson
(1977), Gazdar, Klein and Sag (1981)).
However, G2 assigns a flat structure to sentences negated by didn 't.
Revise the grammar to capture the fact that didn 7 VP is a constituent, giving didn't a translation that ensures that a sentence like Ethel didn't like the cat is a paraphrase of It is not the case that Ethel likes the cat.
*Exercise5.14:
G2 has three rules for VP that introduce the positive copula was and an additional two sentential rules introducing the negative copula wasn 't.
Furthermore, the grammar gives no translation to the copula, encoding the appropriate translations directly into the rules themselves.
Revise the grammar so that negative and positive copulas are introduced by the same rules (hint: use a feature NEG in the syntax) giving the positive and negative copulas appropriate translations.
In your answer, you should have noticed that you have to give the copula appearing with an NP complement a different translation to that appearing with A or VP[PAS].
Propose a way to modify the grammar so that the interpretation of the copula remains constant but
148",166,148,5 The Lambda Operator,No info,No info,lambda operator conj conj nprnp conj conj npr ornp npr orn pvq npr npr ethel bertie lex bertie bertie ether bertie ethel bertie ethel ethel bertie important notice expression result application rule equivalent expression type formula instance predicate variable operator type variable expression scope type whole expression function truth value noun phrase appropriate lead next topic interpretation noun phrase auxiliary verb english form constituent dependent content cat pullum wilson gazdar klein flat structure sentence revise capture fact constituent translation sentence ethel cat paraphrase ethel cat rule positive copula additional sentential rule negative copula translation copula appropriate translation revise negative positive copula rule hint use feature neg syntax positive negative copula appropriate translation answer copula complement different translation pa propose way modify grammar interpretation copula constant
148,"Further reading the translation of a NP in predicate position has a different translation to its non-predicative counterpart, one that is of the same type as a predicative adjective
(hint: you may find the identity operator useful here).

5.5

Further reading

A logical account of the lambda operator can be found in Church (1956), and linguistic introductions to the operator are found in Partee, ter Meulen and Wall (1990:
338-351), Dowty, Wall and Peters (1981: 98-104), Allwood, Andersen and Dahl
(1977: 155-157), Chierchia and McConnell-Ginet (1990: 318-330) and McCawley
(1981: 395-401).
Applications of the ^-operator are not hard to find.
Dowty (1982) uses it to discuss cross-linguistic analyses of passive formation and other grammatical-function-changing operations.
The approach to co-ordination discussed in Section 5.4 owes a lot to the discussion in Montague (1973) and the specific analyses of Sag, Wasow, Gazdar and Weisler (1985) and Gazdar, Klein, Pullum and
Sag (1985: ch.
8).
(A more sophisticated approach to the co-ordination of all syntactic categories within a slightly different framework can be found in Keenan and Faltz
(1985) and Partee and Rooth (1983).)
Partee, ter Meulen and Wall (1990: 351-367) has a discussion of linguistic applications of the ^-operator including passive, phrasal co-ordination, VP-deletion, and relative clauses.
These constructions are also discussed in Chierchia and McConnell-Ginet (1990: 330-348) which also discusses
VP anaphora.
The interpretation of unbounded dependencies in Gazdar, Klein, Pullum and Sag (1985: ch.
7; 229-236) relies heavily on the use of this device.
(See also
Cresswell (1973).)

149",167,149,5 The Lambda Operator,No info,No info,translation predicate different translation counterpart type predicative adjective hint identity operator useful logical account lambda operator church linguistic introduction operator partee ter meulen wall dowty wall peter allwood andersen dahl chierchia mccawley application analysis passive formation operation approach lot discussion montague specific analysis sag wasow gazdar weisler gazdar klein pullum sophisticated approach syntactic category different framework keenan faltz partee rooth partee ter meulen wall discussion linguistic application passive phrasal relative clause construction chierchia anaphora interpretation unbounded dependency gazdar klein pullum device
149,"6

Quantification

6.1

The variety of noun phrases

We have so far in this book been looking at the meaning of sentences primarily in terms of the properties that entities have and the relations that hold between them.
This has meant a concentration on the interpretations of verbs and verb phrases, with the meanings of the phrases that serve as their arguments, noun phrases, taking second place.
Indeed, only two sorts of English noun phrase have been analysed in the grammar fragments so far: proper names and simple definite noun phrases.
But there are, of course, many other types of noun phrase in English, including indefinite noun phrases like those in (La & b), quantified noun phrases as in (l.c & d), noun phrases containing adjectives or relative clauses (l.e & f), noun phrases with possessive modifiers (l.g), and many more.
(1) a. a book.
b. some cat.
c. every dog.
d. each person.
e. the happy student.
f. any student who gives a good report.
g.
Ethers friend's dog.
The noun phrases in (1) all require a more sophisticated interpretation than the one supplied for proper names and definite descriptions in earlier chapters.
Both of these expressions have been translated as expressions of type e, denoting entities in the model.
Such an analysis is, however, not ultimately tenable for proper nouns, is suspect for definite noun phrases and cannot be sustained at all for the other types of noun phrase in (1).
For example, that noun phrases like (La) and (l.c) cannot denote a specific entity in the model can be seen from a consideration of the meaning of a sentence like Every student read a book.
If the phrase a book denoted a single entity unique in any model, say Jane Eyre, then the proposition expressed by this sentence is true only if all students read the same book.
But this is not necessarily what the sentence means.
It may well be true that all the students did read Jane Eyre, but the proposition expressed is also true if one student read Agnes Grey, one read Villette, one read Wuthering Heights, and so on.
Hence, the phrase a book can pick out different entities on different occasions, provided only that they are all books.
Thus, an indefinite noun phrase cannot be directly associated with a unique entity in the model and so cannot be translated into an expression of type e.
For similar reasons the subject NP every student also cannot denote a single individual in the model.
The example sentence is not verified by the fact that one entity, say Jo, was a student and read Jane Eyre, but is true only if all those entities in the model that are students read the book.
The appearance of nominal modifiers in noun phrases (as in (l.e) and (l.f)) also provides evidence against letting NPs denote individuals.
In earlier chapters, each
150",168,150,6 Quantification,No info,No info,quantification variety noun phrase book meaning sentence term property entity relation concentration interpretation verb verb phrase meaning phrase serve argument noun phrase second place sort english noun phrase grammar fragment proper name simple definite noun phrase course many type noun phrase english indefinite noun phrase noun phrase noun phrase adjective relative clause noun phrase possessive many book cat dog person happy student student good report ether friend dog noun phrase sophisticated interpretation supplied proper name definite description earlier chapter expression expression type entity model analysis tenable proper noun suspect definite noun phrase type noun phrase noun phrase denote specific entity model consideration meaning sentence student book phrase book single entity unique model jane eyre proposition sentence true student book sentence true student jane eyre proposition true student agnes grey villette one height phrase book different entity different occasion book indefinite noun phrase unique entity model expression type similar reason subject student single individual model sentence fact entity student jane eyre true entity model student read book appearance nominal modifier noun phrase evidence np individual earlier chapter
150,"Introducing the logical quantifiers definite description is associated with a unique entity in the model by the denotation assignment function.
Thus, the dog is specified as extensionally denoting DOG and the student MAN^ etc. If this is maintained for a larger fragment of English including modifiers, the denotation assignment function of each model must be extended to provide a unique extension for every modified and non-modified definite NP in the object language.
Hence, not only will an extension be assigned to the student, but also to the happy student, the tall, happy student, the happy student with a cold, and so on.
One argument against this approach is that, if attributive modification is recursive, as usually assumed in the generative literature, then the denotation assignment function will be required to assign an extension to an infinite number of phrases, and will thus itself be infinite.
A more cogent argument against treating modified definite NPs as entity-denoting expressions concerns the fact that there are clear semantic relations between all these noun phrases.
The extension of the phrase happy student is related to those of happy and student and the extension of tall happy student is related to those of tall and happy student and so on.
The information provided by nominal modifiers in definite noun phrases narrows down the domain in which the referent of the definite description is sought.
In a roomful of students, the entity being referred to by the phrase the student with green hair can be identified by looking at the entities in the room that are students and seeing which one also has green hair.
If the only entity in the room with these two properties happens to be Fiona, we can identify her as the referent of the NP without having previously known that the student with green hair is actually Fiona.
In other words, the semantics of definite noun phrases, like those of other NPs, is compositional, the meaning of the whole being derived from the meaning of the parts.
Hence, even definite NPs must have more semantic structure than that provided by an individual constant.
The approach to NP denotation of
Chapters 2 to 5 is thus inadequate and must be revised to account for the points just raised.
It is the purpose of this chapter to provide the basis for such a theory which is compositional and assigns meanings to full noun phrases according to the meanings of the adjectives, nouns and determiners that they contain.
6.2

Introducing the logical quantifiers

We begin our analysis of noun phrases by looking at a now traditional semantic treatment of NPs like those in (l.a) to (l.d).
This analysis comes directly from the logical tradition and has been adopted by many linguists as a basis for the interpretation of universal NPs like everyone, all gardeners, every dog, etc. and existential ones like someone, some gardener, a dog, etc. This analysis goes back to the work of Gottlob Frege, a German philosopher of the nineteenth century, who first provided the now standard technical means of analysing sentences containing quantified noun phrases (QNPs), which have been the object of philosophical study in the Western tradition since Aristotle.
Since this book is about the semantics of natural languages, many of the logical aspects of this analysis are ignored and this chapter is concerned only with the contribution it makes to the understanding of quantified noun phrases in English and other human languages that have been seriously investigated.
As with the analyses of other constructions in this book, interpretation is not carried out on English sentences directly but on logical representations of these.
Hence to provide a semantic analysis of quantified sentences,
151",169,151,6 Quantification,No info,No info,logical quantifier definite description unique entity model denotation assignment function dog dog student larger fragment english modifier denotation assignment function model unique extension definite object language extension student happy student tall happy student happy student cold argument approach attributive modification recursive generative literature denotation assignment function assign extension infinite number phrase infinite cogent argument definite np expression concern fact clear semantic relation noun phrase extension phrase happy student happy student extension happy student tall happy student information nominal modifier definite noun phrase narrow domain referent definite description roomful student entity phrase student green hair entity room student green hair entity room property fiona identify referent student green hair fiona word semantics definite noun phrase np compositional meaning meaning part definite np semantic structure individual constant approach denotation chapter inadequate account point purpose basis theory compositional assigns full noun phrase adjective noun determiner logical quantifier analysis noun phrase traditional semantic treatment np analysis logical tradition many linguist basis interpretation universal np everyone gardener dog existential someone gardener dog analysis work gottlob frege german philosopher nineteenth century standard technical mean sentence noun phrase qnps object philosophical study western tradition aristotle book semantics natural language many logical aspect analysis concerned contribution understanding noun phrase english human language analysis construction book interpretation english sentence logical representation semantic analysis sentence
151,"6 Quantification we must first provide a logical language which can represent them and then define the interpretation of that language.
The language that is used to translate English with noun phrases like those in (1) is based on L ^ , but contains two new logical operators and is called LQ.
In this section, we define this language and discuss its interpretation.
6.2.1

The quantifiers

To begin the analysis of quantified sentences, consider the sentence Someone liked
Jo.
This provides the information that some entity liked (at some time in the past) some, possibly different, entity called Jo and it may thus be paraphrased by the formal
English sentence in (2).
(2)

For some entity, that entity liked Jo.

Replacing the word entity in (2) by a variable gives the quasi-logical sentence in
(3) which brings out the fact that the something being talked about is the thing that liked Jo.
(3)

For some z, z liked Jo.

The second part of this expression is easily represented in L ^ as (like'(jo'))(z), a propositional function containing a free variable, z.
Such an expression is not suitable as the translation of (3), however, as, although it is of the right type to translate a sentence, i.e. t, it does not denote a truth value because it contains an unbound variable.
To make the propositional function into a formula the free variable must be bound by some operator which, unlike the lambda operator, must not alter the type of the logical expression; which must be a formula, since the expression translates a sentence and not a predicate.
The relevant operator is 3 (or V, in some notations) and is known as the existential operator.
Like the lambda operator, 3 is written before the variable it binds and comes to the left of square brackets which enclose the propositional function over which the operator ranges.
Ignoring for the moment the fact that the English expression someone is used only of people (or, less commonly, of other animate entities), the sentence in (2) can be translated into the formula in (4).
(4)

3z [(like'Go')Xz)].

Care is needed in specifying the right scope for the existential operator, as it is for lambda.
Thus, neither (5.b) nor (5.c) are correct representations of the sentence in
(5.a).
In the former, (like (jo ))(x) is not in the scope of the operator while in (5.c) it is in its scope, but the variable x is not bound by the operator.
The correct representation is given in (5.d).
(5) a.
b.
c.
d.

Someone liked Ethel and Jo.
3x [(like'(ethel'))(x)] &
3y [(like'(ethel'))(y) &
3z [(like'(ethel'))(z) &

Associated with the existential operator is the universal operator.
This is used in the translations of sentences that contain noun phrases with all and every and is written as V (or A).
This is again prefixed to a propositional function containing the variable it is associated with and has all the usual properties in terms of variable
152",170,152,6 Quantification,No info,No info,quantification logical language define interpretation language language translate english noun phrase new logical operator define language interpretation quantifier analysis sentence sentence someone information entity time different entity formal english sentence entity entity word entity variable sentence fact second part expression propositional function free variable expression suitable translation right type translate sentence denote truth value unbound variable propositional function formula free variable operator lambda operator logical expression expression translates sentence relevant operator notation existential operator lambda operator variable bind left square bracket propositional function operator range moment fact english expression someone people entity sentence formula care right scope existential operator lambda correct representation sentence former scope operator scope variable bound operator correct representation someone ethel ethel ethel ethel existential operator universal operator translation sentence noun phrase propositional function variable usual property term variable
152,"Introducing the logical quantifiers binding and scope.
The representation of (6.a) can be given the quasi-logical translation in (6.b) which translates into the fully logical expression in (6.c).
(6) a.
b.
c.

Everyone liked Fiona.
For all x, x liked Fiona.
Vx [(like'(fiona'))(x)].

The operators, 3 and V, are more generally known as quantifiers and their use has now become standard in logic, forming the backbone of the predicate calculus and more complex logical languages.
If we add the quantifiers to the typed language with the X-operator of Chapter 5, we get the language LQ, which is defined by the same rules as L ^ with the additional rule introducing quantified formulae given in (7).
(7)

Quantifier rule: If (() is an expression of type t containing a free instance of a variable u of type e, then 3u [(()] and Vu [())] are expressions of type t.

In writing a syntactic rule for generating quantified formulae, logicians do not specify that (> should contain an unbound instance of the variable to be bound by the quantifier, as this does not affect the semantics.
As we will see below, an expression like Vx [(like'(fiona'))(jo')] is truth-conditionally equivalent to (like'(fiona'))(jo').
However, the string most nearly equivalent to the former expression in English
Everyone Jo liked Fiona is ungrammatical (as are the equivalent expressions in many other languages).
As the semantic theory being developed in this book is intended for the interpretation of natural languages, the rule in (7) has been written specifically to disallow quantifiers from combining with formulae that are not propositional functions.
In LQ, therefore, expressions like Vx [sing*(jo')] are not well-formed, even though they are perfectly acceptable in ordinary predicate logic.
The definition in (7) allows quantifiers to bind more than one instance of a variable in its scope (as in (5.d)), and more than one quantifier to bind distinct free variables in propositional functions.
For example, (8) shows four well-formed formulae that can be constructed from the propositional function (like '(x))(y) using the two quantifiers, V and B, with an English sentence that it can be used to translate following each logical expression.
(8) a.

3x [3y
(Someone liked someone.) b.
Vx [Vy [(like'(y))(x)]].
(Everyone liked everyone.) c.
Vx [3y [(like'(y))(x)]].
(Everyone liked someone.) d.
3x[Vy[(like'(y))(x)]].
(Someone liked everyone.)
Just as with the lambda operator, different formulae can be constructed by binding variables in different orders.
Thus, there are four other well-formed formulae based on the propositional function (like '(y))(x) which parallel the expressions given in (8).
These are given in (9) which again has examples of English sentences that the logical expressions can be used to translate.

153",171,153,6 Quantification,No info,No info,logical quantifier scope representation translation translates logical expression everyone fiona fiona fiona operator quantifier use standard logic backbone predicate calculus complex logical language quantifier language language rule additional rule formula quantifier rule expression type free instance variable type expression type writing syntactic rule formula logician specify contain unbound instance variable quantifier semantics expression fiona equivalent fiona equivalent former expression english everyone fiona ungrammatical equivalent expression many language semantic theory book interpretation natural language rule quantifier formula propositional function expression acceptable ordinary predicate logic quantifier bind instance variable scope quantifier bind distinct free variable propositional function formula propositional function quantifier english sentence translate logical expression someone someone everyone everyone everyone someone someone everyone lambda operator different formula variable different order formula propositional function parallel expression example english sentence logical expression translate
153,"6 Quantification
(9) a.
b.
c.
d.

3y [3x
(Someone liked someone.)
Vy [Vx [(like'(y))(x)]].
(Everyone liked everyone.)
3y [Vx [(like'(y)Xx)]].
(There was someone that everyone liked.)
Vy [3x [(like'(y)Xx)]].
(Everyone was liked by someone.)

Where two formulae differ in the relative orders of quantifiers binding the same variables, they show a difference in the scope of the quantifiers.
Thus, the formulae in (9.a to d) reverse the quantifier scopes of the corresponding formulae in (8).
As there are situations in which different orders of quantifiers change the truth-conditions of a formula, it is necessary to be careful to put them in the right order.
This topic will be taken up in Section 6.4.2, but for the moment look at the logical expressions in (8) and (9) carefully and compare them with their English counterparts.
Where the latter are the same for more than one of the expressions, the relative order of the quantifiers is not truth-conditionally significant.
With the others, the differences in the order in which multiple quantifiers appear in expressions is significant.
Exercise 6.1:
Pair the English sentences in i to iv with one of the LQ expressions in a to h which represents a possible translation into LQ.
i.
Someone liked herself.
ii.
Someone liked Jo and hated Fiona.
iii.
Someone was liked by everyone.
iv.
Everyone gave something to someone.
a.
b.
c.
d.
e.
f.
g.
h.

6.2.2

3x [(like'(jo'))(x)] & (hate'(fiona'))(x).
3x [By [(like'(y))(x)]].
3x[Vy[(like'(y))(x)]].
3x [(like'(jo'))(x) & (hate'(fiona'))(x)].
3x [Vy
Vx [3y
3x [(
Vx [3y [3z

Interpreting LQ

To understand the interpretation of expressions containing quantifiers, we must consider the conditions under which the formulae translating quantified sentences are true.
We have already seen that a sentence like Fiona liked Jo (or more properly the formula it translates into) is true if (and only if) the entity conventionally referred to by the word Fiona is a member of the set of entities denoted by the verb phrase liked
Jo.
Once the entity denoted by Fiona has been identified, therefore, and providing the
154",172,154,6 Quantification,No info,No info,quantification someone someone everyone everyone someone everyone everyone someone formula relative order variable show difference scope quantifier formula reverse quantifier scope formula situation different order quantifier change formula necessary careful put right order topic moment logical expression english counterpart latter expression relative order significant others difference order multiple quantifier expression significant exercise pair english sentence expression possible translation someone someone fiona iii someone everyone everyone someone hate fiona hate fiona understand interpretation expression quantifier condition formula sentence true sentence fiona formula true entity word fiona member entity verb phrase entity fiona
154,"Introducing the logical quantifiers extension of liked Jo is also determined, the truth or falsity of the proposition expressed by the sentence can be assessed.
On the other hand, the utterance of a sentence like Someone liked Jo (in the interpretation with which we are concerned) does not assert that a specific entity is in the extension of the verb phrase, but just states that some entity in the universe of discourse is in that extension.
In other words, if the set denoted by an expression like like'(jo') contains at least one element, then the formula is true, otherwise it is not.
Similarly, the proposition expressed by the sentence Jo liked someone is true if, and only if, there is some entity in the universe of discourse such that Jo liked it (or, equivalently for our purposes, if the extension of was liked by Jo contains at least one element).
On a simple level, one can think about the truth of the propositions expressed by sentences containing someone as being guaranteed if there is a sentence in the object language that contains a name or a definite description in place of the quantified pronoun that can be uttered to make a true statement.
Thus, the truth of the proposition expressed by the sentence Someone liked Jo is guaranteed by that of Fiona liked Jo or Ethel liked Jo or any of the other sentences formed in this way.
This is rather how the formal definition of the semantics of these sentences is given, except that it does not involve the substitution of names or definite descriptions in place of the quantified pronoun (which can give rise to problems in intensional contexts; see Chapters 9 and
10).
The formal interpretation of a quantified formula involves the assignment of different values to the variable bound by the quantifier in the formula and checking the truth or falsity of the propositional function in its scope with respect to the value assignment.
In Chapter 5, the operation of lambda-conversion was discussed in terms of looking at different ways of associating variables with constants in a model.
The truth value of any formula formed by applying a lambda expression of type <e,t> to a constant of type e in L ^ is the same as that of the propositional function in the lambda expression when the abstracted variable is assigned the same value as the constant.
In other words, [Xu [(|>](a)]M8 is equivalent to [(flM-gMM* ( s e e Chapter 5).
The interpretation of a formula containing the quantifier 3 also requires us to look at different assignments of values to variables, except that we may need to look at more than one.
Essentially an existentially quantified formula, 3x [<|>], is true if there is some assignment of values to variables which makes the propositional function, <|>, true.
(10) expresses this formally.
(10)

Truth-conditions for existential formulae: If $ is an expression of type t containing a free occurrence of a variable, u, of type e, then [3u [<|>]]M8 is
1, iff there is some value assignment g', exactly like g except perhaps for the individual assigned to u, such that [§]M<* is 1.

As an example of how this works, consider the interpretation of the L Q formula representing the sentence Someone liked Jo, i.e. 3z[(like '(jo r))(z)].
According to (10), this is true if there is some value that can be assigned to z that makes (like '(jo '))(z) true.
Assume that the model against which we want to assess the truth of the proposition is M2 of Chapter 5 and in particular that the extension of like' is that shown in the diagram in (18) of that chapter.
The interpretation of 3z [(like'(jo'))(z)] with respect to M2 and the value assignment g in (11) requires us to look at value assignments like g! to g4 in (12), which are all exactly like g except for the value
155",173,155,6 Quantification,No info,No info,logical quantifier extension truth falsity proposition sentence hand utterance sentence someone interpretation assert specific entity extension verb phrase state entity universe discourse extension word denoted expression least element formula true proposition sentence someone true entity universe discourse extension least element simple level truth proposition sentence someone sentence object language name definite description place pronoun true statement truth proposition sentence someone fiona ethel sentence way formal semantics sentence substitution name definite description place pronoun rise problem intensional context chapter formal interpretation formula assignment different value variable quantifier formula truth falsity propositional function scope respect value assignment operation term different way variable constant model truth value formula lambda expression type constant type propositional function lambda expression variable value constant word equivalent interpretation formula different assignment value variable formula true assignment value variable propositional function true express existential formula expression type free occurrence variable type value assignment individual work interpretation formula representing sentence someone true value true assume model truth proposition particular extension diagram interpretation respect value assignment value assignment value
155,"6

Quantification assigned to z.
From the extension of like9 in M 2 shown by the diagram (18) in
Chapter 5, we can see that the value assignment ga is the one that shows that 3z
[(like '(jo '))(z)l is true.
This is because g3 assigns the value MAN! to z and the function denoted by like'(jo') in M2 maps this entity onto 1, showing that Jo liked himself.
Hence, since the variable assignment, g3, is exactly like g except for the value assigned to z, [3z [(like '(jo '^(z)7]M2<8 is 1 and we say that g3 satisfies the formula (like '(jo f))(z), because this value assignment makes the formula true.
(11) x y z x l yi z i
X

2

-•MAN2
-•WOMANj
- • WOMAN2

-•CAT
-•DOG
-•CAKE
-•-BOOK

(12)

WOMANX x l yi z i

156

X

2

V

2

•

WOMANX
•

WOMAN2

-•CAKE
-•BOOK z i

X

2

WOMAN 2

-•DOG
-•CAKE
-•BOOK",174,156,6 Quantification,No info,No info,quantification extension diagram value assignment true assigns value man function map entity variable assignment value satisfies formula value assignment formula true womanx womanx woman
156,"Introducing the logical quantifiers

X

WOMAN!
y z

- • WOMAN2 x

WOMAN X l

-•CAT z
X

WOMAN 2
\

CAT
\ i

-•DOG z l

2

-•CAKE

X

2

-•BOOK

\

7-1

CAKE

The interpretation of the universal quantifier follows the same lines, except that here we require that every value assigned to z make the propositional function true.
In other words, the truth of the proposition expressed by the sentence Jo liked everyone on some occasion of utterance is guaranteed, if the propositions expressed by the sentences Jo liked himself and Jo liked Fiona and Jo liked Ethel, and so on, are all true on the same occasion.
The formal interpretation of universally quantified formulae is given in (13).
(13)

Truth-conditions for universal formulae: If $ is an expression of type t containing a free occurrence of a variable, u, of type e, then [ Vu[(()]] M-« is 1, iff there for every value assignment g% exactly like g except perhaps for the individual assigned to u, [c|>]M-8' is 1.

Clearly, the formula Vz [(like'(z)Xjo')] is false with respect to M2 because there at least one value assignment that makes (like'(z))(jof) false; e.g. gi which assigns the value DOG to z and <DOG,MAN!> is not in the denotation of [like '] M2 .
Thus, while an existentially quantified formula is verified by a single value assignment that satisfies the propositional function containing the bound variable, a universally quantified one is falsified by a single value assignment that does not satisfy its propositional function.

157",175,157,6 Quantification,No info,No info,logical quantifier woman woman woman cat cake interpretation universal quantifier line require value propositional function true word truth proposition sentence everyone occasion utterance proposition sentence fiona ethel true occasion formal interpretation formula universal formula expression type free occurrence variable type value assignment individual formula xjo false respect least value assignment jof false assigns value dog dog man denotation formula single value assignment propositional function variable single value assignment satisfy propositional function
157,"6 Quantification

Exercise 6.2:
Work out the truth values of the following formulae with respect to model M3, where this model is exactly like M2 with the addition of the denotation assignments shown below.
For each formula, also give an English sentence that might be translated into it.
F3(exist') = {MAN1,MAN2,WOMAN1,WOMAN2,CAT,DOG,CAKE,BOOK}.
F3(touch') = {<WOMANi,MANi>, <WOMAN1,WOMAN1>,
<WOMAN1,CAT>, <WOMAN1,WOMAN2>, <WOMAN1,DOG>,
<WOMAN!,CAKE>, <WOMAN!,CAKE>, <WOMAN1,BOOK>}.
F3(like') = F2(like') (= (18) of Chapter 5).

Vx [(like'(x)Xx)].
3x [like'(fiona'Xx) & (like'(x))(fiona')].
iii.
Vx [exist'(x)].
iv.
Vx [(touch' (x))(ethel')].
V.
Vx [3y [(like'(x))(y)]].
i.
ii.

6.2.3

Quantification and negation

Before tackling the question of how the logical quantifiers can be incorporated into a theory of natural language semantics (the topic of Section 6.3), let us look briefly at the way the negation operator, ~, interacts with the quantifiers, 3 and V. Given a propositional function like (like '(jo '))(z)> there are four possible formulae that can be constructed using ~, 3 and V, depending on their relative scopes.
(14) gives the relevant LQ expressions and (15) gives sentences in English that can be translated by the respective formulae in (14).
(14)a.
b.
c.
d.

3z [~((like'(jo'))(z))].
Vz [~((like'(jo'))(z))].
~(3z [(like'(jo'))(z)]).
~(Vz [(like'(jo')Xz)]).

(15) a.
b.
c.
d.

Someone doesn't like Jo.
No-one liked Jo.
No-one liked Jo.
Not everyone liked Jo.

Notice that two of the formulae in (14) are taken as translating the same English sentence.
Since the sentence No-one liked Jo is not ambiguous, if the two translations accurately represent its truth-conditional meaning, they must be equivalent, i.e. have the same truth-conditions.
For (14.b) to be true, the interpretation rule in (13) requires that the formula -((like '(jo f))(z)) be true for all values assigned to z.
But the semantics of negation, of course, means that it can be true only if there is no assignment of a value toz that satisfies the propositional function (like '(jo '))(z), i.e. if no-one liked Jo.
The formula ~(Bz [(like '(jo '))(z)])> is true, however, if, and only if, 3k [(like '(jo *))(z)] is false.
Since the latter is only false where there is no value assignment that satisfies
158",176,158,6 Quantification,No info,No info,quantification exercise work truth value formula respect model model addition denotation assignment formula english sentence cat dog cake book touch womani mani cat dog woman cake woman cake book fiona touch ethel quantification negation question logical quantifier theory natural language semantics topic way negation operator quantifier propositional function possible formula relative scope relevant expression sentence english respective formula someone everyone notice formula english sentence sentence ambiguous translation meaning true interpretation rule formula true value semantics negation course true assignment value satisfies propositional function formula true false latter false value assignment satisfies
158,"A compositional approach
(like'(jo'))(z), the formula in (14.c) is true if, and only if no-one actually liked Jo.
(14.b) and (14.c) are, therefore, truth-conditionally equivalent, giving us two ways of representing sentences containing the pronoun no-one: either with the universal quantifier having scope over a negated propositional function (i.e. Vx [-<()]) or with the negation operator having scope over an existentially quantified formula (i.e. ~(3x
It is important to ensure that the relative scopes of the quantifiers and negation in the representation for no-one that is being used are correct: universal before negation or negation before existential.
This is because formulae that have the scopes of the operators reversed have very different interpretations.
Where the existential quantifier has scope over the negation operator, as in (14.a), the formula is true if there is some assignment of a value to x which satisfies ~((like'(jo'))(z)), i.e. there is some element in the universe of discourse that does not like Jo.
Where the negation scopes over a universally quantified formula, as in (14.d), on the other hand, the whole formula is true if, and only if, the formula Vz [(like '(jo '))(z)J is false, i.e. if there is some value assignment to x that does not satisfy (like '(jo f))(z).
These two sets of truth-conditions are the same and so, like (14.b) and (14.c), (14.a) and (14.d) are truth-conditionally equivalent.
However, these truth-conditions are not the same as those for the former.
A single variable assignment that fails to satisfy (like '(jo '))(z) which is sufficient to guarantee the truth of 3z [~((Hke'(jo'))(z))] and ~(Vz
[(like'(jo'))(z)]) is not sufficient to guarantee the truth of \/z [~((like'(jo'))(z))] and
~(3z [(like'(jo'))(z)]) which require every value assignment to fail to satisfy the propositional function.
Hence, (14.a) (and (14.d)) may be true in models in which
(14.b) and (14.c) are not and so the formulae in (14.a) and (14.d) are not truth-conditionally equivalent to those in (14.b) and (14.c).
Intuitively this is the correct result, since the formula that translates No-one liked Jo may be false even though the formula that translates Someone doesn 't like Jo is true.
Relative scope is thus semantically significant and care must be exercised when translating sentences that contain negatively quantified noun phrases.
6.3

A compositional approach

The previous section gives an introduction to the logical quantifiers, but does not do so as part of a compositional theory of natural language semantics.
No translation rules from English to LQ have been given and there has been no attempt to analyse more complex noun phrases involving the quantifiers.
This is remedied in this section where a type-theoretic analysis of NPs is given that follows Richard Montague's approach.
As we shall see, this analysis is general enough to allow the translation and interpretation of most universally and existentially quantified noun phrases in
English.
6.3.1

Translating quantifier pronouns

In order to simplify matters, let us first work out a way of translating sentences containing quantifier pronouns in subject position like those in (16) in line with their syntactic structure.
Obviously, the first thing we need to do is add a new syntactic rule to the grammar fragment G2 that allows a noun phrase to be rewritten as a pronoun.
159",177,159,6 Quantification,No info,No info,compositional approach formula true equivalent way sentence pronoun universal quantifier scope propositional function negation operator scope formula important relative scope quantifier negation representation correct universal negation negation existential formula scope operator different interpretation existential quantifier scope negation operator formula true assignment value satisfies element universe discourse negation scope formula hand whole formula true formula false value assignment set equivalent former single variable assignment sufficient guarantee truth hke sufficient guarantee truth value assignment satisfy propositional function true model formula equivalent correct result formula translates formula someone true relative scope significant care sentence noun phrase compositional approach previous logical quantifier part compositional theory natural language semantics translation rule english attempt analyse complex noun phrase quantifier remedied analysis np richard montague approach analysis general translation interpretation noun phrase english translating quantifier pronoun order simplify matter way sentence quantifier pronoun subject position line syntactic structure new syntactic rule grammar fragment noun phrase pronoun
159,"6 Quantification
This is given in (17.a) and with the addition of the pronouns in (17.b) to the lexicon, we can now analyse the sentence in (17.a) as having the structure in (18).
(16) a.
b.
c.

Everyone liked Jo.
Someone sang.
No-one laughed.

(17) a.
b.

27G 2 :NP->Pro.
Pro = {everyone, someone, no-one, everything, something, nothing, nobody}.

(18)

Everyone

According to the previous section, the translation of sentence (16a) into LQ is equivalent to the formula in (19):
(19) Vx [(like'(jo'))(x)].
Assuming that proper names are still translated as individual constants (an assumption that will be revised in Section 6.3), the translation of the VP in (18) is (20).
(20)

VP=»like'(jo').

The rule of functional application requires the translation of the pronoun everyone to combine with the translation in (20) to give an expression that is equivalent to (19).
There are two ways in which VP' and Pro' may be combined: either Pro' is an argument of VP' or VP' is an argument of Pro'.
As we saw in Section 6.1 above, the pronoun cannot be translated into an expression with the type of an entity and so cannot serve as the argument of VP.
Hence, it must denote a function from VP denotations to sentence denotations, and so have the type assignment in (21).
(Notice that this type was proposed for conjoined subject NPs at the end of Chapter 5.)
160",178,160,6 Quantification,No info,No info,quantification addition pronoun lexicon analyse sentence structure everyone someone everyone someone everything nothing nobody everyone previous translation sentence equivalent formula proper name individual constant assumption translation rule functional application translation pronoun everyone translation expression equivalent way pro pro argument argument pro pronoun expression type entity argument function denotation sentence denotation type assignment notice type subject np end
160,"A compositional approach
(21)

T YPE(Pro) = «e,t>,t>.

The type assignment in (21) requires the translation rule for basic sentences to be revised to allow the subject to act as a functor over the VP translation.
The appropriate revision appears in (22).
(22)

T1G2: S =» NP'(VP').

As we have seen, the translation that is assigned to the sentence Everyone likes
Jo is truth-conditionally equivalent to the formula in (19).
Assuming that this equivalence follows from A,-conversion, we may apply this rule backwards to arrive at the translation of the unconverted formula and hence recover the translation of the pronoun everyone.
Thus, from (22) we can infer the schematic conversion in (23.a), since the expression like '(jo') is the translation of the VP.
To get the translation of the pronoun we can replace this expression in the formula in (19) by a predicate variable to get the propositional function in (23.b).
As this expression is of type t and contains a variable, P, of type <e,t>, we can abstract on this to obtain the expression in (23.c) which is of type «e,t>,t>, the type required for subject NPs.
The resulting expression provides an appropriate translation of the pronoun everyone and the application of this expression to the VP translation like '(jo') gives (23.d) which can be X-converted into
(19), as required.
(23) a.
b.
c.
d.

Pro'(like'Go'))
» Vx [(like'Go')Xx)].
Vx[P(x)].
XP [Vx [P(x)]].
XP [Vx [P(x)]](like'Go'))
» Vx [(like'Go')Xx)].

(typet)
(type «e,t>,t>)

Exercise 6.3:
Using the sentences in (16.b) and (16.c), provide translations for the pronouns someone and no-one along the lines of that given for everyone above.
The domain of denotations for expressions with the type assigned to quantifier pronouns in (21) (and other quantified noun phrases) is the set of functions from sets of entities (VP extensions) to truth values (S extensions), as shown in (24).
We may thus think of a QNP as denoting a function that maps the extension of a VP (a characteristic function) onto the value 1 if it satisfies the property expressed by the quantifier, and 0 otherwise.
Since a function from some denotation type onto the truth values is a characteristic function, another way of defining a set, QNPs are analysed as denoting sets of sets of entities in the model.
(24) a.

D<<et>tt> = Ey*w> = {0,1}«01>A>.

161",179,161,6 Quantification,No info,No info,compositional approach ype pro type assignment translation rule basic sentence subject act functor translation appropriate revision translation sentence everyone equivalent formula equivalence rule translation unconverted formula recover translation pronoun everyone infer schematic conversion expression translation translation pronoun expression formula predicate variable propositional function expression type variable type abstract obtain expression type type subject np expression appropriate translation pronoun everyone application expression translation pro typet type exercise sentence translation pronoun someone line everyone domain denotation expression type quantifier pronoun noun phrase function entity extension truth value extension qnp function map extension characteristic function value satisfies property quantifier function denotation type truth value characteristic function way qnps denoting entity model
161,"6 Quantification b.

A

{1,0}

As an illustration, consider the denotation of the pronoun someone.
As shown in the answer to Exercise 6.3, this translates into an expression AP [Bx [P(x)]], again of type «e,t>,t>.
According to the interpretation given to the existential quantifier in
(10), the translation of the pronoun combines with a VP translation to give a true formula, if the extension of VP' contains at least one element.
Hence, [A,P [3x
[P(x)]]]M« is that function that maps [VP']Ms onto 1 if [VP']Ms does not denote the empty set and onto 0 if it does.
Hence, we may say that [XP [3x [P(x)]]]M'« is the set of all subsets of A (the universe of discourse) that are non-null.
In set-theoretic terms, this can be represented as (25.a).
(25)

[X? [3x [P(x)]]]M'«= {X c A I X

Exercise 6.4:
What are the extensions of the translations of everyone and no-one in set-theoretic terms?

6.3.2

Complex NPs

The translation and interpretation of quantifier pronouns presented above provides the basis of an approach to the treatment of quantified noun phrases of all sorts.
It needs, however, to be extended to cover more complex QNPs like those in (26.a) to (26.c) and to bring out the fact that the quantifier pronouns ending in -one are applicable only to human entities and those ending in -thing (primarily) to non-human ones, as in (26.d) and (26.e).
(26) a.
b.
c.
d.
e.

Every student liked Jo.
A lecturer screamed.
No woman laughed.
No-one moved.
Nothing moved.

Information is conveyed in these sentences by the common noun in the subject
NP and so this must be represented in their translations.
To incorporate the noun translations, we first need to know their type.
Common nouns, like verb phrases, extensionally denote sets of entities: sets that consist of just those entities of which it is true to say That is a N, for any common noun N. Thus, the extension of a noun like chair is the set of all chairs, that of student is the set of all students, and so on.
The
162",180,162,6 Quantification,No info,No info,quantification illustration denotation pronoun someone answer exercise expression type interpretation existential quantifier translation pronoun translation true formula extension least element function denote empty set subset universe discourse term exercise extension translation everyone term complex np translation interpretation quantifier pronoun basis approach treatment noun phrase sort extended cover complex qnps fact quantifier pronoun applicable human entity student lecturer woman nothing information sentence common noun subject translation noun translation type common noun verb phrase denote entity set entity true common noun extension noun chair set chair student set student
162,"A compositional approach type of a common noun must, therefore, be that of a set-denoting expression, i.e.
<e,t>.
Given this type assignment, the translations of sentences like those in (26) is based on two open formulae which contain instances of the same variable: one formula derived by applying the translation of the VP to a variable and the other derived by applying the translation of the common noun to an instance of the same variable.
For example, the translation of the sentence Every student liked Jo in (26.a) is derived from some combination of the open formulae student'(x) and (like '(jo '))(x).
The free variable in the open formulae must be bound by a quantifier appropriate to the determiner and the two open formulae must be combined by some propositional connective, &, v, -» or <->, to form a well-formed formula with no free variables.
The question of how the two open formulae are connected can be answered by considering the truth-conditions associated with particular sentences.
For example, the formula associated with the sentence in (26.a) is true if everything in the model that is a student also liked Jo.
This interpretation can be made more explicit by paraphrasing (26.a) as the semi-formal English sentence in (27.a) which can be translated directly into LQ as the formula in (27.b).
(27) a.
b.

For every x, if x was a student, then x liked Jo.
Vx [student'(x) -> (like'(jo'))(x)].

Given the interpretation rule for the universal quantifier, the formula in (27.b) is true as long as every value assignment to* makes the formula student'(x) -» (like '(jo '))(x) true.
By the semantics of material implication, this is the case if every constant instantiating the variable in a value assignment is in the extension of like '(jo'), if it is also in the extension of student'.
In other words, the formula in (27.b) is true provided
[student']M>& is a subset of [like'(jo')]M*.
This situation can be represented by the diagram in (28) where the main box represents the set of entities in the model.
(28)

Every student liked Jo

[student']M'g

163",181,163,6 Quantification,No info,No info,compositional approach type common noun expression type assignment translation sentence open formula contain instance variable formula translation variable translation common noun instance variable translation sentence student combination open formula student free variable open formula quantifier appropriate determiner open formula propositional connective form formula free variable question open formula particular sentence formula associated sentence true everything model student interpretation explicit english sentence formula student student interpretation rule universal quantifier formula true long value assignment formula student true semantics material implication constant variable value assignment extension student word formula true student subset situation diagram main box entity model student student
163,"6 Quantification

To get the translation of a noun phrase like every student we can apply backwards lambda-conversion to (27.b).
The revised translation rule for basic sentences in (22.a) requires this formula to be derived by the application of the noun phrase translation to that of the verb phrase.
Since the VP translation is like'(jo') (of type <e,t>), we can replace this expression in (27.b) with a predicate variable to get an open formula and then abstract on this to get an expression of type «e,t>,t>, as is done in (29).
This yields (29.d) as the translation of the NP every student.
(29) a.
b.
c.
d.

NP'(VP')
» Vx [student'(x) -^ (like'(jo'))(x)].
NP'(like'(jo'))
» Vx [student'(x) -> (like'(jo'))(x)].
XP[Vx [student' (x) ->P(x)]](like'(jo'))
» Vx [student'(x) -> (like'0o'))(x)].
NP => XP [Vx [student'(x) -> P(x)]].

We have not, of course, completed the analysis of the example sentence, as we still need to show how the NP translation in (29.d) is obtained.
Syntactically the phrase every student is made up of a determiner (every) followed by a noun (student) so the rule in (3O.a) needs to be added to the grammar G2, as well as a list of determiners to the lexicon (3O.b).
(30) a.
b.

28G 2 :NP->DetN.
Det —> {every, a, some, no,...}.

As we have seen, quantified NPs have the type «e,t>,t> and nouns have the type
<e,t>.
This means that determiners must have a type that takes a noun expression into a noun phrase expression, i.e. « e , t > , « e , t > , t » , yielding the translation rule in (31) for the rule in (30.a).
(31)

T28G 2 :NP=>Det'(N').

Since we are treating Det' as a functor over N', we can apply backwards X-conversion to (29.d).
To get the translation of the determiner every, the translation of the common noun in (29.d) is replaced by another predicate variable, Q, which again is bound by the lambda operator, as in (32.c).
This gives (32.d) as the appropriate translation for the determiner every.
(32) a.
b.
c.
d.

Det'(N')
»>JP[Vx [student'(x) -> P(x)]].
Det'(student')
»XP[Vx [student'(x) ->P(x)]].
XQ [XP [Vx [Q(x) -> P(x)]]](student')
»^P[Vx [student'(x) ->P(x)]].
every =» XQ [XP [Vx [Q(x) ->P(x)]]].

The analysis tree for (26.a) is shown in (33) with the translations of the constituent phrases shown as usual on the nodes.
Applying lambda-conversion to the translation of the S node gives the equivalent formula in (27.b), as readers can check for themselves.
164",182,164,6 Quantification,No info,No info,quantification translation noun phrase student translation rule basic sentence formula application noun phrase translation verb phrase translation type replace expression predicate variable open formula abstract expression type yield translation student student student student student student course analysis sentence show translation phrase student determiner noun student rule need grammar well list determiner lexicon detn det np type noun type mean determiner noun expression noun phrase expression yielding translation rule rule det det functor translation determiner translation common noun predicate variable lambda operator appropriate translation determiner det student det student student student student analysis tree translation constituent phrase usual node translation equivalent formula reader check
164,"A compositional approach

(33)

(XQ [XP [Vx [Q(x) -> P(x)]]](student'))(like'(jo'))

XQ [XP [Vx [Q(x) -> P(x)]]](student')

Det
XQ [XP [Vx [Q(x) -> P(x)]]]

N student'

Vt[+FIN]
Hke >

NP jo' every student liked

Npr jo'

Jo

The translations of some (or a) and no are determined in the same fashion, but there is a difference in the way the open formulae formed from the noun and VP translations are connected.
The existential sentence in (26.b) translates into a formula that is true if, and only if, there is something that was a lecturer and that something sang.
Hence, a conjunction is used in place of the material implication of the universally quantified formula.
The force of this may be brought out by the semi-formal English sentence in (34.a) and its translation into LQ in (34.b).
(34) a.
b.

For some x, x was a lecturer and x screamed,
3x [lecturer' (x) & scream'(x)].

According to the truth-conditions for formulae containing 3, given in (10), above,
(34.b) is true if (and only if) there is at least one entity in A that satisfies both lecturer* (x) and scream '(x).
Set-theoretically, this requires that the intersection of the extension of the common noun in the subject NP and that of the verb phrase is not empty, a situation that can be represented by the diagram in (35).

165",183,165,6 Quantification,No info,No info,compositional approach student student det hke student npr translation fashion difference way open formula noun translation existential sentence true lecturer conjunction place material implication formula force english sentence translation lecturer lecturer scream formula true least entity satisfies lecturer scream intersection extension common noun subject verb phrase empty situation diagram
165,"6 Quantification
(35)
A lecturer screamed

[lecturer']M'S

[scream']M>8

As before, it is possible to get to the translation of the NP a lecturer and that of the determiner by applying lambda-conversion backwards.
The steps are shown in
(36).
(36.c) shows the translation of the NP a lecturer applied to the VP translation and (36.f) that of the determiner a applied to its head noun and then to the VP translation.
This leaves (36.g) as the translation of the determiner a.
(36) a.

NF(VF)
» 3x [lecturer*(x) & scream'(x)].
b.
NP'(scream')
» 3x [lecturer'(x) & scream'(x)].
c.
XV [3x [lecturer'(x) & P(x)]](scream')
» 3x [lecturer'(x) & scream'(x)].
d.
(Det'(N')Xscream')
» X? 0x [lecturer'(x) & P(x)]](scream').
e.
(Def (lecturer' ))(scream')
» X? [3x [lecturer'(x) & P(x)]](scream').
f.
(XQ ftP [3x [Q(x) & P(x)]]](lecturer'))(scream')
» XV [3x [lecturer'(x) & P(x)]](scream').
g. a ^ Q f t P [ 3 x [ Q ( x ) & P ( x ) ] ] ] .
In translating NPs, one must be careful to associate the correct connective with the correct quantifier, as a mistake gives rise to a formula with very different truth-conditions.
Replacing & by -> in (34.b), for example, yields (37.a) which, by the truth-conditions of material implication, is true even if there is nothing in the extension of lecturer', i.e. a lecturer screamed expresses a true proposition even if there are no lecturers.
Replacing -» by & in (27.b), on the other hand, yields the
166",184,166,6 Quantification,No info,No info,quantification lecturer lecturer possible translation lecturer determiner step show translation lecturer applied translation determiner head noun translation leaf translation determiner lecturer scream lecturer lecturer lecturer scream det xscream lecturer def lecturer lecturer ftp lecturer lecturer np careful associate correct connective correct quantifier mistake rise formula different yield material implication true nothing extension lecturer lecturer express true proposition hand yield
166,"A compositional approach formula in (37.b) which states that everything in the model was a student that liked Jo, which is not what the sentence Every student liked Jo means.
(37) a.
b.

3x [lecturer'(x) -> scream'(x)].
Vx [student' (x) & (like' Go' ))(x)].

Exercise 6.5:
Give a translation of the NP no dog and of the determiner no, following the steps used above.
NB: There are two possible translations for no. Make sure that the connective used is the right one for the translation.
Exercise 6.6:
Translate the following sentences into LQ, giving for each one both the logical expression as it is generated by the translation rules and its equivalent lambda converted form.
i.
Every lecturer sang and laughed.
ii.
Some student didn't sing.
iii.
If no student sang, then no lecturer screamed.
In this way, sentences containing quantified noun phrases in subject position can be translated compositionally, but what sort of thing does a quantified noun phrase denote in a model?
As with the quantifier pronouns, quantified NPs have the type
«e,t>,t> and so denote functions from sets to truth values or, equivalently, sets of sets of entities.
Because of the interaction between the extension of the common noun in the NP and that of the VP, these functions are more complex than those associated with the quantifier pronouns.
The diagrams in (28) and (35) give a clue as to the denotations of universally and existentially quantified noun phrases.
In (28), the diagram representing the truth-conditions for the sentence Every student liked Jo shows that the extension of the common noun, student', must be contained in that of the VP, like'(jo*).
We can, therefore, think of the noun phrase every student as (indirectly) denoting a function that maps every set of entities that contains the set of students onto 1 and every other set onto 0.
In other words, the phrase denotes the set of all supersets of [student']™*, as shown in (38.a), which generalises to (38.b) for all noun phrases containing the determiner every.
(38) a.
b.

{ X c A l [student']M-*e X}.
every N denotes { X c A l [N' }** c X ) .

The extension of every student is called the universal sublimation of the property of being a student.
This identifies the set of all sets of which every student is a member, as represented by the diagram in (39) where the central circle represents the extension of student' (or the relevant common noun), each Pn represents the extension of some other property and the whole thing represents the extension of XP /VJC
[student'(x)-*P(x)]].
167",185,167,6 Quantification,No info,No info,compositional approach formula state everything model student sentence student lecturer scream student exercise translation dog determiner step possible translation sure connective right translation exercise translate sentence logical expression translation rule equivalent lambda form lecturer student iii student lecturer way sentence noun phrase subject position noun phrase denote model quantifier pronoun np type denote function truth value set entity interaction extension common noun function complex associated quantifier pronoun diagram give clue denotation noun phrase diagram sentence student show extension common noun student noun phrase student function map set entity set student word phrase supersets student noun phrase determiner student extension student universal sublimation property student identifies set student member diagram central circle extension student relevant common noun extension property whole extension student
167,"6

Quantification

Universal sublimation of [student']1""

As can be seen from (35), a formula translating a sentence with an existential subject NP is true if the extension of the common noun in the subject NP has a non-null intersection with the extension of the VP.
Thus, the extension of XP [3x
[lecturer'(x) & P(x)]], is a function that maps every set in the model onto 1 if its intersection with [lecturer']™* contains at least one element.
The extension of the NP a lecturer is therefore given the set-theoretic definition in (40) which is read as 'the set of all subsets of A that have a non-null intersection with the set denoted by lecturer"".
(40)

{ X c A I X n [lecturer'}™*

(40) is called the existential sublimation of the property of being a lecturer, since it picks out the set of all properties that some lecturer has.
This can be represented by the diagram in (41) where again the central circle represents the extension of lecturer' in the model, each Pn represents the extension of some other property and the whole thing represents the extension of a lecturer.
We will return to this sort of representation for NP denotations in Section 6.6.

168",186,168,6 Quantification,No info,No info,quantification universal sublimation student formula translating sentence existential subject true extension common noun subject intersection extension extension lecturer function map model intersection lecturer least element extension lecturer subset intersection denoted lecturer lecturer existential sublimation property lecturer pick property lecturer diagram central circle extension lecturer model extension property whole extension lecturer return sort representation denotation
168,"A compositional approach
Existential sublimation of [lecturer']1""

Exercise 6.7:
What is the set-theoretic definition of the extension of no dog?
How could the negative sublimation of dog be represented diagrammatically?

6.3.3

Nominal modifiers

The approach to NP translation and interpretation discussed above is general enough to allow for the introduction of attributive modifiers into noun phrases.
In English, nouns may be modified by adjectives, prepositional phrases or relative clauses.
The proper analysis of PP modification requires an analysis of the meaning of prepositions, something that is not discussed in this book and so, in this section, we look only at how certain simple attributive adjectives can be introduced into our grammar fragment, leaving the analysis of relative clauses as an exercise for the reader.
Syntactically, attributive adjectives like happy and fat combine with a common noun to give a common noun phrase (CNP) (equivalent to N1 in X-bar theory).
Since more than one adjective (or other nominal modifier) can appear with a single noun, it is customary to adopt the recursive rule in (42.a) which distinguishes attributive adjectives from predicative ones by the use of a feature [PRD], the former being negatively marked for this property.
This requires a slight alteration of the grammar
169",187,169,6 Quantification,No info,No info,compositional approach existential sublimation lecturer exercise extension dog negative sublimation dog nominal modifier approach translation interpretation general attributive modifier noun phrase english noun adjective prepositional phrase relative clause proper analysis modification analysis meaning preposition book certain simple attributive adjective grammar fragment analysis relative clause exercise reader attributive adjective happy fat common noun common noun phrase cnp equivalent theory adjective nominal modifier single noun customary adopt recursive rule distinguishes attributive adjective predicative use feature former property slight alteration
169,"6 Quantification to realise CNPs as simple nouns and allow determiners to combine with CNPs rather than with nouns directly.
(42.d) gives a list of some attributive adjectives.
(42) a.
b.
c.
d.

29G2: CNP -> A[-PRD] CNP.
30G 2 :CNP->N.
28'G2:NP ->DetCNP.
A[-PRD] = {happy, sad, silly, fat}.

Since determiners, of type « e , t > , « e , t > , t » , combine with CNPs to give NPs,
CNPs must have the same type as a common noun, i.e. <e,t>, so that the translation of the rule in (42.b) must be identical to the translation of the noun.
This means that the type of an attributive adjective must be «e,t>,<e,t» as it takes a one-place predicate into a one-place predicate.
But how should adjectives like happy be translated?
We could, of course, simply write it as happy' and let the denotation assignment function in each model specify for each property the set of happy entities with that property.
However, this would miss two things.
In the first place, it would lose the relationship between the predicative use of the adjective as in Every student is happy and its attributive use as in Every happy student.
Secondly, we want to capture the fact that every happy student is a student (and indeed that every happy student is happy).
This does not necessarily follow if each model specifies for each property what set results from applying the function denoted by an attributive adjective to that property.
Thus, if we take the set of students in a model to be {MANi,
WOMAN2}, for example, it is possible to define [happy']M& as a function that maps this set into {WOMAN^DOG}.
In other words, it might be possible for some model to pick out a set of happy students that are not actually students!
Hence, we need to ensure in the interpretation that the set of happy students is a subset of the set of students.
To do this, we take as a starting point the interpretation of the predicative use of such adjectives from Chapter 3.
There, sentences like Fiona was happy were assigned the same logical structure as sentences containing intransitive verbs like Fiona sang, i.e. they are translated as one-place predicates combined with an individual constant.
In Ltype (and LQ, of course), this gives predicative adjectives the type of a one-place predicate, <e,t>, with sets of entities as their extension.
Using this type assignment
(and assuming that the copula is pleonastic), the sentence Every student was happy is translated into LQ as (43), a formula that is true provided that the set of students is a subset of the set of happy entities.
(43)

Vx [student'(x) -> happy'(x)].

A sentence like Every happy student sang, on the other hand, must translate into a formula that is true if, and only if, the set of happy students is a subset of the set of singers, or, more explicitly, if the set of entities that were both happy and students is a subset of the set of entities that sang.
A formula that has precisely these truth-conditions appears in (44.a).
If we assume that the equivalence between the formula in (44.a) and the one translating every happy student sang derives from
X-conversion, the rule can be applied backwards to work out the translations of the constituents of the sentence.
(44.b) shows a ^-expression applied to the VP translation singy which is equivalent to the formula in (44.a).
170",188,170,6 Quantification,No info,No info,quantification cnps simple noun determiner cnps noun list attributive adjective cnp cnp detcnp happy sad silly fat determiner type combine cnps np cnps common noun translation rule identical translation noun mean type attributive adjective predicate predicate adjective happy happy denotation assignment function model specify property happy entity property thing first place relationship predicative use adjective student happy attributive use happy student capture fact happy student student happy student happy model property set result function attributive adjective property student model mani possible happy function map word possible model pick happy student student interpretation happy student subset set student point interpretation predicative use adjective sentence fiona happy logical structure sentence intransitive verb fiona predicate individual constant ltype course predicative adjective type predicate set entity extension type assignment copula pleonastic sentence student happy formula true set student subset happy entity student happy sentence happy student hand formula true happy student subset set singer entity happy student subset entity formula equivalence formula happy student derives rule backwards work translation constituent sentence applied translation singy equivalent formula
170,"A compositional approach
(44) a.
b.

Vx [(happy'(x) & student'(x)) -* sing'(x)].
XP [Vx [(happy'(x) & student'(x)) -> P(x)]](sing').

As we have seen, the translation of every is the expression in (32.d) so that (44.b) must be equivalent to the expression derived by applying XQ [XP /VJC [Q(X) -» P(x)]]] to the translation of the CNP happy student as shown in (45.a) and (45.b).
Because
CNPs translate into one-place predicates, the expression translating happy student must be of type <e,t>.
It must also contain the propositional function happy*{y) & student'(y) that is factored out of (44.b) when the translation of the determiner is removed.
This propositional function can, of course, be turned into an expression of the appropriate type by abstracting on the free variable y, as in (45.c).
This is, therefore, the translation of the common noun phrase happy student.
(45) a.
b.
c.
every CNP
=> XQ [XP [Vx [Q(x) ->P(x)]]](CNP').
» XP [Vx [(happy'(x) & student'(x)) -> P(x)]].
happy student
=> Xy [happy'(y) & student' (y)].

We can assume that the expression in (45 .b) results from the functional application of the translation of the adjective to that of the noun.
The former can thus be restored by replacing the translation of the noun, student*, by another predicate variable, Ph and abstracting on this to give the expression in (46).
This expression is of type
«e,t>,<e,t» and denotes a function that maps the set of entities denoted by the common noun to the set of entities which appear in the intersection of this set with the set of entities denoted by the predicative adjective happy \ This interpretation guarantees that every happy student is happy and every happy student is a student.
(46) happy => XP,[Xy [happy'(y) & P,(y)]].

Attributive adjectives like happy' with the same general translation and interpretation as shown in (46) are often referred to as intersective adjectives and a general rule may be written that takes the predicative adjective translation and outputs its attributive counterpart.
This is given in (47) and, as with happy, the translation yields an expression that combines with that of a common noun to yield an expression that picks out the set of entities that appear in the extensions of the common noun and the related predicative adjective.
(47)

If a is a predicative adjective with translation a\ then its attributive counterpart has a translation XP [Xx [a\x) & P(x)]].

Not all adjectives are intersective, however, and even adjectives like happy do not always have the interpretation captured by the rule in (47).
The interpretation of happy student discussed above entails that any entity in its extension is happy in some absolute sense.
However, there are situations where this is not the appropriate interpretation.
A sentence like The happy student was not a happy cook is not
(necessarily) contradictory, as is predicted from the translation of happy defined by
(47).
Furthermore, the translation of a sentence like Jo was a happy student, but an unhappy lecturer given by the above rule makes incorrect predictions about the entailments of this sentence.
The appropriate translation is something like
171",189,171,6 Quantification,No info,No info,compositional approach happy student happy student sing translation expression equivalent expression translation cnp happy student cnps translate predicate expression happy student propositional function happy student factored translation determiner propositional function course expression appropriate type free variable translation common noun phrase happy student cnp cnp happy student happy student happy student expression functional application translation adjective noun former translation noun student predicate variable abstracting expression expression type denotes function map set entity common noun entity intersection entity predicative adjective happy interpretation guarantee happy student happy happy student student happy happy attributive adjective happy general translation interpretation intersective adjective general rule predicative adjective translation output attributive counterpart happy translation yield expression common noun yield expression pick entity extension common noun predicative adjective predicative adjective translation attributive counterpart translation adjective intersective adjective happy interpretation rule interpretation happy student entail entity extension happy absolute sense situation appropriate interpretation sentence happy student happy cook contradictory translation happy translation sentence happy student unhappy lecturer rule incorrect prediction entailment sentence appropriate translation
171,"6 Quantification
(happy'(jo*) & student'(jo')) & -(happy'(jo') & lecturer'(jo')).
Such a formula can only be true if Jo was a student and was happy (in some absolute sense), but was not a lecturer.
The English sentence, however, conveys the information that Jo is a lecturer, but unhappy in that role, whereas he is happy in the role of a student.
This interpretation requires the extension of happy to depend on that of the common noun with which it combines and is thus not simply intersective.
Thus, while all happy students are students, there is an interpretation in which they are not happy in any absolute sense, but only happy as students.
Many adjectives like small, good, skilful and so on, have the same properties as this use of happy, but others like alleged and fake are even more restricted in their entailments.
For example, a fake gun is not a gun and an alleged murderer is not necessarily a murderer.
The interpretation of all these adjectives goes beyond the extensional semantics that has so far been developed and requires a definition of intensionality.
Although the apparatus for dealing with intensional expressions is introduced in Chapter 10, the proper treatment of intensional adjectives remains controversial and so will not be further discussed.
The interested reader is encouraged to pursue the references cited at the end of this chapter for an idea of how complex adjective interpretation may be.
The analysis of intersective adjectives given here is just a beginning, but it gives a basis from which to start.
* Exercise 6.8:
Devise a way of translating simple relative clauses like that in the following sentence that guarantees that a student that liked Jo, liked Jo and a student that liked Jo, was a student.
i.

6.4

A student that liked Jo kicked the cat.

Proper names and definite descriptions

We have now seen how quantified NPs can be treated as having the type «e,t>,t>, but what about proper names and definite descriptions?
Proper names clearly pick out individual entities in the universe of discourse and so their assignment to type e seems the most reasonable assumption to make, since they thereby directly denote unique entities in the model.
However, if this analysis is maintained, an imbalance in the treatment of noun phrases is created that is not represented in syntax.
In English, quantified noun phrases and proper names have the same syntactic distribution, which is, of course, why they are assigned to the same syntactic category, NP.
But the difference in the apparent denotations of proper names and QNPs implies a difference in syntactic category, since no syntactic category may be assigned more than one type without giving rise to unacceptable ambiguity in the translation language.
If this is done, however, then clearly different syntactic rules have to be written for expressions of the same category according to whether they contain QNPs or proper names, thus missing the obvious syntactic generalisation that they have the same distribution.
Richard Montague's solution to this dilemma is to give both proper names and quantified NPs the same type, thus allowing them to be treated the same syntactically.
Since, as we have seen, QNPs cannot have the type of an entity, the
172",190,172,6 Quantification,No info,No info,quantification happy student happy lecturer formula true student happy absolute sense lecturer english sentence information lecturer unhappy role happy role student interpretation extension happy common noun intersective happy student student interpretation happy absolute sense happy student many adjective small good skilful property use happy others fake entailment fake gun gun murderer interpretation adjective extensional semantics intensionality apparatus intensional expression proper treatment intensional adjective controversial interested reader pursue reference end idea complex adjective interpretation intersective adjective beginning basis exercise devise way simple relative clause sentence guarantee student student student student kicked cat proper name definite description np type proper name definite description proper name individual entity universe discourse assignment type reasonable assumption unique entity model analysis imbalance treatment noun phrase syntax english noun phrase proper name syntactic distribution course syntactic category difference apparent denotation proper name qnps difference syntactic category syntactic category type rise unacceptable ambiguity translation language different syntactic rule expression category qnps proper name obvious syntactic generalisation distribution richard montague solution dilemma proper name np type allowing qnps type entity
172,"Proper names and definite descriptions type of Npr must be raised to the type of a QNP.
At the same time, however, we must make sure that the distinctive property of proper nouns, that, in a given context, they name a specific entity, is not lost.
As we have seen before, the translation into L ^ of the sentence Fiona sang is sing'(fiona ')> which is true only in those situations in which the set of singers includes some specific entity called Fiona.
Simply changing the type of proper names to
«e,t>,t> and translating the sentence as fiona'(sing') obscures this simple interpretation and requires a complex interpretation of the constant fiona' to get the truth-conditions right.
However, we can get a more transparent translation for Fiona by applying backwards lambda-conversion to the formula that best provides the semantics for the sentence.
Thus, assuming that proper names have the same type as
QNPs, i.e. «e,t>,t>, the formula sing '(fiona') must be equivalent to an expression where the NP translation is functionally applied to sing', the translation of the VP.
Replacing the latter by a predicate variable we get the propositional function P(fiona') which may be turned into an expression of type «e,t>,t> by abstraction to give the translation of Fiona in (48.a) which denotes the set in (48.b), i.e. the set of all sets of entities of which Fiona is a member.
(48) a.
b.

[XP [P(fiona')]]M8
{ X c A l [fiona']M'Se X}.

As (48 .b) shows, the proper name Fiona denotes a set of sets like the other noun phrases dealt with so far in this chapter.
In this case, the NP denotes the set of all sets that contain the entity denoted by the constant fiona'.
That is, instead of picking out an entity directly, a proper name picks out the properties that the entity has.
This is shown in the diagram in (49) which represents the individual sublimation of Fiona where there is just one thing in the intersection of all the sets Pn, i.e. Fiona herself.
At this point, it may be objected that just looking at the properties individuals have may not be sufficient to identify a single individual uniquely.
For example, the model may contain two distinct entities which both have the same name, are both female, both with red hair and both students studying artificial intelligence at the same university.
If they both have the same likes and dislikes as well, then how can just looking at the properties they have tell them apart?
The answer is that every distinct entity has one property not shared by any other individual in the model and this is the property of being identical to itself.
This property, which may be represented in LQ by the expression Xx[x = c] where c is some individual constant, always denotes the unit set consisting only of the individual denoted by c (for example, he [x = fiona'] denotes the set {WOMAN2} in M3).
Hence, any individual sublimation may be reduced to a unique individual in the model and so may be taken as equivalent semantically to an individual constant.
NPs, whether quantified or proper, may therefore be treated in exactly the same way both syntactically and semantically, while still maintaining the differences between them.

173",191,173,6 Quantification,No info,No info,proper name definite description type npr type qnp time sure distinctive property proper noun context name specific entity translation sentence fiona fiona true situation singer specific entity fiona type proper name translating sentence fiona sing simple interpretation complex interpretation constant fiona transparent translation fiona applying formula best semantics sentence proper name type qnps formula sing fiona equivalent expression translation sing translation latter predicate variable propositional function fiona expression type abstraction translation fiona denotes set entity fiona member fiona fiona proper name fiona denotes set noun phrase denotes set contain entity constant fiona picking entity proper name property entity diagram individual sublimation fiona intersection fiona point property individual sufficient single individual model distinct entity name female red hair student artificial intelligence university property distinct entity property individual model property identical property expression individual constant unit individual fiona denotes individual sublimation unique individual model equivalent individual constant np proper way difference
173,"6 Quantification
Individual sublimation of [fiona']M

While an expression like XP [P(c)]f where c is an individual constant, translates an expression in English, the individual constant, c, is itself the translation of no
English expression.
No expression in English (or, by hypothesis, any other human language) directly denotes an entity.
All reference is done via reference to the set of properties that a particular entity has.
Amongst other things, this means that definite descriptions also cannot translate into expressions of type e.
This is perhaps not such a difficult concept to grasp as that of proper names no longer directly denoting individuals, partly because definite noun phrases in English contain a determiner the and a common noun of type <e,t>.
The definite article in English and other languages is used in a number of different ways, none of which have an uncontroversial semantic interpretation, as can be seen by a glance at the articles and books referred to at the end of the chapter.
Here, we look only at one treatment of one aspect of definiteness which for a long time held a dominant place in the logical analysis of definiteness.
Although there are other treatments and obvious faults with the one to be discussed, it is an interesting proposal and deserves mention here.
The philosopher Bertrand Russell proposed in (1905) that a noun phrase like the king of France is logically complex and combines with a predicate to make a true formula only if there is at least and at most one entity that is the king of France and satisfies the predicate.
Montague followed Russell's lead and gave the definite article an analysis that translates the sentence in (50.a) by the formula in (50.b).
According to the truth-conditions of V, 3, and the connectives, this formula is true if, and only
174",192,174,6 Quantification,No info,No info,quantification individual sublimation fiona expression individual constant translates expression english individual constant translation english expression expression english hypothesis human language entity reference reference property particular entity thing definite description expression type difficult concept grasp proper name individual definite noun phrase english contain determiner common noun type definite article english language number different way none uncontroversial semantic interpretation glance article book end treatment long time dominant place logical analysis definiteness treatment obvious fault interesting proposal deserves philosopher bertrand russell noun phrase king france complex combine predicate true formula least entity king france satisfies predicate montague russell lead definite article analysis translates sentence formula connective formula true
174,"Proper names and definite descriptions if, there is at least one entity that kicked Prudence (the cat) and every entity that is fat and a philosopher is identical to it.
This guarantees that the formula is true if, and only if, there is one, and only one, entity in the universe of discourse that fits the description of being a fat philosopher.
(50) a.
b.

The fat philosopher kicked Prudence.
3x [Vy [(fat'(y) & philosopher'(y)) <-> (x = y)] & (kick'(prudence'))(x)].

Adopting this analysis, the definite NP in the sentence in (50.a) has the translation in (5 La) and the definite article itself that in (51.b), which can again be derived through backwards X-con version.
(The reader is invited to work through the derivation of the sentence in (50.a) to show how the translations of the individual words combine to give a translation that is equivalent to the formula in (50.b).)
(51) a.
b.
the fat philosopher
=> AP [3x [Vy [(fat'(y) & philosopher'(y)) <-» (x = y)] & P(x)]].
the => XQ [AP [3x [Vy [Q(y) « ( x = y)] & P(x)]]].

As mentioned above, there are numerous problems with Russell's analysis of definite descriptions.
The most obvious fault is that the sentence in (50.a) does not usually imply that there is only one fat philosopher in the whole of the world.
There may well be many such, but the use of the definite article indicates that only one is relevant to the current discourse situation.
Thus, some means of relating the uniqueness aspect to the immediate context is necessary to give a more accurate representation of the way definite descriptions are used.
One way in which this may be done is to restrict the domain of the universal quantifier in the representation of a definite description to some pragmatically specified set containing only those entities of the model that are currently in the context of discourse.
The translation of the fat philosopher might then be interpreted with respect not just to a model and a variable assignment, but also to such a pragmatically determined set.
The semantics of the quantifiers must then be restricted to quantifying over this set (call it D) by, for example, checking the truth values of quantified formulae only with respect to the entities in D. Such a revision of the semantics for the universal and existential quantifiers is given in (52) where only those value assignments that associate variables with members of D are relevant for ascertaining the truth of quantified formulae.
(52) a.
b.

If $ is an expression of type t containing a free occurrence of a variable, u, of type e, then [3u [$]]M8D is 1, iff there is some value assignment g', exactly like g except perhaps for the individual assigned to u, such that
[(|)]M.g\D j s i and g'(u) is a member of D.
If <>
| is an expression of type t containing a free occurrence of a variable, u, of type e, then [Vu [(()]]M'8D is 1, iff for every value assignment g', exactly like g except perhaps for the individual assigned to u, [C|>]M-8'.D is 1 and g'(u) is a member of D.

In terms of the Russellian analysis of the fat philosopher, the revisions in (52) have the effect of requiring there to be a unique fat philosopher in D, the current context, but says nothing about the existence of other fat philosophers in the model.
Furthermore, this revision has desired effects in the interpretation of universal sentences like Everyone was drunk which is not usually interpreted as describing a
175",193,175,6 Quantification,No info,No info,proper name definite description least entity prudence cat entity fat philosopher identical guarantee formula true entity universe discourse fit description fat philosopher fat philosopher prudence fat philosopher prudence analysis definite sentence translation definite article version reader work derivation sentence show translation individual word translation equivalent formula fat philosopher fat philosopher numerous problem russell analysis definite description obvious fault sentence fat philosopher whole world many definite article relevant current discourse situation uniqueness aspect immediate context necessary accurate representation way definite description way domain universal quantifier representation definite description set entity model discourse translation fat philosopher respect model variable assignment semantics quantifier call checking truth value formula respect entity revision semantics universal existential quantifier value assignment associate variable member relevant ascertaining truth formula expression type free occurrence variable type value assignment individual member expression type free occurrence variable type value assignment individual member term russellian analysis fat philosopher revision effect unique fat philosopher current context nothing fat philosopher model furthermore revision effect interpretation universal sentence everyone drunk
175,"6 Quantification situation where everyone in the whole world was drunk, but just some contextually salient set of people was drunk.
As an example of how this interpretation works, consider a situation in which Jo, the cat and Fiona are fat, Jo and Fiona are philosophers and Jo kicked the cat.
When the sentence in (5O.a) is uttered there are three entities in the discourse context, Jo, Ethel and Prudence the cat.
At this point, therefore, we interpret the formula in (5O.b) with respect to the model of this situation
(M3), an assignment of values to variables, g, and the set {MAN!, WOMANi,CAT}.
The first two steps in ascertaining the truth of this expression with respect to the relevant context are given in (53), which follow the definitions in (52).
(53) a.
b.

Bx [Vy [(fat'(y) & philosopher'(y)) <-> (x = y)] & (kick'(prudence'))(x)] is 1 with respect to M3, g and {MANi,CAT,WOMANi} iff there is a value assignment g'likeg where g'(x)e {MANj,C AT, WOMAN,} such that
Vy [(fat'(y) & philosopher'(y)) <-> (x = y)] & (kick'(prudence'))(x)] is also
1.
Vy [(fat'(y) & philosopher'(y)) *-> (x = y)] & (kick'(prudence'))(x)] is 1 with respect to M3, g and {MAN^CAT,WOMAN!} iff for every value assignment g"" exactly like g' where gM(y) e {MAN^CAT,WOMAN,}
[[(fat'(y) & philosopher'(y)) <-> (x = y)] & (kick'(prudence'))(x)] is 1.

Because interpretation is restricted to the set of entities that are salient in the discourse
(i.e. to Jo, Ethel and Prudence), it is easy to show that (5O.b) is true.
First of all, we let g' be a function that assigns MANi to x and WOMANX to y.
This satisfies the expression [(fat'(y) & philosopher'(y)) <-»( x = y)] & (kick'(prudence'))(x) with respect to M3, because Jo (MANi) kicked Prudence (CAT), and [(fat'(y) & philosopher'(y))]M^^MMilCATWOMA^ y]M3,g\{MANi,cAT,woMANi} has the same truth value as

[x

=

( s i n c e M ANi, the value of g' applied to x, is not identical to
WOMANi, the value of g' applied to y, and the latter is neither a philosopher nor fat).
There are then only two other relevant value assignments that we need to look at to verify (53.b), g'MAN1'*and g'cAT/y Both of these do satisfy [(fat'(y) & philosopher'(y))
<-> (x = y)] & (kick'(prudence'))(x) with respect to M3.
The first satisfies the expression because x and y are assigned to the same entity, MANi, which makes [x
= y]M3*\<MANi.cAT.woMANi> true and satisfies philosopher'(x) &fat'(x) because MANi is both a philosopher and is fat.
Since both sides of the equivalence (fat'(y) & philosopher '(y)) <-> x = y are true, the whole formula is true, and so the conjunction with (kick'(prudence '))(x) is also true.
The final value assignment with y assigned to
CAT satisfies the expression for the same reason that g' itself does, i.e. because the cat is not Jo nor is it a fat philosopher.
Hence, where the domain of quantification is restricted to Jo, Ethel and Prudence (5O.b) is true.
Notice, however, that if the domain is unrestricted the formula is false of the situation being described.
This is because a value assignment that assigns WOMAN2 to y (and MANi to x, as before) fails to satisfy the formula [(fat'(y) & philosopher'(y)) <-> (x - y)] & (kick'(prudence'))(x), since WOMAN 2 is both a philosopher and fat, but, crucially, is not identical to MANi, the value of g'(x), and so the two formulae in the equivalence do not have the same truth value, making the equivalence (and the whole conjunction) false.
There is thus more than one fat philosopher in the domain and so, according to Russell, the proposition expressed by the sentence The fat philosopher kicked the cat is false, since the phrase the fat philosopher fails to pick out a unique entity.
Hence, the
176",194,176,6 Quantification,No info,No info,quantification situation everyone whole world drunk salient people drunk interpretation work situation cat fiona fat fiona philosopher cat sentence entity discourse context ethel prudence cat point interpret formula respect model situation assignment value variable man womani cat step truth expression respect relevant context follow definition fat philosopher prudence respect mani cat womani value assignment manj woman fat philosopher prudence philosopher prudence respect woman value assignment woman fat philosopher prudence interpretation entity salient discourse ethel prudence true function mani womanx satisfies expression fat philosopher prudence respect mani prudence cat fat philosopher mani cat womani truth value ani value identical womani value latter philosopher fat relevant value assignment satisfy fat philosopher prudence first satisfies expression entity mani true satisfies philosopher fat mani fat side equivalence fat true whole formula true conjunction kick prudence true final value assignment cat satisfies expression reason cat fat philosopher domain quantification ethel prudence true notice domain unrestricted formula false situation value assignment assigns mani satisfy formula fat philosopher prudence woman fat identical mani value formula equivalence truth value equivalence whole conjunction false fat philosopher domain russell proposition sentence fat philosopher cat false phrase fat philosopher unique entity
176,"Two problems introduction of a context set, D, as part of the interpretation enables one to capture more accurately some of the meaning of the definite article the (and indeed the uses of the other quantifiers and proper names).
The truth values of quantified formulae differ depending on the set of salient entities in the discourse.
There is much more that can be said about Russell's analysis and Strawson's criticisms.
There is also much more to be said about the meaning of the word the in its anaphoric use (e.g. Bill is my boss and the bastard really keeps me at it) or in its generic use (e.g. The tiger is a fierce animal) where it appears to have the force of the universal quantifier.
Indeed, much controversy surrounds the proper treatment of the definite article and definiteness in general.
For the purposes of this book, however, despite its problems, the Russellian interpretation of the is the one that will be assumed whenever definite descriptions are used.
Exercise 6.9:
Translate the following sentences into LQ, giving both the full translation as generated by the translation rules and the simplified equivalent form that results from lambdaconversion.
i.
Jo laughed and cried.
ii.
The linguist was not happy.
iii.
If Ethel sang, then the dog howled.

6.5

Two problems

There are two problems facing the approach to noun phrase interpretation discussed above.
One is more of a technical problem to do with translation and concerns the way non-subject noun phrases combine with their verbs to form verb phrases.
The second concerns the ambiguity of sentences that contain more than one quantified noun phrase.
We will look at these in turn.
6.5.1

Type raising

If we give NPs the type «e,t>,t>, it is no longer possible to combine the translations of object NPs directly with those of their verbs, because the latter translate into expressions of type <e,<e,t» that cannot functionally apply with expressions of type
«e,t>,t>.
To combine NP' and V,', therefore, the type of the latter must be changed so that its arguments have the correct type; so that transitive verbs must be assigned the complex type <«e,t>,t>,<e,t» and ditransitive verbs the type
<«e,t>,t>,<«e,t>,t>,<e,t>».
This would, of course, be a simple matter if all we were interested in was getting verb translations to combine with NP ones.
But the point of translation into a logical language is the interpretation it receives.
Just asserting that verb types are now all changed is not sufficient.
We need to make sure that the verbs retain their fundamental interpretation as denoting relations between entities.
To do this, the translations of verbs like like and give must be made more complex so that their type is the appropriate one to combine with non-subject NPs, but
177",195,177,6 Quantification,No info,No info,problem context part interpretation enables capture definite article us quantifier proper name truth value formula differ salient entity discourse russell analysis strawson criticism word anaphoric use bill bos bastard generic use tiger fierce animal force universal much controversy proper treatment definite article definiteness general purpose book problem russellian interpretation definite description exercise translate sentence full translation translation rule equivalent form result lambdaconversion linguist happy iii ethel dog problem problem approach noun phrase interpretation technical problem translation concern way noun phrase verb form verb phrase second concern ambiguity sentence noun phrase look turn type raising np type possible translation object np latter translate expression type expression type combine type latter argument correct type transitive verb complex type ditransitive verb type simple matter interested verb translation point translation logical language interpretation verb type sufficient need sure verb fundamental interpretation denoting relation entity translation verb complex type appropriate np
177,"6 Quantification they still end up identifying relations between entities.
The solution to the problem, as before, can be found in the use of the lambda operator and, as in previous sections, the easiest way to get to the translation of a constituent is to start with a formula that expresses the truth-conditions of a particular sentence that contains that constituent.
Consider the sentence in (54.a) whose truthconditions require that for every entity that is a student in some model, there is a lecturer that that student liked.
The force of this can be brought out by the semi-formal
English sentence in (54.b) which has the transparent representation in LQ shown in
(54.c).
(54) a.
b.
c.

Every student liked a lecturer.
For every x, if x is a student then there is a y such that y is a lecturer and x liked y.
Vx [student'(x) -> 3y [lecturer'(y) & (like'(y))(x)]].

As we have seen, the translation into LQ of the subject NP every student is the
A,-expression in (55.a) which combines with the translation of the VP to give a formula truth-conditionally equivalent to (54.c).
The VP itself translates as an expression of type <e,t> that contains the remnants of the formula in (54.c) once the subject NP translation in (55.a) has been removed.
This remnant is an open formula 3y
[lecturerJ (y) & (like'(y))(x)] and abstracting on the free variable, x, yields the one-place predicate in (55.b) which is equivalent to the translation of the VP.
(The variable in (55.b) has been changed to z to bring out the fact that it is a different variable from the x in (54.c) which is supplied by the NP translation in (55.a).)
(55) a.
b.

X?
[Vx [student'(x) ->P(x)]](VP')
» Vx [student'(x) -> 3y [lecturer'(y) & (like'(y))(x)]].
VP => Xz [3y [lecturer'(y) & like'(y)(z)]].

The predicate in (55.b) is equivalent to the expression that results from combination of the translation of the transitive verb like with that of the NP a lecturer.
Assuming that the verb is the functor (in order to keep the types of subject and object NPs uniform), Vt' must apply to the translation of the object NP in (56.a) to give an expression equivalent to (55.b), as shown in (56.b).
In performing this ^-conversion, there must be a step where the NP translation in (56.a) applies to a one-place predicate which is bound to the variable Q and becomes like'(y)(z) after lambda-conversion.
Since z is bound by the outermost lambda operator and y is supplied by the NP translation, the latter can be replaced by a new variable x which is abstracted upon to give the one-place predicate in (56.c) which yields (56.d) as the intermediate expression equivalent to the VP translation in (55.b).
(56) a.
b.
c.
d.

XQ [3y [lecturer'(y) & Q(y)]].
V?(XQ [3y [lecturer'(y) & Q(y)]])
» Xz [3y [lecturer'(y) & like'(y)(z)]].
Xx [(like'(x))(z)].
Xz [XQ {By [lecturer'(y) & Q(y)]](Xx [(like'(x))(z)])].

One final step remains to be done to get to the translation of the verb.
(56.c) is, as we have seen, equivalent to the translation of a verb phrase formed by applying the translation of the verb like to that of the NP a lecturer.
To transform (56.c) into an LQ
178",196,178,6 Quantification,No info,No info,quantification relation entity solution problem lambda operator previous section easiest way translation constituent formula express particular sentence constituent sentence truthconditions entity student model lecturer student force english sentence transparent representation student lecturer student lecturer student lecturer translation subject student combine translation formula equivalent expression type remnant formula subject translation open formula lecturerj free variable yield predicate equivalent translation variable fact different variable translation student student lecturer lecturer predicate equivalent expression result combination translation transitive verb lecturer verb functor order type subject object np uniform translation object expression equivalent performing translation variable bound outermost lambda operator translation latter new variable give predicate yield intermediate expression equivalent translation lecturer lecturer lecturer lecturer final step translation verb equivalent translation verb phrase translation verb lecturer transform
178,"Two problems expression with such a structure, the NP translation can be replaced with a variable of the appropriate sort and placed as an argument after the ^-expression formed by abstraction on this variable.
Taking P to be a variable of type «e,t>,t>, backwards
^-abstraction yields (57. a) as the full (unconverted) form of the VP translation of liked a lecturer which is truth-conditionally equivalent to (56.c) and (55.b).
The expression in (57.b) is thus the translation of the verb like, an expression that has the correct type,
< « e , t > , t > , < e , t » , denoting a function from NP extensions to VP extensions.
The derivation of the example sentence in (54.a) is given in (58) showing the way the translation is built up and then reduced to the equivalent expression in (54.c).
(57) a.
b.

XP [Xz [P(Xx [(like'(x))(z)])]](XQ [3y [lecturer'(y)& Q(y)]]).
like => XP [Xz [P(Xx [(like'(x))(z)])]].

(58) a.

S b.
c.
d.
e.
f.
g.
h.
i.
j.
k.
1.
m.
n.

NPVP[+FIN]
1G2
=f> NP'(VP').
Det CNP VP[+FIN]
28'G 2
=> (Det'(CNP')XVP').
Det N VP[+FIN]
30G2
=> (Det'(N')XVP').
Det N V[+FIN] NP
2G2
=> (Det'(N')XV'(NP')).
Det N V[+FIN] Det CNP
28'G 2
=> (Det'(N')XV'(Det'(CNP'))).
Det N V[+FIN] Det N
30G2
=*(Det'(N'))(V'(Det'(N'))).
every student liked a lecturer.
Lex
=* (XQ [X?
[Vx [Q(x) -*P(x)]]](student'))
(XP [Xz [P(Xx [(like'(x))(z)])]](XQ [XP [3y [Q(y) & P(y)]]](lecturer'))).
» (XP [Vx [student'(x) -> P(x)]])
(XP [Xz [P(Xx [(like'(x))(z)])]](XQ [XP [By [Q(y) & P(y)]]](lecturer'))),
» (XP [Vx [student'(x) -> P(x)]])
(XP [Xz [P(Xx [(like'(x))(z)])]](XP [By [lecturer'(y) & P(y)]])).
» (XP [Vx [student'(x) -> P(x)]])
(Xz [XP 0 y [lecturer'(y) & P(y)]](Xx [(like'(x))(z)])]).
» (XP [Vx [student'(x) -^ P(x)]])(Xz [By [lecturer'(y) & like'(y)(z)]]).
» Vx [student'(x) -> Xz [3y [lecturer'(y) & (like'(y))(z)]](x)].
» Vx [student'(x) -> 3y [lecturer'(y) & (like'(y))(x)]].

This translation for like, which is generalised to cover all other transitive verbs, may seem unnecessarily complex, but it does allow noun phrases to be given a uniform treatment whatever position they happen to occupy in a sentence, whilst maintaining the insight that such verbs denote two-place relations between entities.
Although the gain may seem slight as compared to the increased complexity in translating verbs, in Chapter 10 we will see that there are verbs which must be analysed as denoting functions from NP extensions to VP extensions directly, without there being any direct relation between two entities.
Thus, to give a uniform syntactic
179",197,179,6 Quantification,No info,No info,problem expression structure translation variable appropriate sort argument abstraction variable variable type full unconverted form translation lecturer equivalent expression translation verb expression correct type denoting function extension extension derivation sentence way translation reduced equivalent expression lecturer npvp det cnp det cnp xvp det det xvp det det det det cnp det det cnp det det det det student lecturer lex student lecturer student lecturer student lecturer student lecturer student lecturer student lecturer student lecturer translation cover transitive verb complex noun phrase uniform treatment position occupy sentence insight verb denote relation entity gain slight complexity verb verb function extension extension direct relation entity uniform syntactic
179,"6 Quantification treatment to such verbs and verbs that denote simple relations between entities, the increased complexity in translating the latter is a small price to pay.
Exercise 6.10:
Using translations of the transitive verbs of the sort given to like, translate the following sentences into LQ, giving the formulae as they are generated by the translation rules and the equivalent formulae that result from lambda-conversion.
i.
Ethel shot a philosopher, ii.
No student liked the lecturer, iii.
A linguist slapped Jo.
* Exercise 6.11:
Owing to the type changes introduced above, the translation rules for passive verb phrases given in Chapter 5 no longer give therightresults.
Show why this should be so and devise new rules that ensure that the correct interpretation is given to each passive sentence.

6.5.2

Scope ambiguities

Sentences containing more than one quantified NP are often ambiguous, depending on how wide the relative scopes of the quantifiers contained in the NPs are taken.
Consider the sentence in (59.a) which could be followed by either of the sentences in
(59.b) or (59.c), without contradiction.
(59) a.
b.
c.

Every critic enjoyed a play.
Charles enjoyed Macbeth, Philippa enjoyed Bedroom Farce, Wendy enjoyed Happy Days and Kevin enjoyed all the plays.
The play that everyone enjoyed was Salome.

The reading of (59.a) that (59.b) picks up on is the one where each critic indeed enjoyed some play, but the one enjoyed is not necessarily the same for them all.
(59.c), on the other hand, forces the stronger reading, where it is the same play that is enjoyed by everyone.
The difference between these two interpretations is brought out by the semi-formal English sentences in (60) which may be represented in LQ by the formulae in (61).
(60) a.
b.
(61) a.
b.

For every x, if x was a critic then there was a y such that y was a play and x enjoyed y.
There was a y such that y was a play and for every x, if x was a critic then x enjoyed y.
Vx [critic'(x) -> 3y [play'(y) & enjoy'(y)(x)]].
(= (59.b)/(60.a))
3y[play'(y)& Vx [critic'(x) -> enjoy'(y)(x)]].
(= (59.c)/(60.b))

The difference between the two formulae in (61) resides in the relative scopes of the
NP translations and the quantifiers and propositional connectives they contain.
In
180",198,180,6 Quantification,No info,No info,quantification treatment verb verb denote simple relation entity complexity latter small price pay exercise translation transitive verb sort translate sentence formula translation rule equivalent formula result ethel philosopher student lecturer linguist exercise owing type change translation rule passive verb phrase therightresults show devise new rule correct interpretation passive sentence scope ambiguity sentence ambiguous wide relative scope quantifier np consider sentence sentence contradiction critic play charles macbeth philippa bedroom farce wendy happy day kevin play play everyone salome reading pick critic hand force stronger play everyone difference interpretation english sentence formula critic play play critic critic play enjoy play critic enjoy difference formula relative scope translation propositional connective contain
180,"Two problems
(61.a), the universal quantifier has scope over the existential one, whilst in (61 .b) the reverse is the case and, because of the way we have translated universal and existential
NPs, the material implication in (6La) has wider scope than the conjunction, a situation reversed in (6Lb).
This difference is semantically significant, since it is possible for (6 La) to be true in a situation in which (61.b) is false (although the reverse is not the case; see below).
This is the case in the situation shown in (62) which represents the relation between the set of critics and the plays that they enjoy in some model (call it M6), as illustrated by (59.b).
(NB: the diagram shows the relation, not the function, denoted by enjoy'.)
(62)

To prove that the interpretation we have given to the quantifiers does give the formulae in (61) different truth values with respect to M (and thus assign them different truth-conditions), let us work through the formal interpretation of the formulae in turn.
The procedure for doing so, however, is somewhat involved, because of the fact that the truth-conditions of quantified sentences are defined in terms of value assignments to variables.
All that is required to understand the method is a bit of patience to keep track of the different value assignments, but the effort helps in the understanding of the way the interpretation rules in Section 6.2.2 work.
According to the truth-conditions for 3 and V in (10) and (13), above, the formula in (6 La) is true with respect to the model M if, and only if, for every entity that can be assigned to x there is an entity that can be assigned to y that makes critic'(x) —» (play'(y) & (enjoy'(y))(x)) true.
To show that this is so, we need to look at all possible assignments for x where x is a member of [critic']M* and see if there is a value assignment that keeps the entity assigned to x constant, but assigns an entity to y which is in the set of plays and the set of things that x enjoyed.
We do not need to look any further than those value assignments that associate x with a critic, because, by the semantics of material implication, critic'(x) —> (play'(y) & (enjoy'(y))(x)) is always true if x is not a critic, because critic y(x) is false on such a value assignment.
Nor do we need to look at assignments of values to y that are not plays, because these make play'(y) & enjoy(y)(x) false for any value of x and thus are irrelevant for ascertaining the truth of the existential formula.
We begin by looking at the value assignment g with respect to which (6 La) is to be interpreted.
The relevant part of this
181",199,181,6 Quantification,No info,No info,problem universal quantifier scope existential reverse way universal existential np material implication wider scope conjunction situation difference significant possible true situation false reverse situation relation set critic play enjoy model call diagram show relation function enjoy interpretation quantifier formula different truth value respect assign different work formal interpretation formula turn procedure involved fact sentence term value assignment variable understand method bit patience track different value assignment effort help way interpretation rule work formula true respect model entity entity critic play true show possible assignment member critic value assignment entity constant assigns entity play set thing look value assignment associate critic semantics material implication critic play true critic critic false value assignment need assignment value play play false value irrelevant ascertaining truth existential formula value assignment respect relevant part
181,"6 Quantification is shown in (63), which specifies only the values assigned to x,y (the only variables in (61)) and to z, for good measure.
There is no need to specify the rest of the function, as this remains constant throughout the interpretation procedure.
(63) g

With respect to g (and Me), the formula critic'(x) —» (play'(y) & (enjoy'(y))(x)) is false because c is a critic but the pair <c,b> is not in the extension of [enjoy '] M 6 , where c is the value assigned to x and b is that assigned to y.
However, the existential formula 3y [play'(y) & (enjoy '(y))(x)] is not thus falsified, because it is still true if there is some value assignment exactly like g except for the value assigned to y that satisfies playf(y) & (enjoy '(y))(x).
Hence, we must look at the value assignment just like g except that y is assigned another value, say m.
This function is symbolised g""1^, as we saw in Chapter 5, and the part of this function that we are interested in is shown in (64).
This assignment of values to variables satisfies play'(y) & (enjoy' (y))(x), because <c,m> is a member of [enjoy']U6*.
Hence, the existential formula [3y
[play'(y) & (enjoy'(y))(x)}]M6# is true, thus making [critic'(x) —> 3y [play'(y) &
(enjoy'(y))(x)]]M6'& also true by the truth-conditions of material implication.
(64) g^y

While we have shown that the formula critic '(x) —» 3y [play '(y) & (enjoy f(y))(x)] is true with respect to M 6 and g, we have not, of course, yet completed the interpretation of (61 .a), as we need to see what happens with all other assignments of values to x.
Thus, we next look at the value assignment gp* shown in (65).
Since the pair <p,b> is in the extension of enjoy' in Nfc (and p is in [critic']™6* and b is in
[play']M6*)y gp""< again satisfies critic'(x) -> (play'(y) & (enjoy'(y))(x)).
(65)

182 g*",200,182,6 Quantification,No info,No info,quantification value variable good measure rest function constant interpretation procedure respect formula critic play false critic pair extension value existential formula play enjoy true value value satisfies playf enjoy value assignment value function part function interested assignment value variable satisfies member existential formula play true critic play enjoy true material implication formula critic play true respect course interpretation need assignment value next look value assignment pair extension nfc critic play satisfies critic play enjoy
182,"Two problems
The next assignment of a value to JC, gWx in (66.a), however, fails to satisfy the target formula, since Wendy did not enjoy Bedroom Farce, so we need to look at the value assignments just like this except for the values assigned to y.
Assigning the value of m to y yields the assignment gi**)""""* shown in (66.b).
This does not help, as
<w,m> is not in the extension of enjoy'.
The next assignment gww', however, which is shown in (66.c) does verify the formula critic '(x) —> 3y [play '(y) & (enjoy '(y))(x)], because <w,h> is in [enjoy']™6*.
(66) gw/x

# w b
P g[w/x]m/y r [w/x]h/y

C.
w y m
P w y h
P

As there is one more critic in the model, there is one more assignment to JC that must be looked at, i.e. g*7*.
Since Kevin enjoyed all the plays in M 6 , this value assignment (shown in (67)) satisfies critic'(x) —> (play'(y) & (enjoy'(y))(x)).
Thus, we have now shown that for every value assignment like g but for the value ofJC which makes critic'(x) true, there is a value assignment exactly alike except possibly for the value of y that satisfies critic'(x) -^play'(y) & (enjoy'(y))(x).
Hence, the formula in
(61 .a) is true with respect to M6 and g.
Furthermore, because the value assignment, g, was chosen arbitrarily, we can say that the formula is also true just with respect to the model M 6 .
In other words, the formula is true irrespective of which value assignment is chosen.
(67) g*

In ascertaining the truth of the formula in (61 .a), the value of y may be varied for each value of x in order to satisfy the relevant propositional function.
To show that the formula in (61 .b) is true, on the other hand, it is necessary to find some value for y that makes the formula play'(y) & (critic(x) —» (enjoy'(y))(x)) true for all values of JC.
In other words, every value for JC must satisfy the formula for some constant value of y.
Since any value for y not in the extension of play' necessarily makes the formula false, we may restrict our attention only to those values for y which are plays.
Furthermore, we need only look at values of JC which are critics since all other assignments make the
183",201,183,6 Quantification,No info,No info,problem next assignment value gwx target formula wendy enjoy bedroom farce look value assignment value assigning value yield assignment help extension next assignment gww verify formula critic play enjoy critic model assignment kevin play value assignment satisfies critic play value assignment value ofjc critic true value value satisfies critic formula true respect value assignment formula true respect model word formula true irrespective value assignment ascertaining truth formula value varied value order relevant propositional function formula true hand necessary find value formula play critic true value word value formula constant value value extension play formula false attention value play look value critic assignment
183,"6 Quantification implication true.
First, therefore, we may take the value assignment, g, and then look at all the assignments that vary from this in their value for x.
If there is one variant that makes the target formula false then we move on to look at the next assignment like g except for the value assigned to y and go through all the values that may be assigned tox
With respect to g, play'(y) & (critic(x) -» (enjoy'(y))(x)) is false in the model
Me, because <c,b> is not in the extension of enjoy* while c is in that of critic' in the model.
As there is thus at least one critic in the model that fails to enjoy Bedroom
Farce, we may go directly to an examination of another variable assignment, e.g. g1""7* in (64).
This satisfies the formula and so another for x is tested, g^yw* in (68.a), however, does not satisfy the target formula, so that g^y itself fails to satisfy the formula.
A new assignment to y must therefore be investigated.
This is g1^ in (68.b) which fails to satisfy the target formula, as indeed does the last possible assignment to y that makes play'(y) true, i.e. g8'* in (68.c), since neither <c,h> nor <c,s> are in
[enjoy']""16*.
As no value assigned to y makes critic*(x) & (enjoyt(y))(x) true for all values of JC, the formula in (61.b) is false with respect to M6.
Hence, we have shown that there are situations like that modelled by M6 in which the formula in (61 .a) is true, but in which that in (61 .b) is not.
Thus, the truth-conditions of the two formulae must differ and so the sentence Every critic enjoyed a play in (59.a) is shown to be truly ambiguous.
(68) a.
g[m/y]h/x v b.

• w

•

^ g^

C.
b

A c m

J h

P

P g^ c
V

• w s p

There are situations, of course, in which (61 .b) is true.
One such is shown in (69) which shows the criticizing relation between critics and plays in a model, M*.
The formula in (61.b) can be shown to be true with respect to M6' and g by the value assignments in (70) which show all possible values for x when the value ofy is held constant as s (i.e. the value assignments are all variants of g8^).
Since all these assignments satisfy (play'(y) & critic'(x)) -» (enjoy '(y))(x), (61.b) is also true.
The formula in (61.a) is also true with respect to M6' because, for each critic, there is a play that they enjoy.
It just happens to be the same play in each case.
Any true formula where an existential quantifier has wider scope than a universal entails the truth of the corresponding formula with the scopes of the quantifiers reversed.
Thus, wheretyis any formula, the formula in (71) is a tautology, allowing Vx [3y<]>] to be inferred from 3y \\/x§] in all cases.
The reading of (59.a) in (61 .b) thus entails that in (61.a).
(See Chapter 7 for further details.)

184",202,184,6 Quantification,No info,No info,quantification implication true first value assignment assignment vary value variant target formula false move next assignment value value tox play critic false model extension enjoy critic model least critic model bedroom farce variable assignment satisfies formula target formula satisfy formula new assignment target formula last possible assignment play true enjoy value critic enjoyt true value formula false respect situation formula true formula sentence critic play ambiguous situation course true show relation critic play model formula true respect value assignment possible value value ofy constant value assignment variant assignment satisfy play critic enjoy true formula true respect critic play enjoy true formula existential wider scope universal entail truth formula scope reversed wheretyis formula formula tautology case entail detail
184,"Two problems
(69)
X enjoy

Y b

C v m h

[critic'] M6 '

[play'] M6 '

(70) a.

\y g^y g[s/y]p/x x

• c

XV y

• y z

> p

(71) s a[s/y]w/x c

C z x y gls/ylk/x

• w
• s p v s
P

3x [Vy [«]-> Vy 0 x [«].

Exercise 6.12:
Ascertain the truth values of the following two formulae with respect to the model,
Me, and the value assignment g, by examining different value assignments as was done above.
Do the differences in scope of the quantifiers between i and iii and ii and iv affect the truth-conditions of the formulae?
i.
ii.
iii.
iv.

3x [critic'(x) & 3y [play'(y) & (enjoy'(y))(x)]].
Vx[play'(x) -^ Vy [critic'(y) -Kenjoy'(y))(x)]].
3y [play'(y) & 3x [critic'(x) & (enjoy'(y))(x)]].
Vy [critic'(y) -> Vx [play'(x) -> (enjoy'(y))(x)]].

The existence of ambiguous sentences like that in (59.a) poses a problem for the grammar fragment set up so far in that the grammar rules given in Section 6.2 only generate one translation for the sentence in (59.a), the one where the quantifier in the subject NP has widest scope.
The derivation of the LQ formula that shows this reading parallels that for the sentence Every student liked a lecturer in (58).
The second reading of (59.a) cannot, however, be generated by the grammar as it stands, because it requires the quantifier in the object NP to appear to the left of that of the subject.
In
185",203,185,6 Quantification,No info,No info,problem critic play exercise ascertain truth value formula respect model value assignment different value assignment difference scope quantifier formula critic play enjoy play critic play critic enjoy critic play existence ambiguous sentence problem fragment grammar rule translation sentence quantifier subject widest scope derivation formula show parallel sentence student lecturer second reading grammar stand quantifier object subject
185,"6 Quantification other words, the object is semantically combined with the verb after the subject in some way, although, of course, in the syntax the object combines with the verb before the subject.
This is a problem for the rule-to-rule hypothesis, because this is a semantic process that has no syntactic reflex.
In the other cases of ambiguity that we have come across in this book, any semantic ambiguity can be seen in the syntactic derivation.
A number of ways have been suggested to obtain different scope readings.
In transformational grammar, noun phrases are moved to sentence initial position after the surface structure has been derived, but before semantic interpretation is carried out
(i.e. at LF).
In monostratal grammars, it has been suggested that the interpretation of a noun phrase may be stored during the derivation of a sentence and then utilised later to give the different readings.
No attempt will be made here to formally extend the grammar and derivation procedures developed so far to cope with scope ambiguities.
However, a means of accounting for wide scope quantification in the semantics can be given using a process that Montague refers to as quantifying in.
This process has the effect of replacing an argument of a verb by a variable of the appropriate sort and then combining a noun phrase translation with the X-expression of type t formed by abstracting on this variable once all other arguments have been combined.
Because object noun phrases have the type «e,t>,t>, as we have seen, a predicate must combine with the individual sublimation of an individual variable, rather than an individual variable itself, i.e. XP [P(x)] rather than x.
The rule is stated in (72) as an operation on wellformed formulae and has the effect of associating sentences with more than one translation (e.g. with wide scope readings for object NPs) and may, therefore, be thought of an an ambiguating relation.
(72)

Quantifying in: If a sentence S is translated by a formula $ containing an expression a of type «e,t>,t>, then S may also be translated as ot(Xx [<()']) where <|>' is exactly like $ except that a is replaced by the expression
] where x is a variable of type e not bound in <))' .

As an example, the derivation of the second reading of the sentence in (59.a) can be shown by the semantic analysis tree in (73).
Here, the translation of the direct object is replaced by the individual sublimation of the variable Xj which combines with the translation of the transitive verb to give the translation of the VP.
The latter is then combined with the translation of the subject NP to give a formula containing a free instance of the variable Xj.
Finally, the translation of the direct object noun phrase a play is combined with the predicate formed by lambda abstraction on this variable.
(74) shows the successive lambda-conversions that guarantee that this derivation is equivalent to the formula in (61.b).
Other scope effects will be seen in
Chapters 8 and 10 involving tense and intensionality, but they can all be derived in the semantics using the rule of quantifying in (72).

186",204,186,6 Quantification,No info,No info,quantification word object combined verb subject way course syntax object verb subject problem semantic process syntactic reflex case ambiguity book semantic ambiguity syntactic derivation number way different scope transformational grammar noun phrase sentence initial position surface structure semantic interpretation monostratal grammar interpretation noun phrase derivation sentence different reading attempt grammar derivation procedure scope ambiguity wide scope quantification semantics process montague process effect argument appropriate sort noun phrase translation type variable argument object noun phrase type predicate individual sublimation individual variable individual variable rule operation formula effect sentence translation wide scope object np relation sentence formula expression type expression variable type derivation second reading sentence semantic analysis tree translation direct object individual sublimation variable combine translation transitive verb translation latter combined translation subject formula free instance variable direct object noun phrase play predicate lambda abstraction variable show successive guarantee derivation equivalent formula scope effect chapter tense intensionality semantics rule
186,"Generalised quantifiers

(73) t
XQ [3y [play'(y) & Q C y ) ] ] ^ [XP [Vx [critic'(x) -> P(x)]](AP [A.x2 [P(Xz [enjoy'(z)(x2)])]](AP [PCx

«e,t>,t>
XQ [3y [play'(y) & Q(y)]] t
Xx{ [X?
[Vx [critic'(x) -> P(x)]](Xi» [Xx2 [Pftz [enjoy'(z)(x2)])]](>P [P( Xl )]))

«e,t>,t>
XP [Vx [critic'(x) -> P(x)]]

<e,t>
XP [ U 2 [P(Xz [enjoy'(z)(x 2 )])]]aP [PCx

XP [Xx2 [P(Xz [enjoy'(z)(x2)])]]

(74) a.
b.
c d.
e.
f.
g.
h.
6.6

>iQ [3y [play'(y) & Q(y)]](Ax1 [XP [Vx [critic'(x) ^ P( x )]]
(XP [Xx2[P(Xz [(enjoyXz))(x2)])]](XP [PCx,)]))]).
» XQ [3y [play'(y) & Q(y)]](Xx1 [XP [Vx [critic'(x) -^ P(x)]]
(Xx2[XP [P(Xl)](Xz [(enjoy'(z))(x2)])])]).
» XQ p y [play'(y) & Q(y)]](Xx1 [XP [Vx [critic'(x) ^ P(x)]]
(Xx2[Xz[(enjoyXz))(x2)](Xl)])]).
» XQ p y [play'(y) & Q(y)]](Xx1 [XP [Vx [critic'(x) -> P(x)]]
(Xx2 [enjoyXxjKx,)])]).
» XQ [3y [play'(y) & Q(y)]] (Xx.fVx [critic' (x) -> Xx2[enjoy'(x1)(x2)](x)]]).
» XQ p y [play'(y) & Q(y)]](Xx1 [Vx [critic'(x) ^ enjoy'(x1)(x)]]).
» 3y [play'(y) & Xx![Vx [critic'(x) -^ enjoy'(x,)(x)]](y)].
» 3y [play'(y) & Vx [critic'(x) -> (enjoy'(y))(x)]].
Generalised quantifiers

Certain English sentences containing quantifiers other than every (all), no and a
(some) can be represented using the universal and existential quantifiers, as shown in
(75).
(75) a.
b.

At least two students laughed
=> 3x [3y [student'(x) & student'(y) & ~(x = y) & laugh'(x) & laugh' (y)]].
Both students laughed
=>
3x [3y [Vz [(student'(x) & student'(y) &~(x = y ) ) o ( z = y v z = x)]
& laugh'(x) & laugh'(y)]].

These representations, although truth-conditionally adequate, are very complex and counter-intuitive and illustrate a weak point in the translation procedure developed
187",205,187,6 Quantification,No info,No info,quantifier play critic pcx play critic pftz critic pcx enjoy play critic enjoyxz pcx play critic enjoy play critic enjoyxz play critic enjoyxxjkx play critic enjoy play critic enjoy play critic enjoy play critic enjoy quantifier certain english sentence universal existential quantifier student student student laugh laugh student student student laugh laugh representation adequate complex illustrate weak point translation procedure
187,"6 Quantification above for every and some: the translation of quantified English sentences introduces sentential connectives that are just not represented in the English syntax.
Thus, although a compositional translation procedure for such sentences can be provided using the lambda operator, the interpretation requires a more complex structure for LQ than is indicated in the object language.
Furthermore, there are many quantified sentences that have no representation at all using the universal and existential quantifiers, examples of which appear in (76).
(76) a.
More students than lecturers laughed.
b.
Many linguists sneezed.
c.
Few philosophers sang.
d.
Most babies cried.
e.
More than half the babies cried.
To end this chapter, we take a brief look at a recent development in the theory of quantification that has shown great promise in helping to solve these problems and which has led to the development of a series of constraints that can be imposed on the semantics of natural language quantifiers.
As mentioned in Sections 6.2.1 and 6.2.2, the semantics of universal and existential noun phrases can be defined in terms of set theory.
A NP like a student denotes the set of sets of entities which have a non-null intersection with the set of students (cf. (40)) and every student denotes the set of sets of entities of which the set of students is a subset (cf. (38.b)).
It is this analysis of NPs as denoting generalised quantifiers that has been so fruitful in linguistic semantics in recent years.
Instead of
NPs being translated into complex expressions of LQ, their semantics is defined directly on a simple (lexical) translation.
Thus instead of translating every into the complex expression XQ [XP /VJC [Q(X) -> P(x)]]] it is translated into every' like any other lexical item.
This still has the type « e , t > , « e , t > , t » and so gives rise to NP translations like every'(student') and sentential translations like
(every'(student'))(laugh') which contains no extra sentential connectives.
The semantics of every' (and a, no, etc.) is then directly defined by the model theory without the use of variables and value assignments.
Each quantifier is associated with a function which assigns to each subset [N]M« of A (i.e. the extension of each common noun), a set of subsets of A having a particular property.
The definitions for every and some in these terms is given in (77).
The truth value of a formula whose subject NP contains the quantifiers every or some can be ascertained by seeing whether the VP denotes a set that is in the set of sets denoted by the subject.
Thus, the proposition expressed by a sentence like Every student laughed is true just in case [laugh']M* is in {X c A I [student'}™* c X}, i.e. if [student""]™* c [laugh']M*.

[every ']M* is that function which assigns to each [N]M-s c A , the set of sets
{XcAl [Nf^cX}.
b. [some '] M * is that function which assigns to each [N]M« c A, the set of sets
(XcAIXn[N]M^0).
Using this set-theoretic method rather than the traditional quantifiers, it is possible to define the semantics of other quantifiers in terms of the set of sets that they assign to the extension of each common noun.
The interpretation of many non-classical quantifiers (i.e. quantifiers other than 3 and V) is based on the
(77) a.

188",206,188,6 Quantification,No info,No info,quantification translation english sentence sentential connective english syntax compositional translation procedure sentence lambda operator interpretation complex structure object language many sentence representation universal existential quantifier example student lecturer many linguist sneezed philosopher baby half baby end brief recent development theory quantification great promise problem development series constraint semantics natural language quantifier section semantics universal existential noun phrase term set theory student denotes entity intersection student student denotes entity set student subset analysis np quantifier fruitful linguistic semantics recent year np complex expression semantics simple lexical translation complex expression lexical item rise translation student sentential translation student laugh extra sentential connective semantics model theory use variable value assignment quantifier function subset extension common noun subset particular property definition term truth value formula subject quantifier denotes set subject proposition sentence student true laugh student student laugh function assigns xcal function assigns xcaixn method traditional quantifier possible define semantics quantifier term set assign extension common noun interpretation many quantifier quantifier
188,"Generalised quantifiers cardinality of a set, i.e. the number of elements it contains.
The cardinality of a set is symbolised by writing the set or its name within two single vertical lines, i.e. | • |.
Thus, the cardinality of the set {a,b,c}, written | {a,b,c} |, is 3, because the set has three members, while | A | is 8, because there are eight entities in the universe of discourse, and so on.
Using this notation, we can also refer to the number of entities that have a certain property in a model.
For example, the cardinality of the extension of student' with respect to some model, M, is written as | [student']M* |.
Quantifiers often involve the comparison of the cardinalities of two sets and the symbol is used to represent the relation greater than, while > represents the greater than or equal to relation.
Thus, the set-theoretic statement | X | > | Y | means that the set X has more members than the set Y, while |X | > |Y| means that X has more members or the same number of members as Y.
Exercise 6.13:
Given the sets A and B specified below, which of the statements that follow are true?
A = {a,b,c,d,e}

B = {9,16,32,75,2,62} i.
ii. | B | > | C | .

|A|>|B|.

Hi.

C = {q,3,s,t,l}
|C|>|A|.
iv.

|A|>|C|.

The treatment of the quantifiers (at least) two and both is much simpler using this method than the predicate logic translations in (75).
Firstly, they are both translated directly according to the lexical translation rule in Chapter 2, as two' and both*.
Both of these quantifiers put constraints on the cardinality of the intersection of two sets, that denoted by the common noun and that denoted by the VP, but the difference between them is that two' requires the intersection of these two sets to have two or more elements while both' requires the cardinality of the set to be exactly two.
Under the analysis of the interpretation of the NP two students in (78.a), the formula translating Two students laughed is true just in case the intersection of the extension of student' with that of the VP, laugh', has two or more members (i.e. if the set of students who laugh has a cardinality of greater than or equal to two).
The translation of Both students laughed, on the other hand, is only true, according to the settheoretic interpretation of the subject NP in (78.b), if (and only if) the intersection of the set of students and the set of laughing entities has exactly two members.
These seem to prescribe the intuitively correct truth-conditions for these sentences in a considerably more simple fashion than is possible using the classical quantifiers, as can be seen from a comparison of the interpretations (78.c) and (78.d) with those of the formulae in (75.a) and (75.b), respectively.
(78) a.
b.
c.
d.

[two'(student')]M-8 = { X c A I |X n [student' ]M*\ > 2}.
[both'(student' )]M-« = {X c A I | X n [student']M-« | = 2}.
[(two'(student'))(laugh')]M-8is 1 iff |[laugh']M» n [student']*1* | > 2.
[(both'(student'))(laugh')]M«is 1 iff |[laugh']M8 n [student']M81 = 2.

Using this method, it is also possible to give interpretations to the sentences in
(76) that contain non-classical quantifiers.
The first sentence, (76.a), More students than lecturers laughed, expresses a true proposition just in case the number of students
189",207,189,6 Quantification,No info,No info,quantifier cardinality number element cardinality symbolised name single vertical line cardinality member entity universe discourse notation number entity certain property model cardinality extension student respect model student quantifier comparison cardinality symbol represent relation greater greater equal relation statement mean set member set mean member number member exercise specified statement true treatment quantifier least simpler method predicate logic translation lexical translation rule quantifier put constraint cardinality intersection set common noun difference intersection element cardinality analysis interpretation student formula student true intersection extension student laugh member set student laugh cardinality translation student hand true settheoretic interpretation subject intersection set student entity member prescribe correct sentence simple fashion possible classical quantifier comparison interpretation formula student student student student student laugh laugh student student laugh laugh student method possible interpretation sentence quantifier first sentence student lecturer true proposition number student
189,"6 Quantification who laughed is greater than the number of lecturers who laughed.
More...than is a discontinuous determiner taking two common nouns and so has the type
«e,t>,«e,t>,«e,t>,t»>.
Noun phrases with this determiner and two common nouns, Ni and N2, can be interpreted as denoting the set of sets whose intersection with the extension of N2 has more members than their intersection with the extension of N^
Thus, the NPmore students than lecturers receives the interpretation in (79.a), giving the formula translating the example sentence in (76.a) the truth-conditions in (79.b), which ensures that the formula is true if and only if there are more laughing students than laughing lecturers.
(79) a.
b.

[more_than'(lecturer')(student')]M* =
{X c A I |X n [student']1""* | > |X n [lecturer']M*|}.
[(more_than' (lecturer' )(student'))(laugh')]M-8 is 1 iff
| [laugh']1""* n [student']M'g | > | [laugh' ]M* n [lecturer' ] M *|.

On one interpretation, the sentence in (76.d), Most babies cried, can be interpreted as meaning that the number of babies who cried is greater than the number of babies who didn't cry.
The denotation of the subject NP most babies can thus be defined as in (80).
(80)

[most'(baby')]M-g = {X c A I |X n [baby']M* | > |[baby']M* n (A - X)|}.

This interpretation, however, turns out to be truth-conditionally equivalent to the interpretation that might be given to the NP more than half the babies in the sentence in (76.e), More than half the babies cried.
An appropriate interpretation for this noun phrase is given in (81) which guarantees that moreJhanjialf'(baby>')(cry'), the
(simplified) translation of (76.e), is true if (and only if) the number of crying babies is greater than the number of non-crying ones.
(81)

[more_than_half (baby')]M* = {XQ AI |X n [baby']M*| > | [baby']M*- X |}.

(81) is, however, equivalent to the interpretation given to most babies in (80), as the reader can check by showing that, where B,X c A , B n (A - X) = B - X. (76.e) and (76.d) thus turn out to be paraphrases.
Many people, however, might feel that the sentence most babies cried implies that a significantly greater proportion of babies cried than didn't, and that (76.e) and (76.d) are not truly paraphrases.
For example, in a situation where there are fifty babies and twenty-six were crying while twentyfour were not, the interpretation given to most babies in (80) and to more than half the babies in (81) verifies both sentences, but the sentence with the latter NP is more appropriate than the one with the former.
It is possible that the implication here is a pragmatic one, determined by appropriate usage rather than truth-conditions so that, if speakers know that twenty-six out of fifty babies cried they are likely to utter the sentence More than half the babies criedy rather than Most babies cried.
However, it is possible to incorporate the notion of context dependence more directly into the semantics by interpreting most with respect to some pragmatically determined numerical proportion of the number of entities in the extension of the common noun that is greater than 50 per cent.
If we let c represent this proportion, we can give most'(baby') the interpretation in (82.a).
Assuming that most in this context requires at least 85 per cent of the elements in the extension of the common noun to have the property denoted by the verb phrase and that there are fifty babies, the sentence in
190",208,190,6 Quantification,No info,No info,quantification greater number lecturer discontinuous determiner common noun type noun phrase determiner common noun set intersection extension member intersection extension npmore student lecturer interpretation formula translating sentence formula true laughing student lecturer lecturer student student lecturer lecturer student laugh laugh student laugh lecturer interpretation sentence baby interpreted number baby greater number baby cry denotation subject baby baby baby baby interpretation equivalent interpretation half baby sentence half baby appropriate interpretation noun phrase guarantee morejhanjialf baby translation true number baby greater number baby baby baby equivalent interpretation baby reader check turn paraphrase many people sentence baby greater proportion baby situation baby twentyfour interpretation baby half baby verifies sentence sentence latter appropriate former possible implication pragmatic appropriate usage speaker baby likely utter sentence half baby criedy baby possible incorporate notion context dependence respect numerical proportion number entity extension common noun greater cent proportion baby interpretation context least cent element extension common noun property verb phrase baby sentence
190,"Generalised quantifiers
(76.d) has the truth-conditions in (82.b).
The truth-conditions of More than half the babies cried are also met in any situation in which (82.b) holds, so that Most babies cried entails that More than half the babies cried (cf. (82.c)).
The converse, however, is no longer true, because there are situations (e.g. where only twenty-six out of fifty babies cried) in which the latter is true but the former is not.
Thus, the two sentences turn out not to be paraphrases under this interpretation, since they do not have exactly the same truth-conditions.
[most'(baby')]M'« =
{ X c A l |X > [baby']M'«| > c • |[baby']M«s|} where c > -5.
b.
Let c = -85 and |[baby']M8| = 50, then [most'(baby')(cry')]M'8 is 1 iff
|[cry']*1* n [baby']M'«| > 43.
c. most'(N')(VF) -> more_than_half (N')
Other quantifiers like many and/<?w also need some reference to contextually determined proportions.
For example, the sentence in (76.b), Many linguists sneezed, means that some number of linguists sneezed, the proportion being determined by the context.
Although it seems to be the case that the relevant proportion for determining the truth of this should be greater than fifty per cent, this is not always the case.
For example, a sentence like Many civil servants have knighthoods might describe a situation in which the number of civil servants in Britain who have knighthoods is proportionately greater than the number of people in other fields in Britain who also have knighthoods.
It could thus be the case that on average a profession could expect three per cent of its most senior members to be knighted, but that the number of knighted civil servants is actually five per cent of the number of all civil servants.
In such a situation, the proposition expressed by the sentence Many civil servants have knighthoods is true, despite the fact that nowhere near half of the number of such people are knighted.
Thus, we may assign to a noun phrase like Many civil servants the interpretation in (83) where, as before, c is some pragmatically determined proportion.

(82) a.

(83)

[many'(civil-servant')]M-8 =
{ X c A l |X n [civil-servant']M<81 > c • | [civil-servant' ]Ms |}.

The quantifier few, as in (76.c), Few philosophers sang, requires the number of singing philosophers to be less than fifty per cent, but again the exact proportion of singing to non-singing philosophers is determined by the context of utterance.
It is not my intention to explore this issue further or to work out exactly how the proportion c relates to the context for the different quantifiers (references to works that do can be found at the end of the chapter).
The generalised quantifier approach to NP interpretation does, however, offer greater hope for the interpretation of quantifiers other than the universal and existential quantifiers than the traditional treatment of quantification given in the earlier part of this chapter.
Indeed, it can be argued, this approach has the advantage of providing an intuitively and empirically more satisfactory analysis of many of the examples which were analysed in terms of the classical universal and existential quantifiers in the earlier sections of this chapter.
Without doubt the theory does provide a fairly simple and coherent account of quantifiers like two, both and those in the following exercise, which have an interpretation fixed independently of the context.
191",209,191,6 Quantification,No info,No info,quantifier half baby situation baby entail half baby converse true situation baby latter true former sentence paraphrase interpretation baby baby baby baby baby baby many reference proportion sentence many linguist mean number linguist sneezed proportion context relevant proportion truth greater cent many civil servant knighthood situation number civil servant britain knighthood greater number people field britain knighthood profession cent senior member number civil servant cent number civil servant situation proposition sentence many civil servant knighthood true fact half number people noun many civil servant interpretation proportion many quantifier philosopher number le cent exact proportion singing context utterance intention issue work proportion different quantifier reference work end quantifier approach interpretation greater hope interpretation quantifier universal existential traditional treatment quantification earlier part approach advantage satisfactory analysis many example term classical universal existential quantifier earlier section doubt theory simple coherent account quantifier exercise interpretation context
191,"6 Quantification
•Exercise 6.14:
Provide generalised quantifier interpretations for the determiners the, at most five, all but three and exactly twelve, using the truth-conditions of the following sentences as a guide.
i.
ii.
iii.
iv.

The linguist screamed.
At most five babies cried.
All but three philosophers are insane.
Exactly twelve students sang.

In addition to providing a framework within which more quantifiers than the traditional logical quantifiers can be defined, the theory of generalised quantifiers also allows the statement of constraints on the possible denotations of natural language quantifiers (a term which may cover just items like every, all, most, few, etc., or all determiners or the noun phrase itself, depending on the point of view being discussed).
The study of semantic universals is a topic that has not been discussed so far, but those working within the framework of generalised quantifiers have begun to tackle this aspect of semantics with some success.
The earliest proposals along these lines have, since the early part of the nineteen-eighties, been discussed and revised quite extensively, but one universal seems to be particularly robust and to be generally considered to be valid: the conservativity universal.
A quantifier phrase is called conservative if it has the conservativity property defined in (84).
Here, Q represents the extension of a quantifier, N that of a common noun and X (which may be thought of as the extension of a VP) is any subset of A, the universe of discourse.
The definition requires the intersection (i.e. the conjunction) of the extensions of the VP and the N to be a member of the set of sets denoted by a quantified NP containing the quantifier and the common noun, provided that the extension of the VP is also contained in this set of sets.
The tautologous flavour of the examples in (85) shows that this property holds for some common quantified NPs in
English.
The conservativity universal requires every quantifier in any natural language to have the property in (84).
(84)

A quantifier with extension Q is conservative iff, for N , X c A ,
XeQ(N)H(NnX)eQ(N).

(85) a.
b.
c.

Many students laughed iff Many students are students who laughed.
Every baby cried iff Every baby is a baby who cried.
Few lecturers screamed iff Few lecturers are lecturers who screamed.

(86)

Conservativity: Every natural language quantifier is conservative.

This constraint may seem somewhat uninteresting, but it captures a fact about the denotations of natural language quantifiers that is not logically necessary.
It is not, for example, logically necessary that if every man walks, then every man is a man who walks, but a fact about the meaning of every (and other natural language quantifiers).
(86) rules out many logically possible quantifiers.
For example, it rules out a quantifier that denotes a function that picks out every subset of A provided that it is
192",210,192,6 Quantification,No info,No info,quantification quantifier interpretation determiner sentence guide linguist baby philosopher insane student addition framework quantifier traditional logical quantifier theory quantifier statement constraint possible denotation natural language quantifier term item determiner noun phrase depending point view semantic universal topic framework quantifier begun tackle aspect semantics success earliest proposal line early part revised universal valid conservativity universal quantifier phrase conservative conservativity property extension quantifier common noun extension universe discourse intersection conjunction extension member set quantifier common noun extension set tautologous flavour example show property hold common np english conservativity universal quantifier natural language property quantifier extension conservative xeq nnx many student many student student baby baby baby lecturer lecturer lecturer conservativity natural language quantifier conservative constraint uninteresting capture fact denotation natural language quantifier necessary necessary man walk man man fact natural language quantifier many possible quantifier rule quantifier denotes function subset
192,"Generalised quantifiers not a subset of the extension of the common noun with which it is combined, i.e. one that denotes the set of sets {X I ~(X c: [N]M'«)}.
Since the intersection of any two sets is a subset of both, such a quantifier does not include X n [N]M-» for any X and so it is not conservative, and thus by (86) not a natural language quantifier.
Conservativity ensures that the interpretation of a noun phrase containing a common noun N is not affected by those sets of entities that are not in the extension of N. If we are interpreting the sentence Every dog barked, we do not need to take account of cats, sheep, books or anything else in the domain of discourse that are not dogs.
Furthermore, the conservativity property cuts down the number of possible extensions that quantifiers may have in any model.
For example, in a model with just two elements in its universe of discourse there are 256 logically possible quantifier extensions (= (24)n), where n = 2, the number of entities in the model).
However, if only conservative extensions are permissible, natural language quantifiers may have only one of 64 possible extensions (= (23)n).
Thus, the space in which quantifiers may have their meanings located is considerably reduced in number.
As well as identifying other general properties for quantifiers (like their semantic independence from the identity, as opposed to the number, of entities in the extension of the common noun), there have also been attempts to characterise the properties of different subsets of quantifiers.
In mathematics, a function, /+, is said to be monotone increasing if for any two elements, x and y, in the domain where x is greater than y thenf+(x) is also greater than/+(y).
The converse of this is a monotone decreasing function,/ where for any two elements, x and y, in the domain if x is greater than y thenf(x) is less thanf(y).
In formal semantics, these definitions have been adapted to deal with the way an increase or a decrease in the number of entities in the extension of the common noun in a noun phrase or in the extension of the verb phrase affects truth values.
For example, if we know that every philosopher sang in some model, then adding more singers to the model does not affect the truth value of the formula every '(philosopher')(sing'), but adding more philosophers to the model may affect its truth value because the newly introduced philosopher may not be a singer.
On the other hand, taking away one of the philosophers (or picking out a subset of the philosophers) does not affect the truth value of the formula.
If the addition of more entities to the extension of the common noun or the verb phrase does not affect the truth value of a formula with the structure Qnt'(N')(VP'), then we say that the quantifier is monotone increasing.
If the subtraction of entities from the relevant extensions fails to affect the truth value, then we say that Qnt is monotone decreasing.
We may make a further distinction between those quantifiers which are unaffected by increase or decrease in their common noun extensions (subject monotone) and those unaffected by increase or decrease of their associated VP extensions (predicate monotone) to give the four classes in (87).
Examples of the different sorts of monotone quantifiers are given in (88) to (91).
Each example contains four sentences illustrating the four properties in (87) in order.
Those sentences that are not tautologous according to the interpretation of the quantifier are indicated by a percentage sign.
The patterns show that a is both left and right monotone increasing; every is right monotone increasing, but left monotone decreasing; no is left and right monotone decreasing and most is just right monotone increasing.

193",211,193,6 Quantification,No info,No info,quantifier subset extension common noun denotes intersection set subset quantifier conservative natural language quantifier conservativity interpretation noun phrase common noun entity extension sentence dog need account cat sheep book discourse dog conservativity property cut number possible extension quantifier model element universe discourse possible quantifier extension number entity model conservative extension permissible natural language quantifier possible extension space quantifier number general property quantifier semantic independence identity number entity extension common noun characterise property different subset quantifier mathematics function monotone element domain greater greater converse monotone function element domain greater thenf thanf formal semantics definition deal way increase decrease number entity extension common noun noun phrase extension verb phrase truth value philosopher model singer model truth value formula philosopher philosopher model truth value philosopher hand philosopher subset truth value formula addition entity extension common noun verb phrase truth value formula structure qnt quantifier monotone subtraction entity relevant extension truth value qnt monotone distinction unaffected increase common noun extension subject monotone unaffected increase decrease associated extension predicate monotone class example different sort monotone quantifier sentence property order sentence tautologous interpretation quantifier percentage sign pattern show right monotone right monotone monotone monotone right monotone
193,"6

Quantification

(87) a.
b.
c.
d.

A quantifier Qnt is subject monotone increasing iff Qnt Nj VP entails Qnt
N2 VP, where [N,]M* c [N2]M-«
A quantifier Qnt is predicate monotone increasing iff Qnt N VPi entails Qnt
N VP2, where [VP,]M'« c [VP2]M'«.
A quantifier Qnt is subject monotone decreasing iff Qnt N!
VP entails Qnt
N2 VP, where [N2]M* c [N,]M*
A quantifier Qnt is predicate monotone decreasing iff Qnt N VPi entails Qnt
N VP2, where [VP2]M.S C [ V P , ] ^

(88) a.
b.
c.
d.

If a philosopher with red hair sang, then a philosopher sang.
If a philosopher sang well, then a philosopher sang.
%If a philosopher sang, then a philosopher with red hair sang.
%If a philosopher sang, then a philosopher sang well.

(89) a.
b.
c.
d.

%If every philosopher with red hair sang, then every philosopher sang.
If every philosopher sang well, then every philosopher sang.
If every philosopher sang, then every philosopher with red hair sang.
%If every philosopher sang, then every philosopher sang well.

(90) a.
b.
c.
d.

%If no philosopher with red hair sang, then no philosopher sang.
%If no philosopher sang well, then no philosopher sang.
If no philosopher sang, then no philosopher with red hair sang.
If no philosopher sang, then no philosopher sang well.

(91) a.
b.
c.
d.

%If most philosophers with red hair sang, then most philosophers sang.
If most philosophers sang well, then most philosophers sang.
%If most philosophers sang, then most philosophers with red hair sang.
%If most philosophers sang, then most philosophers sang well.

Not all quantifiers or other determiners are either monotone increasing or decreasing, however.
For example, the pre-modifying quantifier phrase exactly half in English is not monotone in either subject or predicate position, as illustrated by the sentences in (92).
(This result holds for all English phrases exactly n where n is some number.)
(92) a.
b.
c.
d.

%If exactly half the philosophers with red hair sang, then exactly half the philosophers sang.
%If exactly half the philosophers sang well, then exactly half the philosophers sang.
%If exactly half the philosophers sang, then exactly half the philosophers with red hair sang.
%If exactly half the philosophers sang, then exactly half the philosophers sang well.

A number of interesting linguistic universals can be stated about noun phrases according to the different sorts of monotone quantifiers that they contain.
One of these is that noun phrases can be conjoined by and or or only if they have quantifiers with the same monotone direction.
Thus, according to (93) we may conjoin noun phrases containing no and every (as in (94.a)) or most and every (cf. (94.b)), but not most and no (94.c) or no and a (94.d).
194",212,194,6 Quantification,No info,No info,quantification quantifier qnt subject monotone qnt entail qnt quantifier qnt predicate monotone qnt vpi entail qnt quantifier qnt subject monotone qnt entail qnt quantifier qnt predicate monotone qnt vpi entail qnt philosopher red hair philosopher philosopher philosopher philosopher red hair philosopher philosopher red hair philosopher philosopher philosopher philosopher red hair philosopher philosopher red hair philosopher philosopher philosopher philosopher red hair philosopher philosopher red hair philosopher philosopher philosopher philosopher red hair philosopher philosopher quantifier determiner monotone quantifier half english monotone subject predicate position sentence hold english phrase number red hair red hair number interesting linguistic universal noun phrase different sort monotone quantifier noun phrase quantifier monotone direction noun phrase
194,"Further reading
(93)

Co-ordination constraint: Two NPs can be co-ordinated by conjunction
(and) and disjunction (or) iff they are both monotone increasing or both monotone decreasing.

(94) a.
b.
c.
d.

No student and every lecturer liked the book.
Most students and every lecturer liked the book.
*No student and most lecturers liked the book.
*No student and a lecturer liked the book.

The classification of the quantifiers into the classes in (87) have other benefits in enabling us to identify and explain other linguistic phenomena (for example, negative polarity items cannot appear in the scope of monotone increasing functors).
Other entailment patterns have also been identified and these, together with further general properties of quantifiers, allow more universals to be stated.
These universals and constraint are somewhat technical in nature, and no more will be presented here, but
I hope that the short discussion in this section gives some idea of the fascinating and fruitful ideas resulting from the study of generalised quantifiers.
6.7

Further Reading

There is a good deal written about quantification and the interpretation of noun phrases and this section can do no more than indicate the more important texts on particular topics.
The classical quantifiers are given extensive treatment in many introductory logic and linguistic textbooks of which the most accessible introduction
(which includes a discussion on translation) can be found in Guttenplan (1986:
166-246).
The linguistic introductions to logic also discuss the classical quantifiers in detail: see Allwood, Andersen and Dahl (1977: ch.
4), Partee, ter Meulen and Wall
(1990:137-154), McCawley (1981: ch.
4), Chierchiaand McConnell-Ginet (1990: ch.
3) and, for a more formal discussion, Dowty, Wall and Peters (1981: ch.
3).
The decomposition of quantified NPs using the ^-operator can be found in Montague
(1973) and Dowty, Wall and Peters (1981:104-111).
Partee (1986) discusses the type change from e to «e,t>,t>.
There are a number of discussions about adjectives, of which Klein (1980) and Siegel (1979) are the most accessible, while Kamp (1975),
Chierchia and McConnell-Ginet (1990: 370-377) and Keenan and Faltz (1985:
118-150; 308-333) require an acquaintance with intensional semantics.
The literature about definiteness and the interpretation of definite noun phrases is already vast and still growing.
The analysis of the in this chapter owes its origins to Russell (1905) and
Montague (1973) with Strawson (1950) providing the antithesis.
See also Allwood,
Andersen and Dahl (1977: 148-155), McCawley (1981: 176-182) and the more extended discussions in Hawkins (1978), Heim (1989), Kamp (1981), Ludlow and
Neale (1991) and the papers in Reuland and ter Meulen (1987).
(Carlson (1989) and
Ojeda (1991) discuss the generic use of the definite article in English.)
The issue of quantifier scope ambiguities is addressed, inter alia, in Cooper (1983) and May
(1985).
The literature on generalised quantifiers has grown steadily since the publication of Barwise and Cooper (1984).
Partee, ter Meulen and Wall (1990: ch.
14) and Chierchia and McConnell-Ginet (1990: ch.
9) both provide introductions to the topic, and more detailed discussions can be found in Keenan and Stavi (1986), Zwarts
(1983) and van Benthem (1986: chs.
1 &3).
McCawley (1981 :ch.
14) discusses other
195",213,195,6 Quantification,No info,No info,constraint np conjunction disjunction monotone monotone student lecturer book student lecturer book student lecturer book student lecturer book classification quantifier class benefit identify linguistic phenomenon negative polarity item scope monotone functors entailment pattern general property quantifier universal stated universal constraint technical nature short discussion idea fruitful idea study quantifier good deal quantification interpretation noun phrase important text particular topic classical extensive treatment many introductory logic linguistic textbook accessible discussion translation guttenplan linguistic introduction logic classical quantifier detail allwood andersen dahl partee ter meulen wall mccawley chierchiaand formal discussion dowty wall peter decomposition np montague dowty wall peter partee discus type change number discussion adjective klein siegel accessible kamp chierchia keenan faltz require acquaintance intensional semantics definiteness interpretation definite noun phrase vast analysis origin russell montague strawson antithesis allwood andersen dahl mccawley discussion hawkins heim kamp ludlow neale paper reuland ter meulen carlson ojeda generic use definite article english issue quantifier scope ambiguity inter alia cooper steadily publication barwise cooper partee ter meulen wall chierchia introduction topic discussion keenan stavi zwarts van benthem chs mccawley discus
195,"6 Quantification types of quantifier and touches on mass terms and generics.
Mass terms and plurals are not discussed in this book, but the reader will find interesting, if difficult, discussions of these topics in Link (1983), Hoeksema (1983) and L0nning (1987).

196",214,196,6 Quantification,No info,No info,quantification type quantifier touch mass term generic mass term plural book reader interesting difficult discussion topic link hoeksema
196,"Inference

7.1

Making inferences

The semantic theory developed up to Chapter 6 has concentrated mainly on the interpretation of sentences and phrases in isolation from each other, but one of the criteria for assessing the adequacy of a semantic theory set out in Chapter 1 is that it should account for the meaning relations that hold between different expressions in a language.
This means, amongst other things, that the semantic theory proposed here ought to guarantee that, where reference and context are kept constant, the sentences in (1 .b) and (1 .c) are paraphrases of (1 .a) while (1 .d) and (1 .e) are entailments of it and (l.f) and (l.g) are contradictions of it.
(1) a.
Jo stroked the cat and kicked the dog.
b.
Jo kicked the dog and stroked the cat.
c.
The cat was stroked by Jo and the dog was kicked by Jo.
d.
Jo stroked the cat.
e.
Someone kicked the dog.
f.
The dog wasn't kicked.
g.
No-one stroked anything.
The intuitively identified relations between the sentences in (1) derive from the interpretations of the conjunction and, the negative not and the quantifier pronouns no-one and someone.
Such relations are generally referred to as logical entailments, paraphrases or contradictions.
(Note that these terms are used ambiguously between the relation that holds amongst sentences, as here, and the product sentences themselves, as in the first paragraph above.)
Because of their logical nature, these relations should be directly explained by the interpretation given to the logical elements associated with the relevant grammatical expressions (&, ~ and 3) by the model theory.
Meaning relations of this sort are used to make inferences.
An inference is the recovery of information from a discourse which is implicitly or explicitly presented as true by the speaker, but which is not stated directly.
For example, an interlocutor, say Bertie, may infer the sentence in (2.b) from the utterance of (2.a) in a situation where Bertie knows that Chester did eat the cake.
(2) a.
b.

If Chester ate the cake, then he will probably die.
Chester will probably die.

More interesting chains of inference result from combining different bits of information, expressed in sentences or formulae, to arrive at some conclusion.
For example, from the sentence in (3.a) it is possible to arrive at the inference in (3.f) using the information expressed in the sentences in (3.b) to (3.e).
In logical terms, (3) has the structure of a valid inference pattern, since the truth of the conclusion in
(3.f) is guaranteed by the truth of all of the premisses in (3.a) to (3.e).
We may indeed think of an inference pattern of this sort as an extended entailment relation where the set of premisses are treated as a compound sentence conjoined by and which directly
197",215,197,7 Inference,No info,No info,inference inference semantic theory interpretation sentence phrase isolation criterion adequacy semantic theory set account meaning relation different expression language thing semantic theory reference context constant sentence paraphrase entailment contradiction cat dog dog stroked cat cat dog stroked cat someone dog dog relation sentence interpretation conjunction negative quantifier pronoun someone relation logical entailment paraphrase contradiction note term hold sentence product sentence first paragraph logical nature relation interpretation logical element relevant grammatical expression model theory meaning relation inference inference recovery information discourse true speaker interlocutor bertie sentence utterance situation bertie chester cake chester cake chester interesting chain inference result different bit information sentence formula arrive sentence possible inference information sentence logical term structure valid inference pattern truth truth premiss inference pattern entailment relation premiss compound sentence
197,"7 Inference entails the conclusion.
Such a pattern is called an argument by logicians, but the term will not be used here in order to avoid a potentially confusing ambiguity with the argument of a functor.
In order to show the extent to which the semantic theory set up so far is adequate, it is necessary to show the extent to which it can capture the meaning relations that hold between sentences and account for intuitively valid inference patterns like that in (3).
(3) a.
b.
c.

The dog has eaten the cake.
The cake is poisonous.
If something poisonous is eaten, the entity that ate the poisonous substance will become ill.
d.
A dog is an animal.
e.
If an animal is ill, a vet should be called.
f.
Someone should call a vet.
Inference of the sort shown in (2) and (3) is called deductive inference because the truth of the conclusion results from the logical interpretation of the premisses.
There are, however, inference processes that rely on non-logical relations between expressions in a particular language.
One such relation results from lexical meaning and the lexical relations that hold in the vocabulary of some language.
The term lexical meaning is to be interpreted as concerning that part of the meaning of a sentence that results, not from its logical structure (in terms of conjunctions and quantifiers), but from the idiosyncratic meanings of its component words.
A distinction is thus being made between the meanings of grammatical or functional words like a, every, and, i/and so on, and content lexemes that translate into constants in the logical translation language.
Expressions of the former sort are interpreted in the same way with respect to all models, whilst the denotations of the latter expressions may change from model to model.
There are, however, relations that are expected to hold between content expressions within particular models.
For example, in (4), (4.b) and (4.c) may be inferred from (4.a), the first due to the meaning of the word kill and its relation to the word dead and the latter due to that of the words owl and mouse and their relations to the words bird and mammal, respectively.
(4) a.
b.
c.

An owl killed a mouse.
A mouse is dead.
A bird killed a mammal.

The inferences recovered from the meanings of words, however, are weaker than those that derive from the interpretation of logical expressions in that they can more readily be cancelled.
This is most obvious in figurative or metaphorical speech where properties usually associated with certain words are influenced by those associated with other words in the sentence.
The sentence in (5 .a), for example, is not contradictory in the same way that (5.b) is, and conveys more obvious information, despite the fact that the semi-formal sentences in (5.c), (5.d) and (5.e) describe apparent entailments associated with the words idea and swallow that ought to license the contradictory inference in (5.b).
The position is taken here that lexical meaning relations are not therefore absolute constraints on models, so not purely logical and thus able to be overridden in certain circumstances.
198",216,198,7 Inference,No info,No info,inference entail pattern argument logician term order confusing ambiguity argument functor order extent semantic theory adequate necessary show extent capture meaning relation sentence valid inference pattern dog cake cake poisonous poisonous entity poisonous substance dog animal animal ill vet someone vet inference deductive inference truth logical interpretation inference process relation expression particular language relation result lexical meaning lexical relation vocabulary language term lexical meaning part meaning sentence logical structure term conjunction idiosyncratic meaning component word distinction grammatical functional word content lexeme translate constant logical translation language expression former sort way respect model denotation latter expression model model relation hold content expression particular model due meaning word relation word dead latter due word owl mouse relation word bird mammal mouse mouse dead bird mammal inference word weaker interpretation logical expression obvious figurative metaphorical speech property certain word word sentence sentence contradictory way obvious information fact sentence apparent entailment word idea swallow contradictory inference position lexical meaning relation absolute constraint model logical able overridden certain circumstance
198,"Making inferences
(5) a.
b.
c.
d.
e.

Jo swallowed the idea.
An idea is and is not abstract.
If x swallows y, then x is concrete.
If x is concrete, x is not abstract.
An idea is abstract.

Other types of inference exist, weaker than those derived through the meaning relations of words and sentences which derive from presupposition and implicature.
The former has already been mentioned briefly with respect to definiteness and uniqueness in Chapter 6 and Chapter 1.
The difference between presupposition and entailment is that presuppositions persist for both positive and negative sentences and that the falsity of the presupposition does not so obviously falsify the original sentence as does the falsity of an entailment.
This is illustrated in (6) where the truth of (6.a) presupposes that of (6.b) and where the falsity of (6.b) does not falsify (6.a) as does the falsity of (6.c) (an entailment of (6.a)).
This topic is a controversial and interesting one, but does not directly concern us here and no more will be said about it.
(6) a.
b.
c.

The King of France is not bald.
There exists an entity that is King of France.
There exists an entity that is not bald.

Another form of pragmatic inference is briefly discussed in Section 7.4 to account for some of the apparent anomalies between the interpretations of certain natural language constructions and their logical counterparts.
This type of inference results from the implicatures of an utterance.
Implicature is probably the weakest form of inference that can be made, since it holds only where there is no information to the contrary and can be contradicted without contradicting the original sentence.
For example, the truth of (7.a) implicates the truth of (7.b), but this implicature can be cancelled without contradiction as shown by the sentence in (7.c) which is not obviously contradictory despite the fact that it denies the truth of (7.b) (although most speakers of English might judge the former to be odd or paradoxical).
(7) a.
b.
c.

Every boy in the room kissed Fiona.
Someone kissed Fiona.
Yes, that's true.
Every boy in the room did kiss Fiona, but there were no boys in the room!

The different sorts of inference mentioned above seem to form a hierarchy in terms of how they relate to the sentence (or sentences) from which the inference is made.
Inference deriving from entailment (or paraphrase or contradiction) must always hold, while that made through implicature need not hold.
The inferences determined by lexical meaning (and presupposition) fill intermediate slots in the inference hierarchy shown in (8).
(8)

Inference hierarchy: entailment > lexical meaning > implicature.

In this chapter, we will concentrate on deductive inference that can be made using the logical operators and connectives that have been introduced in previous chapters, showing how the interpretation given to them explains common inference strategies.
We will then take an all too brief look at a way of incorporating lexical
199",217,199,7 Inference,No info,No info,inference idea idea abstract swallow concrete concrete abstract idea abstract type inference weaker meaning relation word sentence presupposition implicature former definiteness uniqueness difference presupposition entailment presupposition positive negative sentence falsity presupposition original sentence falsity entailment truth presupposes falsity falsity entailment topic controversial interesting concern king france bald entity king france entity form pragmatic inference account apparent interpretation certain natural language construction logical counterpart type inference result utterance implicature weakest form inference information contrary original sentence truth implicates truth implicature contradiction sentence contradictory fact truth speaker english former odd paradoxical boy room fiona someone fiona true boy room kiss fiona boy room different sort inference form hierarchy term relate sentence sentence inference inference entailment paraphrase contradiction implicature inference lexical meaning presupposition intermediate slot inference hierarchy inference hierarchy entailment lexical meaning implicature deductive inference logical operator connective previous chapter interpretation common inference strategy brief look way lexical
199,"7 Inference meaning into the theory and end with a short discussion of the way implicature can account for some non-truth-functional aspects of the English counterparts of the logical connectives &, v and —».
7.2

Logical deduction

Deductive inference derives from the primary meaning relations between sentences, entailment, paraphrase and contradiction.
By formally defining the latter, therefore, we can show how adequately the model theory defined in Chapter 6 accounts for valid inferences.
Within truth-conditional semantics, the primary logical meaning relations can be given general definitions in terms of the relation between the truth or falsity of the proposition expressed by one sentence and that expressed by another.
One sentence is an entailment of another only if the truth of the former is guaranteed by that of the latter.
In other words, whenever (the proposition expressed by) a sentence is true, (the propositions expressed by) its entailments are also true, although the reverse need not be the case.
These are, of course, just the truthconditions of material implication and so we can characterise entailment between two sentences in terms of their combination using —>.
Since entailment, like the other logical meaning relations, holds in all situations, the material implication must be true in all situations.
This allows us to define entailment as holding between two sentences when the formulae associated with each of the sentences conjoined by the material implication sign, ->, make a tautology, a formula that is always true no matter what the denotations of its component parts happen to be.
Adopting the symbol I- to signify the relation entails (so that Sj h S2 means sentence 57 entails sentence S2) provides the definition of entailment in (9).
(9)

Entailment: S, \- &> iff S,' -» S2' is a tautology.

To see how this definition works, we can take as an example the simplest entailment in our fragment which results from an inference rule that logicians call conjunction elimination.
This rule allows the inference that each conjunct of a true formula is also true.
For example, in (10), the truth of both (lO.b) and (lO.c) may be inferred from that of (lO.a) according to this rule.
(10) a.
b.
c.

3x [Vy[cake'(y) <-> x = y] & (eat'(x))(chester')] & sick'(chester').
3x [Vy[cake'(y) <-> x = y] & (eat'(x))(chester')] .
sick'(Chester').

According to (9), if conjunction elimination is a valid rule, a sentence that translates into a formula conjoined by & (e.g. (lO.a)) entails the sentences that translate into the conjuncts (e.g. (lO.b) and (lO.c)), provided that the material implication formed from the conjoined formula and each of its conjuncts is always true no matter what truth values are associated with the antecedent or the consequent.
In other words, the sentence in (11.a) entails both (11 .b) and (1 l.c) if (and only if) (12.a) and (12.b) are tautologies.
(11) a.
b.
c.
200

Chester ate the cake and was sick.
Chester ate the cake.
Chester was sick.",218,200,7 Inference,No info,No info,inference meaning theory short discussion way implicature account english counterpart logical connective logical deduction deductive inference primary meaning relation sentence entailment paraphrase contradiction latter show model theory account valid inference semantics primary logical meaning relation general definition term relation truth falsity proposition sentence sentence truth latter word proposition sentence true proposition entailment true reverse course truthconditions material implication characterise entailment sentence term combination entailment logical meaning relation hold situation material implication true situation define entailment sentence formula associated sentence material implication sign tautology formula true matter denotation component part symbol signify relation entail mean sentence entail sentence entailment entailment tautology work simplest entailment fragment result inference rule logician call conjunction elimination rule inference conjunct true formula true truth rule cake chester sick chester cake chester sick chester conjunction elimination valid rule sentence formula entail sentence translate conjuncts material implication formula conjuncts true matter truth value associated antecedent consequent word sentence entail tautology chester cake sick chester cake chester sick
200,"Logical deduction
(12) a.
b.

(3x [Vy[cake'(y) <-> x = y] & eat'(x)(chester')] & sick*(Chester'))
-> 3x [Vy[cake'(y) <-> x = y] & eat'(x)(chester')].
(3x [Vy[cake'(y) <-> x = y] & eat'(x)(chester')] & sick'(Chester'))
—> sick'(Chester').

It is easy to show that both formulae in (12) are indeed tautologies by using the truth table method introduced in Chapter 3.
If we represent the formula denoted by
Chester ate the cake as p and that expressed by Chester was sick as q, we can see that the formula (p & q) —> p is a tautology because the final implication always has the value t (or 1) no matter what truth values are assigned to p and q as shown in (13).
Hence, according to (9), the entailments in (11) are valid and our theory successfully guarantees that a sentence of the form S} and S2 entails both S} and S2 (and hence that both these sentences may be inferred from the former).
(13) p q p&q t t f f t f t f t f f f

(p & q) -> p t t t t

The two other sentential meaning relations of paraphrase and contradiction can also be defined in terms of tautologies that result from combining appropriate formulae with particular connectives.
Two sentences paraphrase each other if they both have precisely the same truth-conditions.
In other words, sentences that are paraphrases of each other express propositions that are both true or both false (i.e.
logically equivalent) in all the same situations.
Hence, we may show that two sentences are paraphrases by showing that the formulae they express, when conjoined by the equivalence connective, <->, make a tautology.
This is expressed by the definition in (14) where the symbol H h is used to signify the relation paraphrases.
(14)

Paraphrase: S, HK &_ iff S,' <-> &' is a tautology.

We have already seen the equivalence that holds between ^-expressions applied to an argument and their ^-converted equivalents in Chapter 5.
By (14), this is sufficient to make passive and active pairs paraphrases as, intuitively, they should be.
For example, the semantics of the lambda operator ensures that the formulae in (15.c) and (15.d) are truth-conditionally equivalent (so that their conjunction by <-> is always true) and, thus, by (14), the English sentences that they translate, (15.a) and (15.b), respectively, are paraphrases as required.
(15) a.
b.
c.
d.

Chester was kicked by Jo.
Jo kicked Chester.
Xx [(kick'(x))(jo')](chester').
(kick' (Chester' ))(jo').

There is another simple logical paraphrase between sentences which was mentioned in Chapter 3 and involves the truth-conditional equivalence between
201",219,201,7 Inference,No info,No info,logical deduction cake chester sick chester cake chester cake chester sick chester sick chester easy formula tautology truth table method represent formula chester cake chester sick formula tautology final implication value matter truth value shown entailment valid theory sentence form entail sentence former sentential meaning relation paraphrase contradiction term tautology result appropriate formula particular connective sentence paraphrase word sentence paraphrase proposition true false equivalent situation sentence paraphrase formula express equivalence connective tautology symbol signify relation paraphrase paraphrase tautology equivalence applied argument equivalent sufficient passive active pair paraphrase semantics lambda operator formula equivalent conjunction true english sentence translate chester chester kick chester kick chester simple logical paraphrase sentence equivalence
201,"7 Inference positive formulae and their doubly negated counterparts.
As we saw in Chapter 3, two negatives in logical expressions are equivalent to a positive, so that ~(~p) is truthconditionally equivalent to p, where p is any formula.
This is shown in the truth table in (16) and so, according to (14), (17.a) and (17.b) are paraphrases because (17.c) is a tautology.
(16)

(17) a.
b.
c.
p

~p

~(~p) t f f t t f p <-> ~(~p) t t

It rained.
It is not the case that it didn't rain.
rain' <-> ~(~rain').

Because the definition of paraphrase in (15) utilises truth-conditional equivalence, it also predicts that two paraphrases entail each other.
This results from the fact that a formula of the form p <-> q is truth-conditionally equivalent to one of the form
((P —* Q) & (Q —> P)) ( a s shown in the truth table in (43) of Chapter 3).
By conjunction elimination, therefore, we can infer that both p —> q and q —» p hold and so by the definition of entailment in (9), paraphrases that translate into p and q are also entailments of each other.
Thus, the definition of paraphrase in (14) treats the relation as equivalent to mutual entailment, as suggested in Chapter 1.
The final relation between sentences that we need to look at is contradiction.
Here, the truth of the proposition expressed by one sentence guarantees the falsity of that expressed by another.
There are a number of ways this can be defined using the connectives, one of which is to use material implication and negation to bring out the relation between contradiction and entailment.
Essentially, the definition of contradiction in (18), which uses the symbol t= to denote the relation contradicts, defines one sentence as contradicting another if the latter entails the negation of the former.
(18)

Contradiction: Si •= S2 iff ST -» ~S 2 ' is a tautology.

From (18) it is easy to see that the negation of any entailment is a contradiction.
Thus, the sentence in (19.a) is contradicted by that in (19.b) which is the negation of an entailment derived from conjunction elimination.
This is guaranteed by the fact that
(19.c) is a tautology, which is shown by the truth table in (20) where p represents the translation of Chester ate the cake and q that of Chester was sick.
(19) a.
b.
c.

202

Chester ate the cake and was sick.
Chester wasn't sick.
(3x [Vy[cake'(y) <-> x = y] & eat'(x)(chester')] & sick'(Chester'))
-^ ~(~(sick'(Chester'))).",220,202,7 Inference,No info,No info,inference positive formula counterpart negative logical expression equivalent positive equivalent formula truth table paraphrase tautology rain rain paraphrase equivalence paraphrase entail result fact formula form equivalent form truth table conjunction elimination infer hold entailment paraphrase translate paraphrase relation equivalent mutual entailment final relation sentence contradiction truth proposition sentence guarantee falsity number way connective use material implication negation relation contradiction entailment us symbol denote relation contradicts sentence latter entail negation former contradiction tautology easy negation entailment contradiction sentence negation entailment conjunction elimination fact tautology truth table translation chester cake chester sick chester cake sick chester sick cake chester sick chester sick chester
202,"Logical deduction
(20) p q p&q

~q

~(~q) t t f f t f t f t f f f f t f t t f t f

((p & q) -> ~(~q)) t t t t

Having given a formal definition of the primary meaning relations between sentences, we can proceed to an examination of some of the valid deductive inferences that are captured by the semantic theory proposed in Chapters 2 to 6.
Clearly, any entailment or paraphrase of a sentence is a valid inference that can be made from that sentence.
But, as we have seen, inferences often operate over sets of sentences rather than single ones.
In other words, deductive inference normally takes the shape of an inference pattern that contains a set of premisses and a conclusion.
An inference pattern is valid if, and only if, the truth of all its premisses guarantees the truth of the conclusion.
This is like entailment in an extended sense where the entailing sentence is a conjunction of all the premisses and the conclusion is entailed by this conjunction.
An inference pattern may therefore be defined as valid, if the material implication formed with the conjunction of the translations of its premisses and that of its conclusion as the consequent is a tautology, as in (21).
(21)

An inference pattern Si,...,Sn.i \- Sn is valid iff (S,' & .... & Sn.,') -» Sn' is a tautology.

A simple inference pattern that is intuitively valid is shown in (22) where (22.a) and (22.b) are the premisses and (22.c) is the conclusion.
(22) a.
b.
c.

Fiona is either at home or in the library.
She isn't in the library.
Then she is at home.

According to (21), we can show that this is valid according to the model theory by proving that a formula with the structure <(> —> \|/ is a tautology, where \\f is the translation of (22.c) and ()> is the conjunction of the translations of (22.a) and (22.b).
If we let p stand for the formula translating Fiona was at home and q stand for that translating Fiona was in the library, then the logical structure of the inference pattern is ((p v q) & ~q) —> p.
The truth table in (23) shows that this expression is tautologous, thus proving that the inference pattern in (22) is actually valid according to the semantic interpretation provided for or and not.

203",221,203,7 Inference,No info,No info,logical deduction formal primary meaning relation sentence examination valid deductive inference semantic theory chapter entailment paraphrase sentence valid inference sentence inference sentence single word deductive inference shape inference pattern premiss inference pattern valid truth premiss guarantee truth entailment extended sense sentence conjunction premiss entailed conjunction inference pattern valid material implication conjunction translation consequent tautology inference pattern valid tautology simple inference pattern valid premiss fiona home library library home show valid according model theory formula structure tautology translation conjunction translation formula translating fiona home translating fiona library logical structure inference pattern truth table show expression tautologous inference pattern valid semantic interpretation
203,"7 Inference
(23)

7.2.1 p q pvq

~q t t f f t f t f t t t f f t f t

(p V q) & ~q ((p vq)&~q)-)p f t f f t t t t

Using the connectives

In this section, we look at some of the many valid inference patterns that can be constructed using the propositional connectives.
Only a few of these are discussed here and the reader is referred to a good introduction to propositional logic for a fuller discussion.
Only the most commonly used patterns involving the expressions and, or, not and //are discussed below.
We have already seen one valid inference pattern involving disjunction and negation in (22) above.
Another one, called disjunction elimination by logicians, exploits the relation between disjunction and implication to arrive at a particular conclusion.
An inference pattern with the appropriate structure is shown in (24), where
(24.a), (24.b) and (24.c) are the premisses and (24.d) is the conclusion.
The logical structure of the premisses and conclusion in terms of propositional variables and connectives is shown on the right hand side of the example where p stands for Jo kicked Bertie, q for Jo kicked Ethel and r for Ethel hit Jo.
The validity of this inference pattern is shown by the truth table in (25) which is constructed from (24) along the lines set out in (21).
Since the complex formula on the right is always true no matter what values are assigned to the basic formulae, the inference pattern is valid and the conclusion in (24.d) may be inferred from the premisses, as required.
(Note that the formula ((p v q ) & ( p - > r ) & ( q - > r ) ) - > r is false if, and only if, all of the conjuncts in the antecedent are true and the consequent is false.
To show that it is true, therefore, it is sufficient to show that one of the conjuncts is false or that the consequent is true.
Hence, the intermediate step of showing the truth value of the antecedent (p v q) &
(p —> r) & (q —> r) is omitted from (25).)
(24) a.
b.
c.
d.

Jo kicked Bertie or Ethel.
If Jo kicked Bertie, then Ethel hit Jo.
If Jo kicked Ethel, then Ethel hit Jo.
Ethel hit Jo.
pvq p-»r q-»r r
Other important inference rules involve material implication.
Given the truth of an if... then sentence and its antecedent, we can confidently infer the truth of the consequent, as illustrated in (26).
This inference pattern is called modus ponens by logicians and its validity is shown by the truth table in (27).

204",222,204,7 Inference,No info,No info,inference pvq connective many valid inference pattern propositional connective reader good propositional logic fuller discussion pattern expression valid inference pattern disjunction negation one disjunction elimination logician exploit relation disjunction implication particular inference pattern appropriate structure premiss logical structure premiss term propositional connective right hand side stand bertie ethel ethel validity inference pattern truth table line complex formula true matter value basic formula inference pattern valid premiss note formula false conjuncts true consequent false show true sufficient show false consequent true intermediate step truth value antecedent bertie ethel bertie ethel kicked ethel ethel ethel pvq important inference rule material implication truth sentence antecedent infer truth consequent inference pattern modus ponens logician validity truth table
204,"Logical deduction
(25)
(pvq) p q r t t t f t f f f

(26) a.
b.
c.
t t t f f t t t f f t f f t f f p->r q ^ r t f t t f t t t t f f

((pvq) &(p->r) &(q->r))->r t f t t t f t t t t t t t t t t

If Ethel was not at home, then she was in the pub.
Ethel was not at home.
Ethel was in the pub.
p q

(27) p q

(p->q) t t f f t f t f t f t t

(p->q) &p ((p -> q) & p) -> q) t f f f t t t t

Another inference rule involving material implication is called modus tollens and is in effect the reverse of modus ponens.
Given a conditional and the negation of its consequent, it is possible to infer that the antecedent is also false.
In other words, given two sentences If SI then S2 and It is not the case that S2, we infer It is not the case that 57.
An example of this type of inference pattern is given in (28) where the final conclusion in (28.d) relies on the equivalence between p and —p discussed above.
(28) a.
b.
c.
d.

If Ethel was not at home, then she was in the pub.
Ethel was not in the pub.
It is not the case that Ethel was not at home.
Ethel was at home.

~p -> q
~q
—p p

Exercise 7.1:
Prove that modus tollens is valid by constructing the appropriate truth table.

205",223,205,7 Inference,No info,No info,logical deduction pvq pvq ethel home pub ethel home ethel pub inference rule material implication modus tollens effect reverse modus ponens conditional negation consequent possible infer antecedent false word sentence infer type inference pattern final equivalence ethel home pub ethel pub ethel home ethel home exercise prove modus valid appropriate truth table
205,"7 Inference
These inference pattern types can be put together to construct quite complex chains of inference with new premisses being deduced from old ones to arrive at an ultimate conclusion.
In texts, however, the premisses and intermediate conclusions of a chain of inference are often not expressed.
This is illustrated in the short dialogue between Bertie and Fiona in (29).
(29) a.
b.
c.
d.

Fiona: That's Ethel now.
Bertie: What is she doing?
Fiona: Well, she didn't kick the cat.
Bertie: OK, I'll slice the lemon.

The interesting thing about this exchange from our point of view is how Bertie's response in (29.d) relates to Fiona's statement in (29.c).
We can show how Bertie gets to his conclusion by making explicit the unexpressed premisses that he uses with
Fiona's statement in (29.d) to come to intermediate conclusions that ultimately lead to his assertion of (29.d).
The full inference pattern in English is set out in (30).
(30.a) is the initial premiss asserted by Fiona.
Bertie uses the (implicit) premiss in (30.b) to arrive at the intermediate conclusion in (30.c) via modus tollens.
The latter sentence is, as we have seen, a paraphrase of (30.d) which can then be used to derive (30.f) from the premiss in (30.e) via modus ponens.
This conclusion can then be combined with another conditional premiss in (30.g) to give the conjunction in (30.h).
Applying conjunction elimination to this (cf. (12) above) yields (30.i) which combines with the final premiss in (30.j) to give the final conclusion in (30.k) again via modus ponens.
(30) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.
k.

Ethel didn't kick the cat.
If Ethel doesn't win a golf match, she kicks the cat.
It is not the case that Ethel didn't win the golf match.
Ethel won the golf match.
If Ethel won the golf match, she wants a drink.
Ethel wants a drink.
If Ethel wants a drink, we need gin and sliced lemon,
We need gin and sliced lemon.
We need sliced lemon.
If we need sliced lemon, I'll slice it.
I'll slice the lemon.

The logical structure of this inference pattern is set out in (31) where q stands for
Ethel kicked the cat, p for Ethel won the golf match, r for Ethel wants a drink, s for We need gin, u for We need sliced lemon and v for I'll slice the lemon.
The inference rule that licenses the steps taken at each point in the inference pattern is indicated on the right hand side and inasmuch as each of these small steps is valid, so the whole inference pattern is validated by the semantic interpretation given to the connectives in the model theory.
(31) a.
b.
c.
d.
e.
206

~q.
~p —> q.
—p.
p.
p —» r.
premiss premiss deduction from a & b via modus tollens deduction from c via negation elimination premiss",224,206,7 Inference,No info,No info,inference inference pattern type complex chain inference new premiss old arrive ultimate text intermediate conclusion chain inference short dialogue bertie fiona fiona ethel bertie fiona well kick cat bertie slice lemon interesting exchange point view bertie response fiona statement show bertie explicit unexpressed fiona statement intermediate conclusion assertion full inference pattern english initial premiss fiona bertie implicit premiss intermediate modus tollens latter sentence paraphrase derive premiss ponens conditional premiss conjunction conjunction elimination yield final premiss final modus ponens ethel kick cat ethel win golf match kick cat ethel win golf match ethel golf match ethel golf match drink ethel want drink ethel want drink need gin lemon need gin lemon need lemon need lemon slice slice lemon logical structure inference pattern stand ethel cat ethel golf match ethel want drink need gin lemon slice lemon inference rule license step point inference pattern right hand side small step valid whole inference pattern semantic interpretation connective model theory premiss premiss deduction modus tollens deduction negation elimination premiss
206,"Logical deduction f.
g.
h.
i.
j.
k.
r.
r —» (s & u).
s & u.
u.
u —> v.
v.
deduction from d & e via modus ponens premiss deduction from f & g via modus ponens deduction from h via conjunction elimination premiss deduction from i & j via modus ponens

So far we have looked at the way inference patterns are constructed from information gleaned from entailments and paraphrases, but conclusions can also be drawn from the use of contradictions.
The most obvious way that contradictions are used in discourse is to challenge or disprove the truth of other assertions, as exemplified in the simple exchange in (32).
(32) a.
b.
c.

Jo: Fiona said she's working hard on her thesis today.
Bertie: But F ve just seen her in the pub.
Jo: Oh dear!
She lied to me.

The reasoning that lies behind this exchange is fairly simple.
Suppose that Fiona has said to Jo that she is working hard on her thesis and so he asserts (32.a) to Bertie.
On standard assumptions that people generally speak the truth, both Jo and Bertie can infer from this that Fiona is working hard on her thesis is true (let p represent the formula that translates this sentence).
Bertie, however, has seen Fiona in the pub and asserts (32.b) (call the formula that translates Fiona is in the pub q).
At this point an unexpressed premiss comes into play to the effect that if someone is in the pub then they are not working hard, from which we can get the formula q -> ~p.
However, from this and Bertie's assertion, we can infer ~p, via modus ponens.
This, of course, contradicts the earlier inference p.
Although this does not contradict (32.a), since
Fiona did say that she was working hard, Jo can infer that she did not assert p truthfully and his knowledge of lexical meaning allows him to infer that she lied.
Hence, while Bertie does not directly contradict Fiona's assertion, he provides information that can be used to show that Fiona has been economical with the truth with respect to her working hard on her thesis.
There is another use of contradictory information that involves a form of indirect reasoning called a reductio ad absurdum argument (or negation introduction) by logicians.
In this form of reasoning, an assumption is made in the course of an inference pattern which is not itself validated by the current premisses.
This assumption is then used to deduce logically that some other sentence is both true and false.
From this logically false conclusion, it follows that the assumption must be false, since one cannot deduce a false conclusion from a true premiss.
This form of reasoning thus allows one to eliminate different possible explanations; any assumption that leads to a contradiction must be false and so can be discarded.
This may sound a bit peculiar, but is exemplified in the dialogue in (33) which takes place between Jo and Ethel after Jo has discovered that the poisoned cake has been eaten.
(33) a.
b.
c.

Jo: The dog ate the poisoned cake.
Ethel: F ve just seen him playing with a ball.
Jo: Then who did eat the cake?

207",225,207,7 Inference,No info,No info,logical deduction deduction modus ponens premiss deduction ponens deduction conjunction elimination deduction modus ponens way inference pattern information entailment paraphrase conclusion use contradiction obvious way contradiction discourse challenge disprove truth assertion simple exchange fiona hard thesis bertie pub dear lie exchange simple suppose fiona hard thesis bertie standard assumption people truth bertie infer fiona hard thesis true formula translates sentence bertie fiona pub formula fiona pub point unexpressed premiss play effect someone pub formula bertie assertion infer modus ponens course contradicts earlier inference contradict fiona hard infer assert truthfully knowledge lexical meaning infer bertie fiona assertion information show fiona economical truth respect hard thesis contradictory information form indirect reasoning reductio absurdum argument negation logician form reasoning assumption course inference pattern current premiss assumption deduce true false false assumption false true premiss form reasoning eliminate different possible explanation assumption lead contradiction bit peculiar dialogue place ethel cake dog poisoned cake ethel ball eat cake
207,"7 Inference
This exchange might seem peculiar because Jo asserts in (33.a) that a certain entity ate the poisoned cake, but in (33.c) asks Ethel who that entity is.
Ethel's response to Jo's initial statement does not directly contradict Jo's statement in (33.a) but she supplies information that when combined with certain unexpressed premisses show that it must be false.
Suppose that Jo finds the plate holding the poisoned cake empty and so concludes that it has been eaten.
In order to show that this is the case, he must, by the interpretation given to such a sentence, find some entity that ate the cake.
In logical terms, he must find something that can be associated with the variable z that satisfies the open formula 3x [Vy[cake'(y) & poisoned'(y) <-> JC = y] & eat'(x)(z)].
He makes a first assumption that Chester is the culprit, but when Fiona makes her assertion in (33.b), he brings to bear three background premisses that show that his assumption must be false.
The first is that if someone has eaten the poisoned cake then they are dead; the second is that if someone is playing with a ball then they are alive; and the third one derives from the meaning of the word alive to the effect that if something is alive then it is not dead.
From the second of the implicational premisses and Ethel's assertion, we infer, via modus ponens, that
Chester is alive.
From this conclusion and the third implicational premiss, modus ponens again allows us to infer that Chester is not dead.
However, from Jo's assumption and the first of the additional premisses, we conclude that Chester is dead.
There is another deduction rule whose validity is intuitively obvious (and provable) that allows us to construct a conjunction from two true formulae (this is often called conjunction introduction).
Since we have proved that Chester is dead is true and that Chester is not dead is also true, we can infer that Chester is dead and not dead is also true, but a formula of the form p & ~p can never be true.
Hence, we are forced to conclude that the original assumption, that Chester ate the cake, must be false, since it was this that led to the contradiction.
Hence, Jo can infer from Ethel's statement that Chester didn't eat the cake so he is none the wiser as to who did and responds with a question.
This somewhat convoluted chain of argument is spelled out in English in (34) and the logical form of the inference pattern is shown in (35).
Again, in the latter, the rule that licenses each step is given on the right hand side.
The sentence Chester ate the poisoned cake is represented by p, Chester is dead is represented by q, Chester is playing with a ball is represented by r and Chester is alive is represented by s.
(34) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.

208

(Someone ate the poisoned cake.)
Chester ate the poisoned cake.
If Chester ate the poisoned cake, then he is dead.
Chester is dead.
If Chester is playing with a ball, then he is alive.
Chester is playing with a ball.
Chester is alive.
If Chester is alive, then he is not dead,
Chester is not dead.
Chester is dead and he isn't dead,
Chester didn't eat the poisoned cake.",226,208,7 Inference,No info,No info,inference exchange peculiar certain entity cake ethel entity ethel response initial statement statement supply information certain unexpressed premiss show plate holding cake empty order show sentence entity cake logical term variable satisfies open formula cake eat first assumption chester culprit fiona assertion brings bear background premiss show assumption first someone cake dead second someone ball alive third one word alive effect alive dead second implicational premiss ethel assertion infer modus ponens chester alive third implicational premiss modus ponens infer chester dead assumption additional premiss conclude chester dead deduction rule validity obvious provable conjunction true formula conjunction chester dead true chester dead true infer chester dead dead true formula form conclude original assumption chester cake contradiction infer ethel statement chester cake none wiser convoluted chain argument english logical form inference pattern latter rule license step right hand side sentence chester cake chester dead chester playing ball chester alive someone cake chester cake chester cake dead chester dead chester ball alive chester playing ball chester alive chester alive dead chester dead chester dead dead chester eat cake
208,"Logical deduction
(35) a.
b.
c.
d.
e.
f.
g.
h.
i.
j assumption
Pp->q.
premiss deduction from a
& b via modus ponens q.
r—»s.
premiss r.
premiss deduction from d & e via modus ponens s.
s —» ~q.
premiss deduction from f & g via modus ponens
~q.
deduction from c & f via conjunction introduction.
q & ~q.
reductio ad absurdum
~PThe reason that reductio ad absurdum arguments work can be seen by considering the logical structure of the inference pattern in (35).
From the assumption of p, i.e. that Chester ate the poisoned cake, we come step by step to the contradictory conclusion in (35.i), i.e. that Chester is and is not dead.
As we have seen above, a conclusion is truth-conditionally related to its premisses by material implication.
Hence, we can link the assumption p with the conclusion q & ~q in a conditional expression as in (36.a).
The creation of an implication combining an assumption with a conclusion reached from that assumption by standard deductive rules is a valid rule of logic, called conditional introduction.
Because the consequent is a logical contradiction, i.e. it can never be true, the conditional, by the semantics of —>, can only be true if p is false.
Hence, the generation of a contradiction from an assumption must lead to the conclusion that the original assumption was false (a version of modus tollens).
This is clearly brought out in the conditional English sentence in (36.b) from which it is intuitively necessary to conclude that Chester did not eat the poisoned cake.
Logically valid reductio ad absurdum arguments thus mirror certain human deductive processes and our theory thus provides an explanation of these in formal terms.
(36) a.
b.
p -> (q & ~q).
If Chester ate the poisoned cake, then Chester is and is not dead.

There are many other logical deductions utilising the connectives that follow validly from the interpretation that has been given to them in earlier chapters.
However, the examples given here should be sufficient for the reader to see how they work.
Most inference patterns can be reduced to repeated steps involving the seven rules introduced above, repeated as (37.a) to (37.g).
(37.h) introduces another valid inference pattern involving disjunction and negation which the reader can check is indeed valid by showing that ((p v q) & ~p) -» q is a tautology.
(37) a.
b.
c.
d.
e.
f.
g.
h.

Conjunction elimination (CE): p & q i- p.
Conjunction introduction (CI): p, q H p & q.
Disjunction elimination (DEI): p v q, p -» r, q -» r h r.
Disjunction elimination 2 (DE2): p v q, ~p \- q.
Modus ponens (MP): p —> q, p \- q.
Modus tollens (MT): p -> q, ~q \- ~p.
Conditional introduction (Cndl): (p \- q) h p -> q.
Reduction ad absurdum (RA): (p h (q & ~q)) h ~p.

209",227,209,7 Inference,No info,No info,logical deduction assumption deduction modus ponens premiss premiss deduction modus ponens premiss deduction ponens deduction conjunction reductio absurdum reason reductio absurdum argument work logical structure inference pattern assumption chester cake come step step contradictory chester related premiss material implication link assumption conditional expression creation implication assumption assumption standard deductive rule valid rule logic conditional consequent logical contradiction true conditional semantics true false generation contradiction assumption original assumption false version modus tollens conditional english sentence necessary conclude chester eat cake valid reductio absurdum argument mirror certain human deductive process theory explanation formal term chester cake chester dead many logical deduction connective follow validly interpretation earlier chapter sufficient reader work inference pattern step rule introduces valid inference pattern disjunction negation reader check valid tautology conjunction elimination conjunction disjunction elimination dei disjunction elimination modus ponens modus tollens conditional cndl reduction absurdum
209,"7 Inference
Exercise 7.2:
Using the rules of deduction in (37), show why the following deductions are valid.
Some ancillary premisses derived from the meanings of some of the words may need to be invoked.
Make sure that these are included in the structure of the inference pattern.
i.
Either Fiona or Bertie poisoned the cake.
If Fiona poisoned the cake, then she will have a bottle of poison in her bedroom and a book about unsolved murders on her bedside table.
Therefore, if Bertie didn't poison the cake, then Fiona will have a book about unsolved murders on her bedside table.
ii.
If Ethel lost the golf match, then she will be tired and unhappy and if she is unhappy, there will be no gin left.
But there is some gin left, so Ethel won the golf match.
iii.
If Jo likes Ethel, then he will give her a copy of Jane Eyre or a new bottle of gin.
If he gives her Jane Eyre, she will not be pleased and think he's a creep, but if he gives her a new bottle of gin, she will be pleased but still think he's a creep.
So if Ethel doesn't think Jo is a creep, then he doesn't like her!

7.2.2

Reasoning with quantifiers

At the end of Chapter 6, a number of entailments were mentioned that are associated with different types of quantifier in terms of (left or right) monotonicity and also a very general entailment, that of conservativity, which is believed by many formal semanticists to be applicable to all quantifiers in every natural language.
There are, however, many other entailments from sentences containing noun phrases with different quantifiers.
In this section, however, we consider only deduction rules that are associated with the classical quantifiers, V and 3.
Consider the inference pattern in (38) which is valid, according to (21), if, and only if, the formula in (39) is a tautology.
(38) a.
b.
c.

Every student is intelligent.
Fiona is a student.
Therefore, Fiona is intelligent.

(39)

(Vx [student'(x) intelligent' (fiona').

-> intelligent'(x)]

& student'(fiona'))

->

Because the formula in (39) is in the form of a material implication, it is false only if the antecedent is true and the consequent is false.
To prove that (39) is always true, therefore, it suffices to show that this cannot ever be the case, i.e. that it is impossible for every student to be intelligent and for Fiona to be a student but for
Fiona not to be intelligent.
It is relatively easy to show that this is the case by using a reductio ad absurdum argument, i.e. by showing that the assumption that (39) is false leads to a contradiction.
Assuming, then, that (39) is false, the antecedent formula VJC
[student'(x) -> intelligent'(x)] & student'(fiona') must be true.
Since this is a
210",228,210,7 Inference,No info,No info,inference exercise rule deduction show deduction valid ancillary premiss word invoked structure inference pattern fiona bertie cake fiona cake bottle poison bedroom book unsolved murder bedside table bertie poison cake fiona book unsolved murder bedside table ethel golf match tired unhappy unhappy gin gin ethel golf match ethel copy jane eyre new bottle gin jane eyre creep new bottle gin creep ethel creep reasoning quantifier end number entailment different type quantifier term right monotonicity general entailment conservativity many formal semanticist applicable quantifier natural language many entailment sentence noun phrase different quantifier deduction rule classical quantifier inference pattern valid formula tautology student intelligent fiona student fiona intelligent student intelligent fiona intelligent student fiona formula form material implication false antecedent true consequent false prove true suffices impossible student intelligent fiona student fiona intelligent easy show reductio absurdum argument assumption false lead contradiction false antecedent formula vjc student intelligent student fiona true
210,"Logical deduction conjunction, both student'(fiona') and VJC [student'(x) —»intelligent '(x)] must also be true by conjunction elimination.
For the latter formula to be true according to the truth-conditions for universally quantified formulae discussed in the last chapter, the open formula student'(x) -» intelligent'(x) must be satisfied by every possible assignment of a value to x.
One of these assignments associates x with the entity denoted by fiona', i.e. WOMAN2, and satisfies student'(x) —> intelligent'(x) only if it satisfies intelligent'(x) or fails to satisfy student'(x).
Since we have assumed that student'(fiona') is true, gwoMAN2* d o e s satisfy student'(x) and so must also satisfy intelligent'(x).
However, our original assumption that (39) is false requires intelligent '(fiona') also to be false, but this leads to the contradiction that Fiona is both intelligent and not intelligent.
By the reductio ad absurdum argument, therefore, we are forced to conclude that the assumption that (39) is false must itself be false.
In other words, (39) must always be true and so we have proved that (38.c) is validly derived from (38.a) and (38.b).
This type of inference, shown schematically in (40), is called universal instantiation, because the premiss allows a variable bound by the universal quantifier to be instantiated as any constant, a.
(40)

Universal instantiation: Vx [P(x)] h P(a).

There is a parallel inference rule for existential formulae which is in a sense the inverse of (40).
Instead of instantiating a variable as a constant, the rule of existential generalisation replaces a constant by a variable which is then bound by the existential quantifier.
This rule is stated in (41) and exemplified in (42).
The premiss in (42.a) licenses the conclusion in (42.b) because the formula in (42.c) is a tautology.
Again, this can be shown by assuming that it is false and showing that this assumption leads to a contradiction.
If (41. c) is false, then intelligent'(fiona') is true, and so the assignment of the entity denoted by Fiona to x satisfies intelligent'(x).
However, the falsity of (41.c) requires 3x [intelligent'(x)] to be false so that there must be no value assignment satisfying this open formula.
We are therefore forced to conclude that there is and is not a value assignment that satisfies intelligent'(x) which in turn entails that (42.c) can never be false, thus proving that (41) is a valid deduction.
(41)

Existential generalisation: P(a) \- 3x [P(x)].

(42) a.
Fiona is intelligent.
b.
Therefore, someone is intelligent.
c. intelligent'(fiona') —>3x [intelligent'(x)].
As an example of how the two deduction rules in (40) and (41) interact with each other and with other rules of deduction, consider the inference pattern in (43).
The steps taken to get to the conclusion (43.d) from the premisses in (43.a) to (43.c) are shown in (44).
As before, the deduction rule used for each step appears on the right hand side together with the number of the line on which relevant formulae appear.
In order to simplify matters, we assume that gin translates into an individual constant and that alcoholic beverage is translated as the predicate a-b'.
(43) a.
b.
c.
d.

Ethel likes gin.
Gin is an alcoholic beverage.
All alcoholic beverages are bad.
Therefore, Ethel likes something that is bad.
211",229,211,7 Inference,No info,No info,logical deduction conjunction student fiona vjc student intelligent true conjunction elimination latter formula true formula open formula student intelligent satisfied possible assignment value assignment associate entity fiona satisfies student intelligent satisfies intelligent student student fiona true satisfy student intelligent original assumption false intelligent fiona false lead contradiction fiona intelligent intelligent reductio absurdum argument conclude assumption false false word true type inference universal instantiation premiss variable bound universal quantifier constant universal instantiation parallel inference existential formula sense inverse variable constant rule existential generalisation replaces constant variable existential quantifier rule exemplified premiss license formula tautology false assumption lead contradiction false intelligent fiona true assignment entity fiona satisfies intelligent falsity intelligent false assignment open formula conclude value assignment satisfies intelligent turn entail false valid deduction existential generalisation fiona intelligent someone intelligent intelligent fiona intelligent deduction rule interact rule deduction inference pattern step premiss deduction rule step right hand side number line relevant formula order simplify matter assume gin individual constant alcoholic beverage predicate ethel gin gin alcoholic beverage alcoholic beverage bad ethel bad
211,"7 Inference

(44) a. (like'(gin'))(ether).
premiss b. a-b'(gin').
premiss premiss c.
Vx [a-b'(x) —> bad'(x)].
d. a-b'(gin') —> bad'(gin').
from c via universal instantiation from b & d via modus ponens e. bad' (gin').
f.
(like'(gin'))(ethel') & bad'(gin').from a & e via conjunction introduction g.
3x [(like'(x))(ethel') & bad'(x)].
from f via existential generalisation.
Further entailments and paraphrases involving the interaction of the existential and universal quantifiers with the negation operator were mentioned in Chapter 6.
There it was noted that a sentence like (45.a) is a paraphrase of (45.b) and a sentence like (45.c) is a paraphrase of both (45.d) and (45.e).
In addition, each of the sentences in (45.c), (45.d) and (45.e) all entail both (45.a) and (45.b).
(45) a.
b.
c.
d.
e.

Someone didn't like Jo
Not everyone liked Jo.
Everyone didn't like Jo.
It is not the case that someone liked Jo.
No-one liked Jo.

According to the formal definitions of entailment and paraphrase in (9) and (14), we can show that these entailment and paraphrase relations in (45) hold by showing that their translations can be combined to form tautologies, using <-> and —> respectively.
The relevant formula to show the paraphrase relation between (45.a) and (45.b) is shown in (46.a), that between (45.c), (45.d) and (45.e) appears in (46.b) and the entailment relation is shown in (46.c).
(46) a.
b.
c.

3x [~(like'(jo'))(x)] <-> ~(Vx
Vx [~(like'(jo'))(x)] ^ ~(Bx
Vx [~(like'(jo'))(x)] -> ~(Vx

Again the proof that the formulae in (46) are tautologies can be made by showing that they can never be false.
As an example of the reasoning, let us take the formula in
(46.a) and assume it is false.
For this to be so, either 3x [~(like'(jo'))(x)] is true and
~(VJC [(like'(jo'))(x)]) is false, or vice versa.
Let us take the first possibility.
For 3x
[~(like'(jo'))(x)] to be true, there must be some value assignment g' that satisfies
[~(like'(jo'))(x)].
By the semantics of negation, such a value assignment fails to satisfy [(like '(jo '))(x)J. Hence, 3x [-(like '(jo '))(x)J is true only if there is some value assigned to x that makes [(like '(jo f))(x)] false.
For ~(\/x [(like '(jo '))(x)]) to be false, on the other hand, VJC [(like '(jo f))(x)] must be true, which is so only if every value assigned to x satisfies the propositional function [(like'(jo'))(x)].
However, we have already seen that for the left hand side of the equivalence to be true there must be at least one value of x that fails to satisfy this open formula, so that we arrive at a contradiction: that there is and is not some value assignment that falsifies
[(like'(jo'))(x)], which shows that our first assumption is false.
Because there are two possibilities that guarantee the falsity of the equivalence in (46.a), we have not yet shown that it can never be false.
To complete the proof, we
212",230,212,7 Inference,No info,No info,inference gin ether premiss gin premiss premiss bad gin bad gin universal instantiation modus ponens bad gin gin ethel bad gin conjunction ethel bad existential generalisation entailment paraphrase interaction existential universal quantifier negation operator sentence paraphrase sentence paraphrase addition sentence someone everyone everyone someone formal definition entailment paraphrase entailment paraphrase relation translation form tautology relevant formula show paraphrase relation entailment relation proof formula tautology false reasoning formula assume false true vjc false vice first possibility true assignment satisfies semantics negation value assignment true value false false hand vjc true value satisfies propositional function left hand side equivalence true value open formula arrive contradiction value assignment falsifies first assumption false possibility guarantee falsity equivalence false complete proof
212,"Logical deduction must show that the reverse situation, where 3x [-(like '(jo '))(x)J is false and ~(VJC
[(like '(jo *))(x)]) is true, also cannot occur.
For the latter formula to be true, it must not be the case that every value assigned to x satisfies (like '(jo '))(x), i.e. that there is some value assignment that makes this propositional function false.
For 3x [-(like '(jo '))(x)J to be false, however, it must be the case that no value assigned to x satisfies
(like'(joy))(x).
Again we arrive at the same contradiction as before: that there is some value for x that does and does not satisfy the propositional function.
Hence, we have shown that neither of the component formulae in (46.a) can be true while the other is false and so have confirmed the validity of the paraphrase.
Exercise 7.3:
Show that the formulae in (46.b) and (46.c) are tautologies by showing that the assumption that they are false leads to a contradiction.
There is one final important point that needs to be made here with respect to the entailments of quantified formulae.
This concerns the difference between the universal and existential quantifiers in terms of the existence in a model of entities that satisfy the propositional functions that they combine with.
As required by the truthconditions for 3 given in Chapter 6, existentially quantified formulae that are true entail the existence in a model of at least one entity that has the property described, and thus that something actually exists in the model.
For example, if the formula translating A lecturer screamed is true with respect to some model, then so are those translating Some entity screamed, There was a lecturer and Some entity existed', i.e.
given the truth of (47.a) the formulae in (47.b) to (47.d) are also true.
(47) a.
b.
c.
d.

3x [lecturer'(x) & scream'(x)].
3x [scream'(x)].
3x [lecturer'(x)].
3x [exist'(x)].

The truth of (47.d) follows under the assumption that the extension of the predicate exist' is always the set of all entities that exist in the model, i.e. A. If there is some entity that satisfies any of (47.a) to (47.c), then this must be a member of A and so must exist.
The truth of (47 .b) and (47.c), on the other hand, follows from the truth of (47.a) by a generalised version of the rule of conjunction elimination given above.
That this inference is valid is shown in (48) which uses a form of inference sometimes called existential elimination.
Because (48.a) is true (by assumption), there must be some value assignment, g, that satisfies lecturer'(x) & scream'(x) This allows us to infer the truth of a formula where x is replaced by an individual constant that denotes whatever entity is assigned to x by g.
We do not necessarily know the identity of this individual, but just that there is some individual that screamed.
Thus, in (48.b) x is replaced by an arbitrary individual constant, symbolised as c, but not by an actual individual constant like jo' or bertie'.
From this step, the rest of the deduction follows straightforwardly.
Note that care must be taken in using this type of deduction that inferences are not made about specific individuals.
The extension of the arbitrary constant c is not known, and so inferences with respect to particular
213",231,213,7 Inference,No info,No info,logical deduction reverse situation false vjc true latter formula true satisfies value assignment propositional function false false satisfies joy arrive contradiction value propositional function formula true false confirmed validity paraphrase exercise show formula tautology assumption false lead contradiction final important point need respect entailment formula concern difference universal existential quantifier term existence model entity satisfy propositional function required truthconditions formula true entail existence model least entity property model formula translating lecturer true respect model entity lecturer entity truth formula true lecturer scream scream lecturer truth assumption extension predicate entity model entity satisfies member truth hand truth version conjunction elimination inference valid form inference existential elimination true assumption assignment satisfies lecturer scream infer truth formula individual constant denotes entity identity individual individual arbitrary individual constant actual individual constant bertie step rest deduction note care type deduction inference specific individual extension arbitrary constant inference respect particular
213,"7 Inference individuals are not licensed.
Hence, we are not permitted to infer the truth of, say,
Fiona screamed from A lecturer screamed, only that someone or other screamed.
(48) a.
3x [lecturer'(x) & scream'(x)].
b. lecturer'(c) & scream'(c).
existential elimination c. lecturer'(c).
conjunction elimination from b d.
3x [lecturer'(x)].
existential generalisation from c
No existential commitment follows from the truth of a universally quantified formula, however.
It is not possible to infer from the truth of the formula translating a sentence like Every lecturer screams either that something screams or that something is a lecturer or indeed that anything exists at all.
Thus, the truth of (49.a) does not guarantee those of (49.b) to (49.d).
(49) a.
b.
c.
d.

Vx [lecturer'(x) -» scream'(x)].
3x [lecturer'(x)].
3x [scream' (x)].
3x [exist' (x)].

The reason that these inferences cannot be made has to do with the implicational nature of (49.a).
Since an implication is true whenever its antecedent is false, the formula in (49.a) is true if no value for x satisfies lecturer'(x), i.e. if there is nothing in the extension of lecturer' in some model.
Hence, we cannot infer (49.b), as it cannot be guaranteed that there are any entities in the extension of lecturer'.
Nor can we infer (49.c), as (49.a) is true if both (49.c) and (49.b) are false, i.e. if there are no lecturers and no screamers in the model.
Furthermore, since there may be no entity that satisfies lecturer '(x) or scream '(x), we cannot even infer that any entities exist at all and so (49.d) also does not follow from the truth of (49.a).
This has the consequence that all the sentences in (50) express true propositions in our world (in
1991).
(50) a.
b.
c.

Every blue sheep lives in the Highlands.
All pink elephants have green trunks.
Every Green Party member of the British parliament supports nuclear power.

Although this may seem peculiar, it presents no very serious problems for a theory that allows pragmatics to explain why sentences like (50.a) and (50.b) are unlikely to be uttered as serious assertions outside of stories and jokes.
More importantly, we can use the lack of existential commitment in universally quantified formulae to make intuitively valid inferences.
Consider, for example, a situation in which the sentence in (50.c) is uttered to someone in 1992 who has the background knowledge that Green Party politicians do not support nuclear power.
Assuming the rough translations of (50.c) and the background knowledge as in (51.a) and (51.b), where gp' stands for the translation of is a member of the Green Party, mp' that of is a member of the British parliament and s' of supports nuclear power, the hearer can make the inference in (51.c), that Green Party members of the British parliament do and do not support nuclear power.
Since the latter formula is contradictory (always false whatever value is assigned to x), the hearer applies modus tollens to the implication in (5 La) to derive (51.d), the conclusion that there are currently no Green
214",232,214,7 Inference,No info,No info,inference individual infer truth fiona screamed lecturer someone lecturer lecturer existential elimination lecturer conjunction elimination lecturer existential generalisation existential commitment truth formula possible infer truth formula translating sentence lecturer lecturer truth lecturer lecturer scream reason inference implicational nature implication true antecedent false formula true value lecturer nothing extension lecturer model infer entity extension lecturer true false lecturer screamer model satisfies lecturer infer entity truth consequence sentence true proposition world blue sheep life highland pink elephant green trunk green party member british parliament nuclear power peculiar present serious problem theory pragmatic sentence serious assertion story joke lack existential commitment formula valid inference situation sentence someone background knowledge green party politician nuclear power rough translation background knowledge translation member green party member british parliament nuclear power hearer inference green party member british parliament nuclear power latter formula contradictory false value hearer modus tollens implication green
214,"Lexical meaning members of parliament.
Hence, even the apparently bizarre lack of existential commitment of universally quantified formulae helps to explain certain intuitively valid inferences.
(51) a.
b.
c.
d.

Vx [(gp'(x) & mp'(x)) —> s'(x)].
Vx [gp'(x) -» ~(s'(x))].
Vx [(gp'(x) & mp'(x)) —> (s'(x) & ~s'(x))].
Vx [~(gp'(x) & mp'(x))].
premiss premiss conjunction introduction modus tollens

7 3 Lexical meaning
The inferences discussed in Section 7.2 are explained with reference to the interpretations given to logical operators, but there are valid inferences that are not licensed by the model theory.
For example, from the truth of (52.a) one can infer the truth of the propositions expressed by each of the sentences in (52.b) to (52.d).
Yet there is nothing in the translations (and interpretations) of these sentences (shown in
(53)) that directly guarantees that these inferences hold in any model.
(52) a.
b.
c.
d.

Chester was killed by the poisoned cake.
Chester is dead.
Chester is not alive.
The poisoned cake caused Chester's death.

(53)a.
3x [Vy[(cake'(y) & poisoned'(y)) <-> x = y] & (kill'(chester'))«].
b. dead'(chester').
c. -(alive'(chester')).
d.
3x [Vy [(cake'(y) & poisoned'(y)) <-> x = y] & (cause'(die'(Chester')))(x)].
The inferences in (52) all depend, of course, on words in the sentences, not on the logical structure of the sentences themselves.
It is thus a property of the particular
English word kill that its extension relates to the extension of the English phrase cause to die or that dead is the complementary of alive.
Such relationships are not purely logical in the way that, for example, no is logically related to not all.
There is nothing in the interpretation of the predicate kill' itself that requires all those things that are killed to be in the extension of the predicate dead' in the same model, or that requires nothing that is dead to be in the extension of the predicate alive'.
Moreover, as we saw in (5) above, inferences derived from lexical meaning are weaker than those derived from the interpretations of logical operators, since the former can be suppressed to give rise to non-literal interpretations, while the latter cannot without incoherence.
Content words are much more likely to undergo semantic change over time than grammatical words.
For example, the word selyin Middle English which gives us silly in Modern English did not mean foolish or feeble minded, but rather pitiable or deserving of compassion, a meaning still retained in parts of Scotland.
The ancestor of the Modern English word girl used to denote any human youth, but now, of course, this has been restricted to female humans.
Examples such as these are commonplace in all languages whose earlier history is known.
Moreover, it is a commonplace observation that the vocabularies of different natural languages divide the world in different ways.
This means that the inferences that can be derived from particular words in one language may be different from those
215",233,215,7 Inference,No info,No info,lexical meaning member parliament lack existential commitment formula help certain valid inference premiss premiss conjunction modus tollens lexical meaning inference reference interpretation logical operator valid inference model theory truth infer truth proposition sentence nothing translation interpretation sentence inference hold model chester cake chester dead chester alive poisoned cake chester death cake kill chester dead chester alive chester cake cause chester inference course word sentence logical structure sentence property particular english word kill extension extension english phrase cause dead complementary alive relationship logical way nothing interpretation predicate kill thing extension predicate dead model nothing dead extension predicate alive inference lexical meaning weaker interpretation logical operator former rise interpretation latter incoherence content word semantic change time grammatical word word selyin middle english silly modern english mean foolish feeble minded pitiable deserving compassion meaning part scotland ancestor modern english word girl denote human youth course female human example commonplace language earlier history commonplace observation vocabulary different natural language divide world different way inference particular word language
215,"7 Inference derived from a near equivalent in another.
For example, the Modern German word fahren implies motion by conveyance other than by foot, which is not the case for the nearest equivalent in Modern English, i.e. the verb go.
On the other hand, the nearest equivalent to the English word granddaughter in Lakhota, an American Indian language, is thakdza which has no implication of female gender and whose translation into English would be grandchild.
Thus, the German sentence in (54.a) implies that in (54.b) while their English translations are not so related.
On the other hand, the
English sentence in (54.c) implies that in (54.d) while the Lakhota sentence in (54.e) has no such implication.
(54) a.

Gestern ist Jo zum Kino gefahren.
yesterday is Jo to-the cinema gone
4
Jo went to the cinema yesterday.' b.
Jo ist zum Kino zu Fuss nicht gegangen.
Jo is to-the cinema on foot not gone
'Jo did not go to the cinema on foot/ c.
My granddaughter is ill.
d.
A female is ill.
e. mithakoza khuZe.
my-grandchild is-sick
'My grandchild is sick.'
Inferences derived from lexical meaning are thus here interpreted as language particular and subject to semantic change (although there are those who would not adopt this position).
The model-theoretic interpretation of logical expressions, however, captures general aspects of the meaning of grammatical/logical expressions which are, by hypothesis, unchanging and constant across all natural languages all of which have words, morphemes or other ways of indicating these fundamental semantic concepts.
There appears thus to be a considerable difference between the meaning relations that result from the meaning of content words and those that result from the interpretation of the logical operators.
The latter have an invariant interpretation that guides the interpretation of the whole system and thus have their meaning encoded within the model theory itself.
Lexical meaning, on the other hand, being language particular, subject to change and weaker than logical meaning, must be specified in some other way, outside the model theory.
Lexical implications of the sort noted above result from the sense of a lexeme rather than its denotation.
The denotation of a lexeme is its relation to things external to the linguistic system.
In the theory presented in earlier chapters, it is this aspect of lexical meaning that is paramount and captured by associating each lexeme with the entity, set of entities, etc., of which it is correct to predicate the lexeme.
This is the extension of the lexeme, which has already been contrasted with its intension and which will be discussed further in Chapters 9 and 10.
The sense of a lexeme, on the other hand, has a number of different interpretations within the philosophical and linguistic literature on linguistic meaning.
Some philosophers, like Montague following Frege and Carnap, interpret sense in the way that intension will be interpreted in later chapters, as a logical function that determines the extension of an expression (basic or derived) in different situations (see Chapters 9 and 10).
Many linguists, on the other hand, interpret sense in a relational way as concerned only with
216",234,216,7 Inference,No info,No info,inference equivalent modern german word fahren motion conveyance foot nearest equivalent modern english verb hand nearest equivalent english word granddaughter lakhota american indian language thakdza implication female gender translation english german sentence english translation hand english sentence lakhota sentence implication gestern ist zum kino gefahren yesterday cinema cinema yesterday ist zum kino fuss nicht gegangen cinema foot cinema granddaughter female mithakoza khuze grandchild sick inference lexical meaning language particular subject semantic change position interpretation logical expression general aspect expression hypothesis unchanging constant natural language word morpheme way fundamental semantic concept considerable difference relation result content word result interpretation logical operator latter invariant interpretation guide interpretation whole system meaning model theory lexical meaning hand language particular subject change weaker logical meaning way model theory lexical implication result sense lexeme denotation denotation lexeme relation thing external linguistic system theory earlier chapter aspect lexical meaning paramount lexeme entity entity correct predicate lexeme extension lexeme intension chapter sense lexeme hand number different interpretation philosophical linguistic literature linguistic philosopher montague frege carnap interpret sense way intension chapter logical function extension expression basic different situation chapter many linguist hand interpret sense relational way
216,"Lexical meaning the set of meaning relations lexemes bear to other lexemes (or expressions) within a particular language.
There seems some benefit in maintaining a distinction between these two notions (see Chapter 10) and so it is the latter interpretation of sense that is used here.
In other words, the notion of sense is to be defined in terms of the different of sense relations that hold between lexemes in a language.
Many different types of sense relations have been recognised between the words and expressions in a language, some of which are central to the linguist's notion of sense.
One important sense relation is that of hyponymy where the sense of one lexeme, the hyponym, is included in that of another, the superordinate, and the extension of the former includes that of the latter (e.g. rose and flower).
The relation of synonymy is defined where two lexemes have the same sense and extension, and so may be defined as mutually hyponymous.
Total synonymy is rare (an example may be quicksilver and mercury, although the former term is now archaic), but partial synonymy occurs relatively frequently where two lexemes have almost the same sense and almost the same extension (e.g. pullover and jumper or sweater in British
English).
On the other hand, two lexemes are described as opposites if their extensions are required to be distinct and their senses are contradictory with respect to each other.
There are a number of specific types of opposites.
Antonymy (in the restricted sense of this term) covers gradable opposites like hot/cold.
Gradable antonyms form instances of contraries (see below) and implicitly or explicitly invoke a field over which the grading takes place, i.e. a standard of comparison.
So, for example, the adjective tall changes its extension according to the properties of the entities of which it is predicated (e.g. tall gerbil vs. tall giraffe).
Complementaries
(or binary antonyms) are all non-gradable opposites which, from the extensional point of view, divide the universe of discourse into two disjoint sets (e.g. dead vs.
alive and abstract vs. concrete).
The last opposite relation is that of the contraries which involve the general opposition sense relation but without the negation of one of the lexemes implying the truth of the other (thus excluding contradictories).
We can use this term to refer to non-binary contrasts found among co-hyponyms like peony, rose, tulip, etc or ranks (e.g. Monday, Tuesday, Wednesday, etc.).
Finally, there are three more general sense relations that involve more complex properties of the arguments of predicates.
The first is that of the selectional restrictions that predicates impose on their arguments.
For example, the verb kick requires an animate (and legged) subject and a concrete direct object while the verb solve requires an animate and usually human subject and an abstract object (e.g. The child solved the problem versus IThe rock solved the problem versus IThe student solved the chair).
Next, we have converses which are relational terms where the relation denoted by one lexeme is reversed to give the relation denoted by another
(and vice versa).
These often get called antonyms but they do not conform to the general definition given above, since there need not be an oppositeness relation involved.
For example, sell is the converse of buy, but Bertie bought some gin from
Ethel does not imply that Bertie didn 't sell some gin to Ethel, though it does imply that
Ethel sold some gin to Bertie.
Finally for our purposes, the meaning of lexemes may be related by decomposition to the meanings of expressions involving fundamental notions like causality (e.g. if x kills y then x causes y to die) or change of state (e.g.
soften and cause to become soft).
To define the sense of a word, it is sufficient to define the sense relations that it
217",235,217,7 Inference,No info,No info,lexical meaning set relation lexeme bear lexeme expression particular language benefit distinction notion latter interpretation sense word notion sense term different sense relation lexeme language many different type sense relation word expression language central linguist notion sense important sense relation hyponymy lexeme hyponym superordinate extension former latter flower relation synonymy lexeme sense extension hyponymous total synonymy rare mercury former term archaic partial synonymy lexeme pullover jumper sweater british english hand lexeme opposite extension distinct sens contradictory respect number specific type opposite antonymy sense term cover gradable opposite gradable antonym form instance contrary field place standard comparison adjective tall change extension property entity tall tall giraffe complementary binary antonym extensional point view divide universe discourse disjoint dead alive abstract concrete last opposite relation contrary general opposition sense relation negation lexeme implying truth contradictory use term refer contrast peony rank monday tuesday wednesday general sense relation complex property argument predicate first selectional restriction predicate argument verb kick subject concrete direct object solve human subject abstract object child problem ithe rock problem ithe student chair next converse relational term relation lexeme give relation vice versa antonym conform general oppositeness relation sell converse bertie gin ethel imply bertie sell gin ethel imply ethel gin bertie lexeme decomposition expression fundamental notion causality kill cause change state soften cause soft define sense word sufficient define sense relation
217,"7 Inference bears to other expressions in the language, i.e. identifying its homonyms, hyponyms, superordinates and opposites as well as any other selectional or decompositional properties it may have.
The important question is thus how to capture the sense relations within truth-conditional semantics.
The theory of semantics that has been adopted here gives primacy to sentence meaning over lexical meaning, or, more precisely, to the interpretation of the formulae that translate sentences rather than to the interpretation of constants.
Until now, the semantic contribution of words has been restricted to the contribution they make to the truth-conditions of every sentence in which they can appear.
Since content lexemes are translated (and interpreted) as constants in the logical representation of a sentence, this makes their extension their primary contribution to the meaning of a formula.
Given that, in truth-conditional semantics, the central aspect of the meaning of an expression is taken to be its denotation, one may think of sense relations as specifying relations between the extensions of different lexemes and expressions.
For example, tulip and rose are both hyponyms of flower which means that every tulip and every rose is a flower or, more formally, that the extensions of the predicates tulip' and rose' are subsets of the extension offlower'.
Furthermore, rose and tulip are opposites (incompatible cohyponyms) and so their extensions are disjoint.
Thus, the sense of a lexeme may be defined as the constraints it imposes on the extensions of other expressions with respect to its own extension.
The meaning of a lexeme in truth-conditional semantics can thus be defined in terms of both its extension and its sense relations, as in (55).
(55)

Lexical meaning: The meaning of a lexeme is the contribution it makes to the truth or falsity of the proposition expressed by any sentence in which it can appear together with the constraints it imposes on the extensions of other expressions in those sentences.

Defining sense relations in terms of constraints on the denotations of expressions allows them to be given a representation in LQ and thus a transparent interpretation within the theory.
It is common within lexical semantics to identify the sense relations of particular lexemes by inserting a lexeme into a particular sentence frame and seeing whether the sentence so formed appears to be tautologous.
For example, to test for hyponymy, the hyponymous lexeme is substituted for X and its superordinate for Y in the sentence frame Every X is a Y. Thus, the tautologous feel of Every tulip is a flower indicates the hyponymy between tulip andflower whereas the sentence No tulip is a rose indicates the incompatibility between tulip and rose and so on.
Such sentences have a simple and direct translation into formulae in LQ as in (56) where
(56.a) requires the set of all tulips to be a subset of the set of all flowers and (56.b) requires the set of tulips to have a null intersection with the set of roses.
(56) a.
b.

Vx [tulip' (x) -> flower' (x)].
Vx [tulip'(x) -> ~rose'(x)].

Formulae like those in (56) are called meaning postulates and have the form of statements in the logical metalanguage that specifically relate formulae containing different logical constants which translate particular lexemes and other expressions.
Meaning postulates all have the form of an implication where the antecedent consists of a formula constructed from a single constant whose argument places are bound by universal quantifiers.
The consequent of the implicational statement is a more or less
218",236,218,7 Inference,No info,No info,inference bear expression language homonym hyponym selectional decompositional property important question capture sense relation semantics theory semantics primacy sentence lexical meaning interpretation formula translate sentence interpretation constant semantic contribution word contribution sentence content lexeme constant logical representation sentence extension primary contribution formula semantics central expression denotation sense relation relation extension different lexeme expression tulip hyponym flower mean tulip flower extension predicate tulip subset extension offlower opposite incompatible cohyponyms extension disjoint sense lexeme constraint extension expression respect extension meaning lexeme semantics term extension sense relation lexical meaning meaning lexeme contribution truth falsity proposition sentence constraint extension expression sentence sense relation term constraint denotation expression representation transparent interpretation theory common lexical semantics sense relation particular lexeme inserting lexeme particular sentence frame sentence tautologous test hyponymy hyponymous lexeme superordinate sentence frame tautologous feel tulip flower hyponymy andflower sentence tulip incompatibility tulip sentence simple direct translation formula tulip subset set flower null intersection set flower tulip formula meaning postulate form statement logical metalanguage formula different logical constant translate particular lexeme expression meaning postulate form implication antecedent formula single constant argument place universal quantifier consequent implicational statement le
218,"Lexical meaning complex formula consisting of related constants at least one of whose argument places contains a bound variable shared with the antecedent and whose other argument places are either existentially or universally bound.
For example, the meaning postulates in
(57) capture the relations between the sentences in (52).
(57.a) relates the extension of kill' to that of cause to die; (57.b) allows the inference from Someone caused something to occur to the fact that something did occur; (57.c) relates dying and becoming dead and (57.d) relates the extensions of dead and alive.
The steps used to make the inferences in (52) using these meaning postulates are shown in (58).
The latter inference pattern assumes appropriate interpretations for tense, aspect and the
(actually problematic) expressions become' and cause'.
Indeed, many decompositional meaning postulates like those in (57.a) to (57.c) need to make reference to tense, aspect and modality, matters that are the topics of the final chapters of the book.
(57) a.
b.
c.
d.

Vx [Vy [kill'(y)(x) -> (cause'(die'(y)))(x)]].
VP [Vx [Vy [(cause' (P(x)))(y) -> P(x)]]].
Vx [die'(x) —» become' (dead'(x))].
Vx [dead'(x) —> -alive' (x)].

(58) a.
Bx [Vy [(cake'(y) & poisoned'(y)) <-> x = y] & (kill'(Chester'))(x)].
b.
3x [(kill'(Chester'))(x)].
conjunction elimination c.
3x [(cause'(die'(Chester')))(x)].
modus ponens from b & (57.a) d. die'(Chester').
modus ponens from c & (57.b) e. become'(dead'(Chester')).
modus ponens from d & (57.c) f. become'(-alive'(Chester')).
modus ponens from e & (.d)
Using meaning postulates, we can define the sense relations in terms of how they relate the extensional denotations of lexemes and other expressions in the language.
Hyponymy, for example, is defined between two lexemes if there is a meaning postulate connecting the constants that they translate into which has the structure specified in (59.a), i.e. as an implicational statement with the argument place universally quantified, as the examples in (59.b) to (59.d) show.
(59) a.

Hyponymy: X is a hyponym of Y iff there is a meaning postulate relating
X' and Y' of the form: Vx [X'(x) -» Y'(x)] (the extension of X is a subset of that of Y).
b.
Vx [dog' (x) -» mammal' (x)].
c.
Vx [mammal'(x) —> animal'(x)].
d.
Vx [terrier'(x) -^ dog'(x)].
Because of the fact that two formulae p —» q and q —> r logically entail p —» r (as readers can check for themselves), it follows that any sense relations defined for the consequent are also defined for the antecedent.
We can, therefore, construct further meaning postulates for hyponyms from meaning postulates associated with their superordinates like those in (60) which are derived from those in (59).
If we then define the sense of a lexeme to be the set of meaning postulates that have the constant translating the lexeme in the antecedent of the implicational formula, the sense of a superordinate is contained in the sense of the hyponym.
Notice also that by this definition, it turns out that a hyponym, X, with superordinate, Y, is also a hyponym of all superordinates of Y.
219",237,219,7 Inference,No info,No info,lexical meaning complex formula related constant least argument place variable antecedent argument place postulate capture relation sentence extension kill cause inference someone fact relates dead extension dead alive step inference meaning postulate latter inference pattern appropriate interpretation tense aspect problematic expression many decompositional meaning postulate reference tense aspect modality matter topic final chapter book cause cause dead dead cake kill chester kill chester conjunction elimination cause die chester modus ponens chester modus ponens dead chester modus ponens chester modus ponens meaning postulate define sense relation term relate extensional denotation lexeme expression language hyponymy lexeme meaning postulate constant translate structure implicational statement argument place example show hyponymy hyponym meaning postulate relating form extension subset dog mammal mammal animal terrier dog fact formula reader check sense relation consequent antecedent meaning postulate hyponym meaning postulate define sense lexeme set meaning postulate constant translating lexeme antecedent implicational formula sense superordinate contained sense hyponym notice hyponym
219,"7 Inference

(60) a.
b.
c.

Vx [dog'(x) -> animal'(x)].
Vx [terrier' (x) —> mammal'(x)].
Vx [terrier' (x) —» animal' (x)].

Synonymy, as we have seen, is defined where two lexemes are mutually hyponymous, in other words where their extensions (and senses) are required to be identical, as shown in (61).
(61) a.

Synonymy: X is a synonym of Y iff there is a meaning postulate relating
X' and Y' of the form: Vx [X'(x) <-> Y'(x)] (X and Y have identical extensions), b.
Vx [pullover'(x) <-» sweater' (x)].
Unfortunately this definition does not allow for partial synonymy, since extensions in the theory are discrete, i.e. there are no fuzzy edges where, for example, there may be things that are almost pullovers but that are not sweaters.
Since, as we have noted, full synonymy is rarely, if ever, attested, this makes the definition in (61) less useful than it might be.
It is possible that a pragmatic explanation may be found for the interpretation of synonymy as partial rather than full, but in the meantime, the effect of partial synonymy may be incorporated by replacing the universal quantifier in (61) by the quantifier most, so that we interpret synonymy as Most X are Fand Most Y are
X.
The definition of the general property of oppositeness has the form of the meaning postulate in (56.b).
Because p —> ~q has the same truth-conditions as q —> ~p through modus tollens, we can infer from meaning postulates like that in (62.b) that if the positive counterpart of the consequent is true then the antecedent cannot be.
Hence, from (62.b) we can infer a meaning postulate to the effect that no dogs are cats, i.e. VJC [dog'(x) -> ~cat'(x)].
(62) a.
b.

Opposites: X is an opposite of Y iff there is a meaning postulate relating
X' and Y' of the form: Vx [X'(x) -> ~Y'(x)] (the extension of X is distinct from that of Y).
Vx [cat'(x) -> ~dog'(x)].

All opposites must conform to the general definition in (62.a) but the different types may distinguished by imposing further restrictions.
For example, complementaries are opposites where the negation of one also implies the positive of the other, as defined and exemplified in (63).
(63) a.
b.
c.
220

Complementaries: X is the complementary of Y iff there is a meaning postulate relating X' and Y' of the form:
Vx [(X'(x) -> ~Y'(x)) & (~X'(x) -» Y'(x))] (the extensions of X and Y are distinct and the complement of the extension of X is equal to the extension ofY).
Vx [-concrete'(x) -» abstract' (x)].
Vx [-alive'(x) -» dead'(x)].",238,220,7 Inference,No info,No info,inference dog animal terrier mammal terrier animal synonymy lexeme hyponymous word extension sens identical synonymy synonym postulate relating form identical extension pullover sweater partial synonymy extension theory fuzzy edge thing pullover sweater full synonymy le useful possible pragmatic explanation interpretation synonymy partial full meantime effect partial synonymy universal quantifier quantifier interpret synonymy fand general property oppositeness form meaning postulate modus tollens infer meaning postulate positive counterpart consequent true antecedent infer meaning postulate effect dog cat dog opposite meaning postulate relating form extension distinct cat general different type restriction complementary opposite negation positive complementary complementary meaning postulate form extension distinct complement extension equal extension ofy abstract dead
220,"Lexical meaning

Again, we can infer that if X is the complementary of Y then Y is the complementary of X. This follows from (63.a) by modus tollens, since ~Y'(x) implies —X'(x), i.e.
X'(x).
This gives rise to the postulates in (64) paralleling those in (63.b) and (63.c).
(64) a.
b.

Vx [-abstract' (x) -> concrete' (x)].
Vx [~dead'(x) -> alive'(x)].

Antonyms are opposites restricted to some particular domain.
For example, a big mouse is not small for a mouse although it may be small for an elephant.
Letting P stand for some property, like being a mouse or an elephant, we can define antonymy as in (65).
Strictly speaking such meaning postulates go beyond the extensional semantics so far developed, but they can be modelled in the semantic theory put forward in Chapter 10 and they are included here for the sake of completeness.
The intended interpretation of (big '(P))(x) is that x is big for a P or x is a big P, whatever constant P may be.
(The meaning postulate in (65.c) results from (65.b) by modus tollens.)
(65) a.
b.
c.

Antonyms: X and Y are antonyms iff there is a meaning postulate relating
X' and Y' of the form: Vx [VP [(X'(P))(x) -> ~(Y'(P))(x)]] (the extensions of X and Y are distinct for some given domain).
Vx [VP [(big'(P))(x) -> ~(small'(P))(x)]].
Vx [VP [(smaH'(P))(x) -> ~(big'(P))(x)]].

The definition of converses in (66.a) requires a schematic meaning postulate that allows for predicates with different valencies.
Many converses are also opposites as illustrated in (67).
(66) a.
b.
c.
(67) a.
b.
c.
d.

Converses: X is the converse of Y iff there is a meaning postulate relating
X' and Y' of the form: Vx...Vy [X'(y)...(x) -> Y'(x)...(y)] (wherever
<ei,e2,...,en> is in the extension of X, <en,en.i,.-.,ei> is in the extension of Y).
Vx [Vy [Vz [(buy'(x)(y))(z) -> (sell'(z)(y))(x)]]].
Vx [Vy [Vz [(sell'(x)(y))(z) -> (buy'(z)(y))(x)]]].
Vx [Vy [(left_of (x))(y) -> (right_of (y))(x)]]
Vx [Vy [(left.of (x))(y) -> ~(right_of «)(y)]]
Vx [Vy [(daughter'(x)Xy) -> (parent'(y))(x)]]
Vx [Vy [(daughter'(x))(y) -> -(parent'(x))(y)]]

Selectional restrictions and decomposition have similar definitions involving the specification of further required properties of arguments.
The latter differs in containing information about causation, change of state and possibly other cognitively important properties.
An example of a simple selectional restrictions appears in (68.b) and (68.c) and (68.d) show the decompositional properties of the verb melu where melt"" is the translation of the transitive verb and melf is that of the intransitive .
(68) a.
b.
c.
d.

Selectional restrictions/decomposition: A lexeme X imposes some condition on the extension of one of its arguments.
Vx [sing'(x) -^ -abstract'(x)].
Vx [Vy [(melt""(y))(x) -K(cause'(melt'(y)))(x)]].
Vx [melt'(x) -»become'(-solid'(x))].
221",239,221,7 Inference,No info,No info,lexical meaning infer complementary complementary modus tollens implies rise postulate paralleling concrete alive antonym particular domain big mouse small mouse small elephant property mouse elephant define antonymy meaning postulate extensional semantics semantic theory included sake completeness intended interpretation big big big constant postulate result modus tollens antonym antonym meaning postulate relating form extension distinct domain big small smah big converse schematic meaning postulate different valency many converse converse converse meaning postulate relating form extension extension sell sell buy daughter parent daughter parent selectional restriction decomposition similar definition specification property argument latter differs information causation change state important property simple selectional restriction decompositional property verb melu melt translation transitive verb melf intransitive selectional lexeme condition extension argument sing melt cause melt melt
221,"7 Inference
Exercise 7.4:
Write a set of meaning postulates that specify the sense relations that hold between the sets of words that follow.
Are there other sense relations that involve these words and are all the sense relations noted as strong (or necessary) as each other?
i.
ii.
run, move, walk, saunter, stroll.
abstract, concrete, human, animate, inanimate, liquid, solid, think, flow, interpret, crumble, iii. horse, mare, filly, foal, offspring, child, mature, adult, human, animal, mammal.

Meaning postulates are intended to impose constraints on the extensions of certain expressions, and the sense relations defined above hold only where there is such a constraint.
It is not sufficient to define one lexeme a as the opposite of another, p, merely because within some model Vx [ot'(x) —> ~|3'(x)] happens to be true.
For example, it is not the case that student is the opposite of dog, merely because in our formal models no student is a dog (and vice versa).
Nor is it the case that genius and lecturer are synonyms merely because VJC [genius'(x) <-> lecturer*(x)] happens to be true in M2.
Rather, these lexemes are unrelated in terms of sense, because there are no meaning postulates connecting them.
The sense of a lexeme is defined exclusively by the set of meaning postulates that specify the relationship of its extension with those of other expressions within the language.
This remains the case whatever the truth of particular postulates within a particular model, but this brings up the problem of the status of the meaning postulates with respect to different models or states of affairs and to the theory as a whole.
There has been a tendency within the logical tradition, including Montague, to interpret meaning postulates as constraints on admissible models.
In other words, meaning postulates restrict the set of all possible models (the denotation assignment functions) which can be used to interpret a language with respect to the situation being represented.
Only those models are admissible in which the meaning postulates associated with the set of constants are true.
Under this interpretation, meaning postulates are raised to the status of logical (or analytic) truths, since they are true of all situations that can be described in some language.
This means that inferences derived from these have the same status as deductive inferences derived from the interpretation of logical operators.
As we have already seen, however, it is not always the case that inferences derived from lexical meaning behave in the same way.
It is possible to suppress inferences derived from lexical meaning in a way that is not possible with deductive inferences.
When this happens, it gives rise either to a figurative interpretation or to a generalisation of the applicability of a term.
An example of the latter appears in (69).
The sentence in (69.a) is generally supposed to capture the meaning of the noun bachelor, but the term may be applied to a woman, as in (69.b), without causing the reader any difficulty in interpretation.
This is so, despite the fact that it seems to be equivalent to the less acceptable sentence in (69.c), which states directly that the entity denoted by the subject noun phrase is both a woman and a man (cf. the formula in (69.e)).
The sentence in (69.b) would, in normal
222",240,222,7 Inference,No info,No info,inference exercise meaning postulate specify sense relation hold word follow sense relation word sense relation strong necessary run move walk saunter stroll abstract concrete human animate inanimate liquid solid interpret crumble horse mare offspring child adult human animal mammal meaning postulate impose constraint extension certain expression sense relation hold constraint sufficient define lexeme model true student dog formal model student dog vice versa genius lecturer synonym genius lecturer true lexeme unrelated term sense postulate sense lexeme postulate specify relationship extension expression language truth particular postulate particular model problem status meaning postulate different model state affair theory whole tendency logical tradition montague interpret meaning postulate constraint admissible model word meaning postulate restrict possible model denotation assignment function interpret language respect situation model admissible meaning postulate constant true interpretation meaning postulate status logical analytic truth true situation language inference status deductive inference interpretation logical operator inference lexical meaning behave way possible suppress inference lexical meaning way possible deductive inference rise figurative interpretation generalisation applicability term latter sentence capture meaning noun bachelor term woman reader difficulty interpretation fact equivalent le acceptable sentence state entity subject noun phrase woman man formula sentence normal
222,"Lexical meaning circumstances, be interpreted as stating that the relevant woman is unmarried, i.e. the maleness of bachelorhood is suppressed given the stated information that the subject is a woman (and the complementary relation between man and woman with respect to humans).
The interpretation of (69.c), however, is less clear than this and could be interpreted in a number of ways: that the person referred to behaves socially like an unmarried man, that the person is a transvestite (i.e. looks like a woman) or that the person is a transsexual (i.e. is genetically male).
The interpretation of the logically contradictory sentence in (69.d), on the other hand, which is derived from (69.c) through the sense of man, is even less informative than the latter.
It requires much more contextual information for its interpretation and sounds much more bizarre in isolation than (69.c) and has a very different status from (69.b).
This is not explicable if meaning postulates have the status of analytic truths, since all three example sentences would be true in all the same circumstances and so convey the same information.
(69) a.
b.
c.
d.
e.

All bachelors are unmarried men.
That woman is a bachelor.
?That woman is an unmarried man.
*That woman is not a woman and is unmarried.
3y [woman'(y) & ~3x [(marry'(x))(y) & man'(y)]].

Instead of taking meaning postulates to be necessary conditions on models, we can interpret them as independent statements (perhaps located in the lexicon) that provide information about normal circumstances.
Inferences made from them then are assumed to hold where there is no information to the contrary.
So, for example, the statement in (69.a) about bachelor is assumed to be generally, rather than universally, true.
It holds unless there is a stronger reason to believe that part of the information that can be deduced from the postulate cannot be true, because if it did it would lead to a logical contradiction.
In such a situation, only part of the information encoded in the meaning postulate is inferred.
It is as if the implicational connective in formal meaning postulates were not interpreted exactly as -> but as a similar connective, call it 1, for which the inference pattern structure in (70) is valid.
Applying this inference pattern to (69), we infer that Fiona is unmarried and the information derived from (69.a) as to her being a man is dropped, because it is explicitly stated that she is a woman.
(70) a. p i (q & r).
MP b.
p.
premiss c. ~r.
premiss d. q.
conclusion
The formal interpretation of a connective like 4- will not be further pursued as there is much more to the retrieval of lexical inferences than just setting up meaning postulates containing such an implicational connective.
In particular, pragmatics
(mainly in the guise of cognitive relevance) must come into play in examples like
(69) to explain why, for example, it is a bachelor's maleness that is suppressed rather than a woman's non-maleness (i.e. it is the inference derived from bachelor that is altered, not that derived from woman).
Furthermore, the notion of sense put forward here allows a distinction to be made between sentences and situations in terms of how
223",241,223,7 Inference,No info,No info,lexical meaning circumstance relevant woman maleness bachelorhood stated information subject woman complementary relation man woman human interpretation le clear number way person behaves unmarried man person transvestite woman person male interpretation contradictory sentence hand sense man informative latter much contextual information interpretation sound much bizarre isolation different status explicable meaning postulate status analytic truth sentence true circumstance information bachelor unmarried men woman bachelor woman unmarried man woman woman unmarried woman marry man postulate necessary condition model interpret independent statement lexicon information normal circumstance inference assumed information contrary statement bachelor true hold stronger reason part information postulate true logical contradiction situation part information postulate implicational connective formal meaning postulate similar connective call inference pattern structure valid inference pattern infer fiona unmarried information man woman premiss premiss formal interpretation connective much retrieval lexical inference meaning postulate implicational connective particular pragmatic cognitive relevance example bachelor maleness woman inference bachelor woman notion sense distinction sentence situation term
223,"7 Inference few or how many lexical inferences need to be suppressed to avoid contradiction, but this requires more semantic machinery than is yet available.
(But see Chapters 9 and
10 for some further discussion of the matter.)
For these reasons, a proper formalisation of the way meaning postulates work will not be spelled out here.
It is unfortunate that while lexical semantics has, at least until very recently, been the primary focus of linguistic semantics, a great deal of work remains to be done on this topic within logical semantics.
It does, however, seem a reasonable hypothesis that central aspects of lexical meaning can be analysed in terms of the definition of sense relations as constraints on the denotations of expressions within a particular language.
It also seems reasonable that such constraints cannot be stated as part of the model theory (as conditions on admissible models), if their comparative weakness with respect to the logical operators is to be captured.
Thus, however the formal procedure for making inferences from meaning postulates is to be set up, these two points must be incorporated.
7.4

Non-truth-conditional aspects of the connectives

In this last section, we take a look at some aspects of the meaning of sentences containing the conjunctions and, or and if ..then that are not explained by the truth-conditional interpretation of their logical counterparts, &, v and —».
This discussion is by no means exhaustive and there are aspects of the meanings of the connectives that are not discussed.
The point of this section, however, is to indicate how inference patterns can be constructed to account for certain aspects of meaning not determined by truth-conditional interpretation by considering language use.
The success of this enterprise provides support for the hypothesis that truth-conditional semantics can provide a sufficient basis for a general theory of meaning, as long as it is supplemented by a rich enough theory of pragmatics.
7.4.1

And

First, let us look at the semantics of sentences containing and.
As discussed in
Chapter 3, the truth-conditions of a formula containing the connective & are met if, and only if, both conjunct formulae are true.
This holds irrespective of the order in which the conjunct formulae appear, because & is a commutative operator, as we have already seen.
The sentence in (71.a) is thus truth-conditionally equivalent to that in
(71.b).
(71) a.
b.

The skier fell over and broke her ankle,
The skier broke her ankle and fell over.

Most speakers of English, however, would interpret an utterance of (71 .a) as meaning something different from an utterance of (71.b).
This is because there is a tendency to assume that conjuncts are causally or temporally related, if the events described are such that they can be so related under normal assumptions.
In (71 .a), for example, the sentence The skier fell over comes before (she) broke her ankle and so the most likely interpretation is that the falling preceded, and possibly caused, the breaking of the ankle.
This temporal/causal relation is reversed in (71.b) where the order of the constituent clauses are reversed: the skier's breaking her leg precedes, and possibly
224",242,224,7 Inference,No info,No info,inference many lexical inference avoid contradiction semantic machinery available chapter discussion matter reason proper formalisation way meaning postulate work unfortunate lexical semantics primary focus linguistic semantics great deal work topic logical semantics reasonable hypothesis central lexical meaning term sense relation constraint denotation expression particular language reasonable constraint part model theory condition admissible model comparative weakness respect logical operator formal procedure inference meaning postulate point connective last take look aspect meaning sentence conjunction interpretation logical counterpart discussion exhaustive aspect meaning connective point inference pattern account certain aspect meaning interpretation language success enterprise support hypothesis semantics sufficient basis general theory rich enough theory pragmatic look semantics sentence formula connective conjunct formula true irrespective order conjunct formula commutative operator sentence equivalent skier broke ankle skier ankle speaker english utterance different utterance tendency assume conjuncts related event related normal assumption sentence skier broke ankle likely interpretation ankle relation reversed order constituent clause skier leg precedes
224,"Non-truth-conditional aspects of the connectives causes, her falling over.
This difference between (71.a) and (71.b) could be taken as an indication of the incorrectness of the semantic interpretation provided for the conjunction and by the truth table for &.
To establish whether or not this is so, we have to ask ourselves a few questions: is the temporal/causal relation between two conjoined clauses found between clauses in other contexts?
If it is, can a unified treatment of the two constructions be proposed without invoking the semantics of the conjunction?
We must also ask whether the causal/temporal implication always holds of conjoined clauses and finally whether it is possible for two conjoined clauses to translate into a true formula if the truth-conditions provided for and are not met.
The answer to the first question is quite straightforward: exactly the same temporal/causal effect is found when two or more sentences are strung together in a text without any overt co-ordinating morpheme.
Thus, the simple text in (72.a) appears to be more coherent than that in (72.b) where the order of the sentences is changed, despite the fact that they could both be said to describe the same situation.
(72) a.
b.

Fiona gave the cake to Bertie.
Bertie gave the cake to the dog.
The dog ate the cake.
The dog died.
Bertie laughed.
Bertie laughed.
The dog died.
Fiona gave the cake to Bertie.
The dog ate the cake.
Bertie gave the cake to the dog.

The peculiarity of the text in (72.b) may be, at least in part, ascribed to the fact that texts of this sort are taken to describe a series of events occurring in the order in which the sentences appear.
Imposing such a temporal order on (72.b), however, makes it difficult to construct a sensible causal chain out of the events and so it appears incoherent.
Temporal and causal order is thus imposed on a series of non-conjoined sentences forming a text as well as on conjoined sentences.
This strongly suggests that this aspect of the meaning of conjunctions has nothing to do with the meaning of the word and but with the way texts are constructed.
This hypothesis is confirmed by the fact that situations can be presented (and often are, in practice) with later events being described before earlier ones.
Furthermore, the causal/temporal implications of and are not always in evidence.
For example, sentences like The skier broke her ankle and the instructor cracked his ribs and Jo's aunt is insane and his grandfather was in jail for many years do not imply that the situations described by each of the conjuncts is connected causally or temporally.
On the other hand, it is never possible for a conjoined sentence to describe a true state of affairs when one of its component sentences describes something actually false.
So for example, it is perfectly possible for (71 .a) and (71 .b) to describe the same temporal state of affairs, but it is not possible for such a statement to be true, if, in fact, the skier did not break her ankle.
Thus, the temporal/causal effects associated with conjunction can be cancelled or weakened and appear in other textual situations which do not contain and, whereas the truth of each conjunct cannot be denied without denying the truth of the whole sentence.
This is evidence, therefore, that the truth-conditions for & provide the central core of the meaning of and while temporal and causal effects are secondary and can be explained by a theory of language use.

225",243,225,7 Inference,No info,No info,connective difference indication incorrectness semantic interpretation conjunction truth table question relation clause clause context treatment construction semantics conjunction implication clause possible conjoined clause translate true formula answer first question straightforward effect sentence text overt morpheme simple text coherent order sentence fact situation fiona cake bertie bertie cake dog dog cake dog bertie bertie dog fiona cake bertie dog cake bertie cake dog peculiarity text may least part fact text describe series event order sentence temporal order difficult construct sensible causal chain event incoherent temporal causal order series sentence text sentence aspect conjunction nothing word way text hypothesis fact situation event implication evidence sentence skier ankle instructor rib aunt insane grandfather jail many year situation conjuncts hand sentence true state affair component sentence false possible temporal state affair possible statement true fact skier break ankle effect conjunction textual situation contain truth conjunct truth whole sentence evidence central core temporal causal effect secondary theory language use
225,"7 Inference
7.42

Or

A similar argument may be applied to one of the apparent oddities in the truthconditions associated with or via its translation as logical disjunction, as discussed in Chapter 1.
Because of the truth-conditions of v, a disjunctive formula may be true if both of the disjuncts are true.
However, in English, the use of a disjunctive sentence often implies that only one of the disjuncts is true.
It would, for example, be extremely odd for someone to utter the sentences in (73) knowing that both disjuncts are true.
(73) a.
b.

Fiona was a Professor of Linguistics or Dean of the Arts Faculty,
Bertie's jacket was in the bedroom or in the cloakroom.

Although the truth-conditional interpretation of or allows both sentences in (73) to be true of situations in which Fiona was a professorial Dean of the Arts Faculty and
Bertie's jacket was both in the bedroom and in the cloak-room, these statements would not usually be given such an interpretation.
Very often disjunctive sentences have an exclusive meaning, i.e. one which disallows situations where both disjuncts are true.
Hence, the sentence in (73.a) would normally be interpreted so that Fiona was either a Professor of Linguistics or Dean of the Arts Faculty, but not both.
To capture this intuition, or could be interpreted, not as inclusive disjunction, but as exclusive disjunction, ve,which has the truth-conditions in (74) and truth table in (75), repeated from Chapter 3.
(74)

Truth-conditions for exclusive disjunction: If <|) and \\f are formulae then
[0 v e \|/]M-s is 1 iff [()) & \j/]M'8 is 0 or [~ty & ~y] M * is 0.

(75) p q

PVe^ t t f f t f t f f t t f

The problem with adopting exclusive disjunction as the truth-conditional meaning of or is that while many uses of disjunction do imply that only one of the disjuncts holds, there are some occasions where we do not want to preclude a situation in which both component formulae are true.
Consider, for example, the sentences in
(77) which we do not want to be falsified by situations where both disjuncts are true, i.e. where there are students who have a private income and rich parents, or where a job applicant has two Higher and five 'O' grade passes, or where the lecturer does not want to rule out the possibility of a zealous student reading both articles.
(76) a.
b.
c.
226

Students who have a private income or rich parents are better off at
University than those who do not.
Applicants for the job must have two Higher, or five Ordinary, grade passes.
You must read the article on presupposition or the article on implicature by next Wednesday.",244,226,7 Inference,No info,No info,inference similar argument apparent oddity truthconditions translation logical disjunction disjunctive formula true disjuncts true english use disjunctive sentence disjuncts true odd someone utter sentence true fiona professor linguistics dean art faculty bertie jacket bedroom cloakroom interpretation sentence true situation fiona professorial dean art faculty bertie jacket bedroom statement disjunctive sentence exclusive disallows situation true sentence fiona professor linguistics dean art faculty capture intuition inclusive disjunction exclusive disjunction truth table exclusive disjunction formula problem exclusive disjunction many us disjunction disjuncts hold occasion preclude situation component formula true consider sentence situation true student private income rich parent job applicant higher grade pass lecturer rule possibility zealous student reading article student private income rich parent better university applicant job higher ordinary grade pass article presupposition article implicature next wednesday
226,"Non-truth-conditional aspects of the connectives
The sentences in (76) (and many others like them) show that exclusive disjunction on its own makes too strong a claim about the truth-conditions of English or, since inclusive readings of disjunctive sentences must be allowed for.
This could be taken as an indication that or is ambiguous between v and ve.
While this is not an unreasonable suggestion, it is probably incorrect.
Gazdar (1979) presents logical arguments against the ambiguity theory by showing that the use of exclusive disjunction leads to bizarre logical consequences in negative sentences.
For example, under the ambiguity hypothesis the sentence in (77.a) has a propositional structure that may be represented as either (77.b) or (77.c).
(77) a.
Edinburgh isn't boring or provincial.
b. ~(pvq).
c. ~(p ve q).
The problem with (77.c) is that it can be shown to be truth-conditionally equivalent to the formula in (78.a) which, by the definition of paraphrase in (14), entails that (77.a) is a paraphrase of (78.b).
Intuitively, however, these two sentences are not paraphrases, thus indicating that the exclusive reading of (77 .a) is not acceptable.
Since there appears to be no reason why the ambiguity should fail in this example, the implication is that or is never ambiguous.
(78) a.
b.

((~p&~q)v(p&q)).
Either Edinburgh isn't boring and isn't provincial, or it's both.

A less technical way of showing that the ambiguity theory is not the best account of the semantics of English or is to show, as we did with and, that the apparent differences can be traced to other factors.
Because of sentences like those in (76), we cannot take exclusive disjunction as basic because otherwise the formulae that translate such examples would be false where both disjuncts are true; an undesirable consequence, as we have seen.
If we assume that inclusive disjunction is basic, however, we can show that the exclusivity effects result from non-truth-conditional aspects of meaning.
There are two major sources for exclusive readings of disjunctions.
In one type of disjunction, exemplified in (73.b), the disjunction is interpreted exclusively because of our knowledge of the way the (real) world is.
Knowing that a jacket is an entity and rooms are locations, we are forced to give the sentence an exclusive reading, otherwise it could be the case that the jacket in question was in two different locations at once, something that our knowledge of the world tells us is impossible.
A sentence like Bertie ys jacket is in the bedroom or on the floor, however, can be given an inclusive reading, because the properties of being on the floor and being in a bedroom are not mutually exclusive.
Hence, there are no real world constraints on interpreting the disjunction inclusively and the exclusive reading is not forced.
The exclusive reading of the sentence in (73.a), however, cannot be accounted for in precisely the same way, since it is perfectly possible for someone to be a
Professor of Linguistics and a Dean of a Faculty at the same time.
To account for the preferred reading here, we must turn, as we did with and, to a theory of language use.
As discussed in the introduction, Grice (1975) suggests that there are a number of rules that speakers adhere to when engaging in conversation.
In conversations, participants are assumed to be being co-operative and are sticking to
227",245,227,7 Inference,No info,No info,connective sentence many others exclusive disjunction strong claim english inclusive disjunctive sentence indication ambiguous unreasonable suggestion gazdar present logical argument ambiguity theory use exclusive disjunction lead bizarre logical consequence negative sentence ambiguity hypothesis sentence propositional structure edinburgh boring provincial pvq problem equivalent formula paraphrase entail paraphrase sentence paraphrase exclusive reading acceptable reason ambiguity fail implication ambiguous edinburgh boring provincial le technical way ambiguity theory best account semantics english apparent difference factor sentence exclusive disjunction basic formula translate example false disjuncts true undesirable consequence inclusive disjunction basic show exclusivity effect result aspect major source exclusive disjunction type disjunction disjunction knowledge way real world jacket entity room location sentence exclusive reading different location knowledge world impossible sentence bertie jacket bedroom floor inclusive property floor bedroom exclusive real world constraint disjunction exclusive reading exclusive reading sentence possible someone professor linguistics dean faculty time account preferred reading theory language use grice number rule speaker adhere conversation conversation participant
227,"7 Inference certain principles governing conversational behaviour.
One of the maxims can be used to account for the oddity of someone uttering a sentence like (73.a), when, in fact, they know perfectly well that Fiona is both Professor of Linguistics and
Dean of the Faculty.
The relevant maxim is repeated in (79):
(79)

Maxim of quantity: Make your exchange as informative as is required.

Amongst other things, the maxim of quantity requires speakers to use a conjunction if they believe that two sentences express true propositions or to state that two disjoined sentences may both be true.
In a situation in which speakers conceive that it may be possible that both component formulae expressed in (73.a) may be true, they ought to say something like Fiona is Professor of Linguistics or Dean of the
Faculty or both.
By using disjunction, rather than conjunction, therefore, a co-operative speaker implies that they do not think that Fiona is both Professor and
Dean.
Hence, from the use of the or, there is an implicature that the speaker believes that it is not the case that both disjuncts are true.
This gives rise to the effect of exclusive disjunction, without resorting to an interpretation of or as ve.
Furthermore, the implication of exclusivity can be cancelled, allowing (73.a) to be true even if both disjuncts are true.
After all, someone who uttered this sentence would be somewhat aggrieved at being accused of lying if it so happened that Fiona was, in fact, both
Professor and Dean.
This would not be explained if the exclusive reading of this sentence was part of the truth-conditions of or and not an implicature derived from conversational use.
The English disjunction morpheme or should not, therefore, be treated as a homonym, but non-ambiguously as inclusive disjunction.
Its interpretation in particular contexts may giveriseto exclusive interpretations by the meanings of its component formulae and knowledge of the world or through the operation of pragmatic principles like the maxim of quantity.
A theory of language use again can be shown to interact with basic principles of semantic interpretation to give the desired results.
Before going on to look at conditionals, there is one entailment relation involving disjunction that is problematic and that should be mentioned here.
The truth-conditions for v guarantee that a complex formula p v q is true if p is true, irrespective of the truth value of the other component formula.
This has the effect of making the formula p -»(p v q) a tautology.
According to the definition of entailment in (9), this means that we predict that a true sentence Sj entails Sj or S2 where S2 is any other sentence at all.
In other words, any sentence that expresses a true proposition entails a disjunctive sentence containing it.
But this is bizarre, as the examples in (80) show.
(80) a.
b.

Grass is green.
Therefore, grass is green or violets are blue.
Chester ate the cake.
Therefore, Chester ate the cake or Ethel was crazy.

The oddity of these examples, however, can again be explained with reference to pragmatic factors.
Indeed, we may again appeal to the maxim of quantity.
Clearly, if it is the truth of a single proposition that needs to be conveyed, then the maxim of quantity requires the utterance only of the sentence that expresses that proposition.
Any addition, like an extra disjunction, is extra unnecessary information and so a flouting of the conversational maxim.
228",246,228,7 Inference,No info,No info,inference certain principle conversational behaviour maxim account oddity someone sentence fact fiona professor linguistics dean faculty relevant maxim maxim quantity exchange informative thing maxim quantity speaker use conjunction sentence true proposition state sentence true situation speaker conceive possible formula true fiona professor linguistics dean faculty disjunction conjunction speaker fiona professor dean use implicature speaker belief true rise effect exclusive disjunction interpretation implication exclusivity true true someone uttered sentence aggrieved fiona fact professor dean exclusive reading sentence part implicature conversational use english disjunction morpheme homonym inclusive disjunction interpretation particular context exclusive interpretation meaning component formula knowledge world operation pragmatic principle maxim quantity theory language use interact basic principle semantic interpretation give result look conditionals entailment relation disjunction problematic guarantee complex formula true true irrespective truth value component formula effect formula tautology entailment mean true sentence entail sentence word sentence true proposition entail disjunctive sentence bizarre example show grass green grass green violet blue chester cake chester cake ethel crazy oddity example reference pragmatic factor maxim quantity single proposition maxim quantity utterance sentence express proposition addition extra disjunction extra unnecessary information conversational maxim
228,"Non-truth-conditional aspects of the connectives
7.4.3

If

There are a number of peculiar things about the interpretation of conditional sentences as logical material implication.
One of these is the peculiarity of asserting conditional sentences when there appears to be no apparent causal relation between the antecedent and the consequent.
Compare, for example, the sentences in (81).
(81) a.
b.
c.
d.
e.

If the cake was poisoned, then the dog will die.
If the cake was poisoned, then the dog will eat it.
If the cake was poisoned, then the dog won't be hungry.
If the cake was poisoned, then the dog was called Chester.
If the cake was poisoned, then the dog is a space alien from Alpha Centauri.

The acceptability of the sentences in (81) declines from (81 .a) to (81 .e) as it becomes more difficult to connect the situation described by the antecedent with that described by the consequent.
This feeling of connectivity between the two sentences is much stronger with conditionals than with conjunctions and is not so easily accounted for
(particularly as material implication is not commutative, i.e. p —> q is not truthconditionally equivalent to q —> p).
However, we can again provide a pragmatic explanation for this phenomenon using Gricean principles of conversation.
The explanation utilises the maxim of quantity in (79) and the maxim of quality, repeated in (82).
(82 )

Maxim of quality: Do not say what you believe to be false and do not say that for which you lack adequate evidence.

To see how these maxims help explain the gradation of acceptability in (81), consider what one is trying to convey in asserting a conditional sentence.
In general, the utterance of a conditional sentence asserts that, as far as the speaker is aware, it is not true that the antecedent is true and the consequent is false simultaneously, i.e.
the maxim of quality is adhered to by avoiding the assertion of something known to be false.
For listeners to believe such a conditional, they should be able to pick out a connection between the two clauses that enables them to be certain that their truth-conditions are met.
If there is no such connection then they could believe the formula expressed by the conditional only by having reasonable grounds for believing that the antecedent is false or the consequent true.
By the maxim of quantity, however, the speaker is then revealed as being un-co-operative because he or she should either have simply stated the consequent or denied the truth of the antecedent.
The conditional says too much, as it were.
Thus, the assertion of a conditional is only felicitous if there is some connection between the antecedent and the consequent and if the speaker believes the conditional to be true.
The assertion of conditionals containing apparently unconnected component sentences, however, can sometimes be used felicitously.
The utterance of the sentence in (81.e) may be felt to be more acceptable than that of the sentences in (81.c) and
(81.d).
The reason for this can be found in the interaction of typical beliefs held by interlocutors and modus tollens.
From the truth-conditions of —>, this sentence is true if (and only if) the dog is a space alien from Alpha Centauri or the cake wasn't poisoned.
Someone hearing an utterance of (81.e) is unlikely in ordinary
229",247,229,7 Inference,No info,No info,connective number peculiar thing interpretation conditional sentence logical material implication peculiarity conditional sentence apparent causal relation antecedent consequent compare sentence cake dog die cake dog eat cake dog hungry cake dog chester cake dog space alien alpha centauri acceptability sentence decline difficult connect situation antecedent consequent connectivity sentence stronger conditionals conjunction material implication equivalent pragmatic explanation phenomenon gricean principle conversation explanation maxim quantity maxim quality maxim quality false lack adequate evidence maxim help gradation acceptability convey conditional sentence general utterance conditional sentence speaker aware true antecedent true consequent false maxim quality assertion false listener conditional able pick connection clause certain connection formula conditional reasonable ground antecedent false consequent true maxim quantity speaker consequent truth antecedent conditional much assertion conditional felicitous connection antecedent consequent speaker belief conditional true assertion conditionals unconnected component sentence utterance sentence acceptable sentence reason interaction typical belief interlocutor modus tollens sentence true dog space alien alpha centauri cake someone utterance ordinary
229,"7 Inference circumstances to entertain the possibility that there are dogs which are space aliens from Alpha Centauri.
If hearers have no other grounds for assuming that speakers are flouting the maxim of quantity by uttering something they know is untrue, the former must, by modus tollens, assume that the antecedent is false.
Thus, anyone who utters the sentence in (81 .e) is normally assumed to be conveying that they believe that the cake is not poisonous.
In a similar fashion, it is possible to convey that a consequent really is true by having as an antecedent a sentence that expresses a well known truth, since, for the conditional to be true, the consequent must also be true.
For example, the sentence If two plus two equals four, then my client is innocent strongly conveys that my client is innocent (example taken from McCawley (1981: 220)).
Hence, Grice's conversational maxims, together with the truth-conditional interpretation we have provided, can be used to account for a number of peculiarities in the interpretation of conditionals.
That a pragmatic explanation of these facts is feasible is strengthened by the fact that the same connectivity is felt between paraphrases of conditionals that use a disjunction.
A formula containing —> is truth-conditionally equivalent to a disjunction where the antecedent formula is negated, as can be checked by showing that (p -> q) <-» (~(p) v q) is a tautology.
Hence, our theory predicts that the sentences in (83) are paraphrases of those in (81).
(83) a.
b.
c.
d.
e.

Either the cake wasn't poisoned or the dog will die.
Either the cake wasn't poisoned or the dog will eat it.
Either the cake wasn't poisoned or the dog won't be thirsty.
Either the cake wasn't poisoned or the dog is called Chester.
Either the cake wasn't poisoned or the dog is a space alien from Alpha
Centauri.

The acceptability of the sentences in (83) declines in precisely the same way as their equivalents in (81).
Hence, we can conclude that the relatedness between antecedent and consequent in a conditional does not result from the semantics of if and we are not in a position to reject the truth-conditional interpretation of natural language conditionals as material implication.
Unfortunately, while a theory of language use can be used to account for some of the vagaries of the use of material implication as the interpretation of English if...
then, it is hard to see how it can account for all of them.
Apart from the existence of counterfactual conditionals like If Chester had not eaten the poisoned cake, he would have lived and If I were rich, I would spend every day gardening which require something more than simple material implication for their interpretation, the very equivalence between material implication and disjunction noted above argues against the correctness of this analysis.
Thus, while the sentences in (83) seem to be reasonable paraphrases of those in (81), there are many pairs of sentences with the same structure that are not paraphrases of each other.
Consider, for example, the sentences in (84) (taken from Gazdar (1979:83)) and (85) (taken from McCawley
(1981:222)).
Neither of these pairs of sentences are paraphrases, despite the fact that the use of -> to translate //""predicts that they are.
(84) a.
b.
230

If you have your ankle removed your foot will drop off.
Either your foot will drop off or you will not have your ankle removed.",248,230,7 Inference,No info,No info,inference circumstance entertain possibility dog space alien alpha centauri hearer ground speaker flouting maxim quantity untrue former tollens assume antecedent false anyone utters sentence cake poisonous similar fashion possible convey consequent true antecedent sentence truth conditional true consequent true sentence equal client innocent client innocent mccawley grice conversational maxim interpretation used account number peculiarity interpretation pragmatic explanation fact feasible fact connectivity paraphrase conditionals disjunction formula equivalent disjunction antecedent formula tautology theory sentence paraphrase cake dog cake dog cake dog thirsty cake dog chester cake dog space alien alpha centauri acceptability sentence equivalent conclude relatedness antecedent consequent conditional result semantics position interpretation natural language conditionals material implication theory language use account vagary use material implication interpretation english hard account existence counterfactual conditionals chester cake rich day gardening simple material implication interpretation equivalence material implication disjunction correctness analysis sentence reasonable paraphrase many pair sentence structure paraphrase sentence gazdar mccawley pair sentence fact use translate foot foot drop ankle
230,"Further reading
(85) a.
b.

If you come a step closer, I'll scream.
Either you won't come a step closer or I'll scream.

It is considerations like these, rather than the problem of conditionals with false antecedents, that militate against the use of material implication to translate conditional sentences in natural languages.
Many suggestions have been put forward for the analysis of such sentences and all go well beyond ascertaining the truth of conditionals over a single state of affairs.
That is to say, the truth of a conditional like
If it doesn't rain, then there is drought depends not just on whether it is not raining and there is drought here and now, but on whether in all or the majority of cases in which it doesn't rain, there is drought.
Such approaches take us beyond the extensional semantics that has been developed in Chapters 2 to 6 into the realm of intensionality, the topic of the final chapters of this book.
Conditionals, however, will not be further discussed, as the topic is extremely controversial and requires more space than can be given here.
The reader is referred to the books and articles mentioned in the next section for more information, but these should not be tackled until the reader has discovered more about intensionality.
7.5

Further Reading

For a general discussion of inference, see Sperber and Wilson (1986: ch.
2).
Logical deduction figures largely in textbooks on logic and the rules mentioned in this chapter
(and many others) can be found by looking at any reasonable introductory book on predicate and propositional logic.
As before, the most accessible account is given in
Guttenplan (1986:124-165), which deals with the inferences that are generated by the propositional operators, and pp. 245-276, which deals with the quantifiers.
All wood,
Andersen and Dahl (1977: ch.
6) provides a concise summary, as does Partee, ter
Meulen and Wall (1990:115-136; 154-180), while Martin (1987: ch.
5) gives a rather more formal account of logical deduction.
For a detailed discussion of lexical meaning in general linguistic semantics, see Cruse (1986) and also the discussions in Lyons
(1977: 250-335) and Lyons (1981: chs.
2 to 4).
Pulman (1983) gives an interesting discussion of the possibility of constructing a theory of lexical meaning, taking up the challenge of the philosophers W. V. O. Quine (see Quine (I960)) and H. Putnam (see
Putnam (1975)).
There is not a great deal of literature specifically about lexical meaning within formal semantics: there is a slightly dated discussion in Kempson
(1977: ch.
6) and a more sophisticated one in Chierchia and McConnell-Ginet (1990: ch.
8).
Dowty (1979: 193-321) provides a lengthy discussion of the topic with particular reference to grammatical aspect.
Thematic (participant) roles are given an analysis in terms of lexical entailments defined by meaning postulates in Dowty
(1989) and Dowty and Ladusaw (1988).
See also the articles in Eikmeyer (1981) and
Ballmer and Pinkal (1983).
The non-truth-functional aspects of the propositional connectives have received a considerable amount of attention since Grice (1975;
1978): Levinson (1983: ch.3) discusses the topic, as do McCawley (1981: 215- 233) and Chierchia and McConnell-Ginet (1990: 187-203).
Gazdar (1979: chs.
3 & 4) provides a formalisation of the notion of implicature and a discussion of the truth-functional connectives.
These problems have been re-addressed within the literature on Relevance Theory: see, especially, Blakemore (1987; 1989) and, for a
231",249,231,7 Inference,No info,No info,reading step step scream consideration problem false antecedent militate use material implication translate conditional sentence natural language many suggestion analysis sentence truth conditionals single state affair truth conditional rain drought drought majority case rain drought approach extensional semantics chapter realm intensionality topic final chapter book conditionals topic controversial space reader book article next information reader intensionality general discussion inference sperber wilson logical deduction figure textbook logic rule many others reasonable introductory book propositional logic accessible account guttenplan deal inference propositional operator deal quantifier wood andersen dahl concise summary partee ter meulen wall martin formal account logical deduction discussion lexical meaning general linguistic semantics cruse discussion lyon lyon chs pulman interesting discussion possibility theory lexical meaning challenge philosopher quine quine putnam putnam great deal literature lexical meaning formal semantics discussion kempson chierchia dowty lengthy discussion topic particular reference grammatical aspect thematic participant role analysis term lexical entailment meaning postulate dowty dowty ladusaw article eikmeyer ballmer pinkal aspect propositional connective considerable amount attention grice levinson discus topic mccawley chierchia gazdar chs formalisation notion implicature discussion connective problem literature relevance theory blakemore
231,"7 Inference critique of some aspects of the Gricean approach, Carston (1988).
The literature on conditionals is predictably large.
Gazdar (1979: 83-87) provides semantic reasons for rejecting material implication as a reasonable interpretation of the meaning of if
McCawley (1981: 296-326) discusses modalised implication and counterfactual conditionals, the latter based on the seminal discussion in Lewis (1973).
Van Benthem
(1986: ch.
4) provides an account of conditionals as generalised quantifiers, while the papers in Traugott, ter Meulen, Reilly and Ferguson (1986) provide a good overview of the main issues for formal and general linguistic semantics and language typology.

232",250,232,7 Inference,No info,No info,inference critique aspect gricean approach carston literature conditionals large gazdar semantic reason rejecting material implication reasonable interpretation meaning mccawley discus implication counterfactual conditionals seminal discussion lewis van benthem account conditionals quantifier paper traugott ter meulen reilly ferguson good main issue formal general linguistic semantics language typology
232,"8

8.1

Time, Tense and Aspect

Temporal contingency

The grammar fragment developed in previous chapters generates sentences only in the past tense form.
This has been a matter of expediency to allow more natural English to be used for the examples.
However, the temporal properties of the sentences implied by the use of this tense have, in fact, been completely absent from their interpretation.
The models we have been working with only contain a set of basic entities, A, and a function F which assigns an extension to each lexeme in the language.
The denotations assigned by the latter are, however, static and no notion of change or development is (or could be) incorporated.
This means that really the model theory treats all formulas as universal truths or universal falsehoods, as if they were all of the same sort as sentences like e - me2, All humans are mortal, No bachelors are unmarried, The square root of nine is seventeen, and so on.
The propositions expressed by such sentences have the same truth value at all times and so may be thought of as 'timeless'.
Most of the sentences generated by the grammar fragment, however, translate into formulae that could vary in truth value according to time and place, and other contextual factors.
For example, A lecturer screamed may be true if uttered today but false if uttered the day before yesterday.
Such sentences do not denote universal truths or falsehoods but contingent ones, ones whose truth depends on what is happening or has happened at a particular time.
Most, if not all, languages have ways to refer to situations that are happening now or that have happened in the past or that are going to happen in the future.
Furthermore, many languages can present situations as ongoing or complete (e.g. Fiona was singing a song versus Fiona sang a song) and the duration or time of occurrence of events can be specified directly within sentences (e.g. Fiona sang for five minutes yesterday afternoon).
In this chapter, we are concerned with defining a theory that enables the difference between timeless and temporally bound sentences to be captured.
To do this we will sketch a fairly simple theory of time and use this to provide an account of the way English may refer to present, past or future events (tense) and how such events are presented as ongoing or complete (aspect).
The analysis concentrates on basic tense and aspect, and no attempt is made to incorporate temporal adjuncts like the adverbial phrases yesterday, on Tuesday, etc. or sentential adjuncts like when clauses.
8.2

Time

Before tense or aspect can be incorporated into the theory, the concept of time needs to be introduced.
According to one view, time consists wholly of a series of moments which are all ordered with respect to each other so that each moment either precedes or follows all the others.
This captures the intuition that time is directional, irreversible and uniform.
This can be formally defined by a set, T, of moments of time and a relation is earlier than or precedes symbolised as < which has the properties in (1).
233",251,233,"8 Time, Tense and Aspect",No info,No info,time tense aspect temporal contingency grammar fragment previous chapter sentence tense form matter expediency natural english example temporal property sentence tense fact absent interpretation model contain basic entity function extension lexeme language denotation latter static notion change development mean model theory formula universal truth universal falsehood sort sentence human mortal bachelor unmarried square root proposition sentence truth value time sentence grammar fragment translate formula truth value time place contextual factor lecturer uttered false uttered day yesterday sentence denote universal truth falsehood contingent truth particular time language way refer situation future many language present situation ongoing complete fiona singing song fiona sang song duration time occurrence event sentence fiona minute yesterday afternoon concerned theory difference timeless sentence simple theory time use provide account way english present past future event tense event ongoing complete aspect analysis basic tense aspect attempt incorporate temporal adjunct adverbial phrase yesterday tuesday sentential adjunct clause time tense aspect incorporated theory concept time view time series moment respect moment precedes others capture intuition time directional irreversible uniform set moment time relation earlier precedes property
233,"Time, tense and aspect
(1)

For all t, and tj e T: a. ~(t,<t,).
b. ((t,<t J )&(t J <t k ))-»(t,<t k ).
c. (t i <t J )^~(t J <t l ).
d.

(t, < tj) v (tj < t.) v (t, = tj).

The condition in (La) disallows any moment of time from preceding itself, thus making < irreflexive; (l.b) imposes transitivity on the relation by requiring any moment of time that precedes another to precede all other moments that the latter precedes; and the third condition ensures that the relation < is asymmetric by disallowing moments of time from both preceding each other.
The final condition in
(1 .d) makes the relation dense by ensuring that there are no moments of time outside the series T and that every moment precedes or follows every other moment except itself.
Given these conditions, one may think of T as the set of natural numbers and
< as the relation is less than.
This concept of time may also be represented by the time line in (2) where the line represents moments of time ordered from the past into the future as indicated by the arrow and t is a particular moment on this series.
(2)

8.2.1

Intervals of time

Moments of time seem adequate for assessing the truth of formulae containing expressions referring to instantaneous events like sneeze', but there are many activities like writing a book or painting a picture, which occur over a period of time during which it may not be true that for all moments in that period someone is actually in the process of writing or painting.
Thus, while it is true that I am currently writing this textbook in August 1991, it is not true that I was actually writing three hours ago
(since I was still in bed) and yet one of the interpretations of the sentence Ronnie is writing a book on semantics was as much true three hours ago as it is now.
Furthermore, events may be presented as occurring during the period when some other event is occurring.
For example, I may describe my current situation with the sentence
I am eating my breakfast while writing this sentence, presenting two different events as occurring at the same time.
To be able to account for situations such as bookwriting and other non-instantaneous events and to allow for events to be contained in or overlap others, the truth of formulae may be assessed not at moments of time but at intervals of time.
Thus, the proposition expressed by Ronnie wrote a book is assessed as being true if, over a period of time that has now finished, Ronnie was writing a (particular) book and that book is now complete.
This sentence does not, however, require Ronnie to begin and complete the writing of a book at some particular moment in time, nor that it be true that Ronnie wrote at every moment of the time that he took to complete the book.
In interval semantics, moments of time are primitive, and intervals of time are defined in terms of these, as a continuous set
234",252,234,"8 Time, Tense and Aspect",No info,No info,time tense aspect condition disallows moment time irreflexive transitivity relation moment time precedes precede moment latter precedes third condition relation asymmetric moment time final condition relation dense moment time series moment precedes moment condition natural number relation le concept time time line line moment time past future arrow particular moment series interval time moment time adequate truth formula expression instantaneous event many activity writing book painting picture period time true moment period someone process true textbook august true writing hour interpretation sentence ronnie writing book semantics much true hour event period event current situation sentence breakfast writing sentence different event time able account situation event event overlap others truth formula moment time interval time proposition ronnie book true period time ronnie particular book book complete sentence ronnie complete writing book particular moment time true ronnie moment time complete book interval semantics moment time primitive interval time term continuous set
234,"Time of moments of time ordered by the precedence relation, <.
The set of all possible intervals of time is thus defined as in (3) as the set of all continuous subsets, i, of a set of moments of time, T, ordered by the precedence relation, <
(3)

I = {i c T I ((t, € i) & (tk e i) & (t, < tj < t*)) -> (tj e i)}.

Intervals of time may overlap with, be contained in, or precede, other intervals.
Two intervals i and j overlap (written ioj) if they share moments of time; one interval, i, is contained in another, j , (written i c j ) if every moment in i is also in j ; and one interval, i, precedes another, j (written i < j), if every moment in i precedes every moment in j .
These definitions are summed up in (4) and a schematic example illustrating the concepts is given in (5).
In the latter, the four lines under the time line marked i, j , k and 1 are all intervals of time such that k overlaps with i and j , 1 is a subinterval of (is contained in) j , and i and j are independent of each other, except that i precedes j (and k precedes 1), as summarised in (6).
(By the definition in (4.c) i does not precede k and k does not precede j , because they overlap.)
(4) a.
b.
c.

For all temporal intervals i and j in I: i o j if, and only if, i n j * 0 .
i c j , if, and only if, i n j = j .
i < j , if, and only if, Vte i [Vt'ej [t < t']].

(5)

(6) a.
b.
c.
i<j,k<l.
iokjoljok.
lcj.

For notational convenience, an interval of time is represented, not by using set notation, but by enclosing the endpoints of the interval between square brackets.
Thus, the interval symbolised as [t^tg] is the set of all moments of time between t4 and t8, i.e. {t4,t5,t6,t7,t8}.
An interval of time that is no more than a moment is represented within interval semantics as a unit set of times, i.e. as an interval consisting only of a single moment of time, {t}, and is indicated by enclosing the moment of time between square brackets.
For example, [t7] is the interval of time consisting only of the moment t7, i.e. {t7}.
These definitions are given in (7).
(7) a.
b.

Interval of time: [t to tj =def {11 U < t < t 2 }.
Moment of time: [t] =ber {t}.

235",253,235,"8 Time, Tense and Aspect",No info,No info,time moment time precedence relation possible interval time continuous subset moment time precedence relation interval time precede interval interval overlap ioj share moment time interval written moment interval precedes moment precedes moment definition schematic illustrating concept latter line time line interval time overlap subinterval independent precedes precedes precede precede temporal interval vte iokjoljok lcj notational convenience interval time notation endpoint interval square bracket interval moment time interval time moment interval semantics unit time interval single moment time moment time square bracket interval time moment definition interval time moment time
235,"Time, tense and aspect
8.2.2

Temporal models

In order to incorporate time into our semantic theory, the models with respect to which the truth of a formula must be assessed must be extended to the ordered quadruple in (8).
(8)

Temporal model: «A,F,T,<».

As before, A is a set of entities specifying the ontology of the model and T is a set of moments of time ordered by the dense linear ordering <, as defined in (1).
Intervals of time as such are not part of the model directly as they are not primitive but derived from the set of moments of time, T, and the precedence relation, <, in the way specified in (4).
As before, F is the function that assigns denotations to lexemes in the model, but now, of course, it must do so at particular temporal intervals.
F may, therefore, be defined as a function from lexemes to sets of ordered pairs of times and extensions, <i,A>, where i is a temporal interval and A (Delta) is the extensional denotation of a constant at the time i.
The models defined in this book are all complete in the sense that it is always possible to determine the extension of any well-formed expression in the object language.
It is therefore necessary to ensure that there are no times for which the extension of some expression is not specified.
In other words, F assigns denotations to basic expressions in such a way that the extension of the latter can be ascertained for every interval defined on T so that there are no 'holes' in the model where the extension of a particular constant is unspecified at some particular time.
This is done by requiring that the union of all temporal intervals in the range of
F(a) for each constant a be equal to the largest possible interval, i.e. the set of times
T. This strong condition on (complete) temporal models is formally written as the statement in (9) where the symbol U indicates the union of all sets i where i is the interval of time that forms the first element in an ordered pair in F(oc).
(9)

U<i,A> e F(cc) = T, for all constants a in the object language.

As an example of a temporal model, let us consider a situation in which the four humans of our previous models, Jo, Fiona, Bertie and Ethel, previously unacquainted, meet for the first time.
On first impressions, both Fiona and Ethel like Jo and Jo likes both of the others.
Nobody likes Bertie at first and he likes no-one else.
After a time, however, Fiona decides she doesn't like Jo, but likes Ethel instead.
At the same time,
Ethel decides she does like Bertie.
After another period of time, Ethel too decides she doesn't like Jo but does like Fiona.
Bertie also comes to like Ethel.
This situation can be formally represented in a model, call it M8, containing four entities MANi (Jo),
MAN2 (Bertie), WOMANt (Ethel) and WOMAN2 (Fiona) and nine moments of time, ti to U (a ludicrously small timescale in reality but sufficient to illustrate the idea).
The denotation assignment function, F8, models the above situation by assigning the denotation to like' in (10), where there is no moment of time in which the lexeme does not have a specified extension (even if this is null for some moments).
We assume here, and elsewhere, that individual constants denote the same entity at all times in a model so that F8 assigns to each individual constant, jo', flona', bertie' and etheV, a single member of A for the largest interval in I, i.e. T itself.

236",254,236,"8 Time, Tense and Aspect",No info,No info,time tense temporal model order incorporate time semantic theory model respect truth formula quadruple temporal model entity ontology model moment time dense linear ordering interval time part model primitive moment time precedence relation way function denotation lexeme model course temporal interval function lexeme set pair time extension temporal interval delta extensional denotation constant time model book complete sense possible determine extension expression object language necessary time extension expression word assigns denotation basic expression way extension latter interval model extension particular constant unspecified particular time union temporal interval range constant largest possible interval time strong condition complete temporal model statement symbol union interval time form first element pair constant object language temporal model situation human previous model fiona bertie ethel meet first time first impression fiona ethel others nobody bertie else time fiona ethel time ethel bertie period time ethel fiona bertie ethel situation model call entity mani bertie womant ethel fiona moment time small timescale reality sufficient illustrate idea denotation assignment function model situation assigning denotation moment time lexeme specified extension null moment individual constant denote entity time model individual constant flona bertie ethev single member largest interval
236,"Time
(10) a.
b.
c.
d.
e.

F8(jo') =<[ti,t,],MAN,>.
F8(fiona') =<[t1,t9],WOMAN2>.
F8(bertie') =<[tl9t,],MAN2>.
F8(ether) =<[t,,«,WOMAN,>.
F 8 (like')={<[t,],0>,
<[t a ,y,{<MAN 1> WOMAN 1 >,<MAN 1 ,WOMAN 2 >,
<WOMAN1,MAN1>, <WOMAN2,MAN1>}>,
<[t4,t6],{<MAN1,WOMAN1>, <MAN1,WOMAN2>, <WOMAN1,MAN1>,
<WOMAN 2 ,WOMAN 1 >,<WOMAN 1 ,MAN 2 >}>,
<[t7,t9],{<MAN1,WOMAN1>,<MAN1,WOMAN2>,
<WOMAN1,WOMAN2>,<WOMAN2,WOMAN1>,
<WOMAN1,MAN2>, <MAN 2 ,WOMAN 1 >}>}.

The situation specified in (10) can be represented diagrammatically as (11), where each line bounded by square brackets under the time line indicates the interval during which one person likes another.
(11)

H h

H h

0
<WOMAN2,MAN1>
<WOMAN1,MAN1>
<WOMAN2,WOMAN1>, <WOMAN1,MAN2>

<WOMAN1,WOMAN2>, <MAN2,WOMAN1>
•
, <MAN1,WOMAN2>

To ascertain the truth of temporal formulae, however, it is necessary to know not only the model, but also the time at which the formula is being assessed.
For example, the formula (like'(jo'))(fiona') is true with respect to (10) at the interval [t3] (a moment of time), but false at [t 7 ], while (like'(fiona'))(jo') is true at all intervals except [ t j .
Hence, all logical expressions must be interpreted with respect not only to a model, M, and an assignment of values to variables, g, but also an interval of time, i.
The extension of an expression, oc, with respect to M, g and i is symbolised as
To interpret temporal formulae, the base clause of the model theory must be altered to identify the meaning of a constant at a particular time with its extension at
237",255,237,"8 Time, Tense and Aspect",No info,No info,time man fiona bertie ether woman man woman man woman woman woman woman man man woman situation line square bracket time line interval person ascertain truth temporal formula necessary know model time formula formula fiona true respect interval moment time false fiona true interval logical expression respect model assignment value variable interval time extension expression respect interpret temporal formula base clause model theory constant particular time extension
237,"Time, tense and aspect that time as specified by the denotation assignment function of the model (12.a).
Because the value of F applied to a constant a is a set of ordered pairs, F(oc) may be interpreted as a function from intervals to extensions.
Thus, where <i,A> is in F(oc),
F(oc)(i) is the extension, A, of a at interval i.
For example, ¥%(like')([t2M) is the set
{<MAN,,WOMAN,>, <MAN1,WOMAN2>,
<WOMAN1,MAN1>,
<WOMAN 2 ,MANi>} (according to (8.e), above).
The rule for interpreting functor/argument structures at a particular time is then given by the rule of functional application relativised to temporal intervals.
Thus, the interpretation of an expression f(a) with respect to a model, a variable assignment and a particular interval of time, is determined by the application of the extension of the functor,/, at that time to that of the argument at the same time, cf. (12.b).
(12) a.
b.

Given a model M = «A,F,<,T»:
If a is a constant, then [oc]M& = F(a)(i).
If f(a) is an expression in LQ, then [f(a)]M^ = [f] M ^ ([a]M*9.

Given the revised model theory in (12), to obtain the interpretation of the expression (like'(jo'))(fionay) at the interval [t2,t4], one must apply the function
[like'(jo')]m^a^ to the argument [fiona*]™*^2™.
Since fwna' is a constant in the logic, [fiona']m*<[t2M] is given by FJfiona') applied to the interval, [t2,t4].
Under our assumption that individual constants like fwna' extensionally denote the same entity at all times, Fs(fiona')([t2M) is the same as F*(fwna')([UMX i.e. WOMAN 2 .
The functor expression, on the other hand, like'(jo'), is not basic, and so its extension at the interval [t^tj is computed by a second application of (12.b) from the extension of like' at this interval applied to that of jo' in M8 at the same time.
Since Jo translates as an individual constant, [/V]*18^12'41 is F8(/o')([t1,t9]), i.e. MANX.
The function denoted by [like 'JMSAIQ^I [S given by F8(//Jte')([t2,t4]) which, as we saw above, is that function in({0,l}A)Athat defines the set {<MAN 1 ,WOMAN 1 >,<MAN 1 ,WOMAN 2 >,
<WOMAN 1 ,MAN 1 >, <WOMAN 2 ,MANi>}.
Applying the appropriate function to the entity denoted by jo', i.e. MANi, gives the characteristic function of the set
{WOMANi,WOMAN2), which is thus the value of [like '(jo ')]*»*#&*.
The application of this function to the extension of fwna' yields the value 1, since WOMAN 2 is in the set denoted by the predicate at that time.
Hence, the formula (like '(jo '))(fiona') is true with respect to M8 at the interval [t 2 ,tj.
(13) summarises the steps taken to arrive at this interpretation.
(13) a.
b.
c.
d.
e.

238

[(like'(jo'))(fiona')] M w 2t4 J is 1 iff [like'(jo')]M8-8[t2t4] ([fiona'] M8 ^ t2t4 0 is 1.
[like'(jo')] M8 ^ t2t41 ([fiona'] M8 ^ t4 0 is 1 iff
([like']M8'8-tt2-t4i ([jo>]M8'8tt2t40)([fiona']M8'8it2t40 is 1.
[fiona']M8'8tt2t4] is F8(fiona')([t2,t4]) is WOMAN 2 .
[jo']M8'8lt2t4] is F8(jo')([t2,t4]) is MAN,.
[like'] M8 '8[ t2t4 i is F 8 ( l i k e ' ) ( [ t 2 , t 4 ] ) , the function defining
{<MAN b WOMAN 1 >,<MAN 1 ,WOMAN 2 >, <WOMAN^MAN^,
<WOMAN 2 ,MAN,>} (call this K).
f.

K ( M A N 0 ( WOMAN,) = 1.
g.

So [(like>(jo'))(fiona')]M8-8ft2t4]is 1.",256,238,"8 Time, Tense and Aspect",No info,No info,time tense aspect time denotation assignment function model value constant pair function interval extension extension interval man woman mani rule structure particular time rule functional application temporal interval interpretation expression respect model variable assignment particular interval time application extension functor time argument time model constant expression model theory interpretation expression fionay interval function argument fiona constant logic fiona fjfiona interval assumption individual constant fwna entity time fiona woman functor expression hand basic extension interval second application extension interval time individual constant manx function function defines man woman man woman woman man woman mani appropriate function entity mani characteristic function womani value application function extension fwna value woman predicate time formula fiona true respect interval step interpretation fiona fiona fiona fiona fiona fiona woman man function man woman man woman woman man woman fiona
238,"Time
Exercise 8.1:
The verb like is a stative verb so that its extension at some interval of time remains the same for every subinterval of that interval.
Assuming this to be so, work out the extensions of the following expressions at the intervals indicated with respect to the model in (10).
i.
ii.

(like'(ether))(fiona') at
(like'(fiona'))(jo') at [tj.

Ascertaining the truth or falsity of formulae with respect to temporal intervals that correspond to the times specified by the denotation assignment F is given directly by the theory of interpretation in (12), but problems arise in interpreting formulae with respect to intervals that are not specified by F. In the previous exercise, we assumed that, because like is stative, if x likes y at an interval i, then x likes y at all subintervals of i.
Without any contextual information to the contrary, this seems intuitively correct and solves the problem of ascertaining the extension of certain types of constant (but not all; see section 8.3.2) at subintervals of the intervals specified by F.
A more intractable problem arises, however, when we consider the truth of a formula with respect to an interval of time which spans a change in the extension of a constant in the formula being interpreted.
To illustrate the problem consider the interpretation of the formula (like'(jo'))(fiona') at the interval [t4,ts].
According to
(10), this formula is true at moment [t4] but false at moment [t5].
What then is the truth value of [(Uke'(jo'))(fiona')]m*itW} This question requires an answer to the more general question: what exactly is meant by the expression 'true at an interval of time' ?
Clearly if we mean 'true at some time during an interval', then the example formula is true with respect to the little model given above, since there is a subinterval ([t4]) at which (like '(jo '))(fiona') is true.
On the other hand, if it means 'true throughout an interval of time', then, of course, [(like'(jof))(fionaf)]M**[t4t5] is false, because there is a subinterval ([t5]) at which the formula is false.
Although this is not a problem that arises directly in this chapter, because of the way the truth of formulae is assessed with respect to arbitrary intervals of time, a grammar fragment that analyses temporal adverbials like on Tuesday, last week, two years ago, needs to have this problem solved in order that sentences like Fiona sang last Tuesday may be interpretable in a situation in which there are periods on the appropriate day in which Fiona did indeed sing, but other periods in which she didn't.
Furthermore, a formula should in principle be interpretable with respect to any interval in the model, and so some solution must be provided whereby the extensions of expressions can be ascertained at all temporal intervals irrespective of whether or not those intervals are directly mentioned by the denotation assignment function of the model in question.
The solution that is adopted here takes the notion of truth at an interval to be equivalent to truth at some time during an interval.
The reason for this decision can be seen from a consideration of the truth-conditions of sentences like the ones in (14).

239",257,239,"8 Time, Tense and Aspect",No info,No info,time exercise stative verb extension interval time subinterval interval work extension expression interval respect model ether fiona fiona ascertaining truth falsity formula respect temporal interval correspond time denotation assignment theory interpretation problem formula respect interval previous exercise interval subintervals contextual information contrary correct problem extension certain type constant subintervals interval intractable problem truth formula respect interval time span change extension constant formula illustrate problem interpretation formula fiona interval formula true moment false moment truth value uke fiona itw question answer general question expression interval time time interval formula true respect little model subinterval fiona true hand mean interval time course jof fionaf false subinterval formula false problem way truth formula respect arbitrary interval time grammar fragment analysis temporal adverbial tuesday last week year problem order sentence fiona last tuesday interpretable situation period appropriate day fiona sing period formula principle interpretable respect interval model solution extension expression temporal interval interval denotation assignment function model question solution notion truth interval equivalent truth time interval reason decision consideration sentence
239,"Time, tense and aspect
(14) a.
b.
c.
d.

Jo kicked the dog yesterday.
Fiona sang the song last Tuesday.
Bertie will paint a picture next year.
Ethel knew how to play golf last year.

These sentences all express true propositions, if the event described by the verb and its arguments occurred at some time during the interval described by the adverbial expression.
For example, the sentence in (14.b) translates into a formula that is true, if the person called Fiona sang the (contextually salient) song at some time on the
Tuesday before the time of utterance.
It does not, however, require that Fiona sang the song all throughout the day in question.
The sentence in (14.d) appears to imply that
Ethel knew how to play golf throughout the whole of the year preceding the one in which the sentence is uttered, but it would not be falsified if, for example, she knew how to play golf from January to September of that year and then was in an accident that made her forget that there exists a game called golf, let alone how to play it.
In general, therefore, we can take truth at an interval to be defined according to truth at some period in that interval.
Formally, this can be defined by taking the denotation of a constant, a, at an interval i to be determined by the union of the extensions of a at all intervals that overlap with i, as specified by the denotation assignment function, F. For example, [like']m>s[t4t5] is given by F9(like')Q) for all intervals j that overlap with [t4,t5].
According to the model, Mg, there are two such intervals in the domain of F: [t2,t4] and [tS9U\ (see (lO.c)).
In the former interval like' denotes the set {<MAN1,WOMAN1>, <MAN1,WOMAN2>, <WOMAN1,MAN1>,
<WOMAN 2 ,MAN 1 >}, whilst in the latter it denotes the set {<MAN1,WOMAN1>,

<MAN 1 ,WOMAN 2 >, <WOMAN1,MAN1>, <WOMAN 2 ,WOMAN 1 >,
<WOMAN1,MAN2>}.
The union of these two sets is {<MANi,WOMAN!>,
<MAN 1 ,WOMAN 2 >, <WOMAN 1 ,MAN 1 >, <WOMAN 2 ,MAN 1 >,
<WOMAN!,MAN2>, <WOMAN2,WOMAN1>} which provides the extension of like' at the interval [t4,t5].
The formula (like '(jo y))(fwna') is thus true with respect to model
M« and interval of time [t4,t5].
The first clause in the model theory must now be revised as in (15) which also contains a restriction on the overlapping intervals that are relevant to the interpretation.
According to the definitions in (4.a) and (4.b), above, proper subintervals also overlap with their containing intervals.
Although the extensions of stative predicates at some particular time are maintained for all subintervals of that time, this property is not shared by all predicates.
For example, a sentence like Bertie painted a picture last week should not be interpreted as expressing a true proposition with respect to a situation where Bertie painted a picture over a two week interval containing last week (see section 8.3.2 for more discussion of these sorts of predicate).
Hence, (14) excludes from the definition of the extension of a constant at some time, i, the extensions of that constant at other times which properly contain i.
However, if i is in the domain of F then the definition in (15) reduces to that in (12.a), under the assumption that F does not include overlapping intervals for individual constants.
(15)

240

If a is a constant, then [a]M-^ is UA, where F(oc)(j) = A for all ioj where i is not a proper subinterval of j .",258,240,"8 Time, Tense and Aspect",No info,No info,time tense aspect dog yesterday fiona sang song last tuesday bertie picture next year ethel play golf last year sentence true proposition event verb argument time interval adverbial expression sentence formula true person fiona salient song time tuesday time utterance fiona sang song day question sentence ethel play golf whole year sentence play golf january september year accident forget game golf general truth interval truth period interval denotation constant interval union extension interval overlap denotation assignment function interval overlap model interval domain former interval denotes woman man latter denotes man woman woman woman union mani woman man woman woman man woman man woman extension interval formula true respect model interval time first clause model theory restriction interval relevant interpretation definition proper subintervals interval extension stative predicate particular time subintervals time property predicate sentence bertie picture last week true proposition respect situation bertie picture week interval last week discussion sort extension constant time extension constant time domain assumption interval individual constant constant ioj proper subinterval
240,"Tense
The rest of the model theory, covering the interpretation of the propositional connectives, the lambda operator and the quantifiers, needs also to be revised in the light of the introduction of time.
These are all straightforward revisions, and a fuller discussion of the model theory is postponed until Chapter 10.
8.3

Tense

Given the theory of time and temporal models presented in the last section, the interpretation of simple tensed formulae is fairly straightforward and is the topic of this section.
In the following subsections, a general theory of tense will be presented, providing the basic interpretations of Present tense, Past tense, and Future tense and discussing certain combinations and entailments of these.
Many languages do not have morphological tense systems and very few have a three-way tense system, but all languages seem to have ways of referring to times other than the time of utterance.
The theory put forward in this chapter is a general one, in the sense that it does not claim to analyse specific tense systems, but provides the machinery to talk about present, past and future time reference.
It should be emphasised that as we move away from a purely extensional semantics like that developed in Chapters 2 to 6, the amount of controversy and debate increases.
Readers are asked to bear in mind, therefore, that what is presented here is no more than an outline of what is acknowledged to be an as yet incomplete theory in a fairly rudimentary state of development.
Readers are invited to pursue their own ideas and are encouraged to compare the truth-conditions suggested for the interpretation of different tenses with their intuitions about their own language or their knowledge of languages other than English.
8.3.1

Past, present and future

Tense is a deictic category that locates in time the state of affairs described by a sentence.
This location is not precise, but relative to some other time, a temporal reference point, the most important of which is the time of utterance, the interval
(usually assumed to be a moment) in which a sentence is uttered by some speaker.
It is with respect to this time that present, past and future for the speaker are computed.
Thus, for those languages that have it, a declarative sentence in the present tense can be used to assert that the event described by the sentence occurs at the time the sentence is uttered, i.e. the time of the event is located at the time of utterance.
A declarative sentence in the past tense, on the other hand, can be used to assert that the event occurred prior to the time of utterance and one in the future tense, that the event will occur after the time of utterance.
Although in a discourse the time of utterance is always the main reference time, it is possible for other times to act as the principal reference time for the interpretation of a tensed sentence, particularly for multiply tensed sentences (see Section 8.2.2) or embedded clauses.
Hence, the definitions given below refer only to principal reference times rather than the time of utterance, in order to maintain generality.
Since tense locates situations in time that are described by a sentence, the tenses can be represented in logic as operators over formulae.
Thus, temporal logics contain a set of tense operators which, being expressions of type <t,t>, combine with formulae to yield tensed formulae.
The introduction of these operators into the
241",259,241,"8 Time, Tense and Aspect",No info,No info,tense rest model theory interpretation propositional connective lambda operator quantifier light time straightforward revision fuller discussion model theory tense theory time temporal model last interpretation simple formula straightforward topic subsection general theory tense basic interpretation present tense tense future tense certain combination entailment many language morphological tense system tense system language way time time utterance theory general sense claim analyse specific tense system machinery talk present past future time reference extensional semantics chapter amount controversy debate increase reader bear mind outline incomplete theory rudimentary state development reader pursue idea compare interpretation different tense intuition language knowledge language english present future tense deictic category locates time state affair sentence location precise relative time temporal reference point important time utterance interval moment sentence speaker respect time present past future speaker language declarative sentence tense assert event sentence time sentence time event time utterance declarative sentence tense hand assert event prior time utterance future tense event time utterance discourse time utterance main reference time possible time act principal reference time interpretation sentence tensed sentence clause definition refer principal reference time time utterance order generality tense locates situation time sentence tense logic operator formula temporal logic contain tense operator expression type combine formula yield formula operator
241,"Time, tense and aspect language LQ gives the tensed logical language, Lr.
The present tense operator is symbolised as Pres and the representation of a sentence like Fiona sings in Lr is Pres
(sing '(fiona')), and that of Every student sings is Pres (\/x [student '(x) —> sing '(x)]).
As mentioned above, the use of the present tense may indicate that the truth or falsity of a formula is to be assessed with respect to the primary reference time, usually the time of utterance.
Thus, on one interpretation, the proposition expressed by the sentence Fiona sings is true if there is someone called Fiona who is singing at the time the sentence is uttered.
In other words, the present tense locates the time of the event or situation described by a sentence at the time of utterance and so the interpretation of the LT representation ofFiona sings is identical to [sing '(fiona 'j] M8 «•», where i is the time of utterance.
Thus, the interpretation of formulae containing the present tense operator at some time i is equated with the interpretation of the formula without the operator at the same interval of time.
The truth-conditions of such formulae are spelled out formally in (16) and represented diagrammatically in (17) where i is the reference time placed on the time line which clearly shows that the time at which the embedded formula ty is to be interpreted is the same as the principal reference time.
(16)

Present tense: [Pres (<!>)]**** is 1 iff [$]*** is 1.

(17) i

Pres(<|>)

The fact that present tense formulae at a particular time are interpreted identically to the corresponding untensed formula at that time leads many logicians to omit the present tense operator altogether.
However, many languages morphosyntactically mark the present tense and many distinguish tensed from untensed sentences.
The linguistic evidence thus points to the need for a present tense operator, as well as past or future tense ones, even though this may be semantically unnecessary, according to the interpretation given in (16).
In a discourse, however, it is possible that the use of tense introduces particular reference times that can be subsequently referred to by pronominal expressions (like then, from that time on, etc.).
Untensed sentences, on the other hand, do not seem to have this property.
A more sophisticated theory that considers the needs of discourses, rather than isolated sentences, would thus very likely make use of a present tense marker and so a present tense operator is adopted here, despite the fact that it is truth-conditionally otiose.
To capture the force of the past tense, an operator Past is used which gives rise to formulae like the ones in (18) which represent the formulae expressed by the
English sentences in (19), respectively.

242",260,242,"8 Time, Tense and Aspect",No info,No info,time tense aspect language logical language present tense operator pres representation sentence fiona pres fiona student pres student sing use present tense truth falsity formula respect primary reference time time utterance interpretation proposition sentence fiona true someone fiona singing time sentence word present tense locates time event situation sentence time utterance interpretation representation offiona identical sing fiona time utterance interpretation formula present tense operator time interpretation formula operator interval time formula reference time time line time formula principal reference time present tense pres pres present tense formula particular time untensed formula time many logician omit present tense operator many language present tense many distinguish untensed sentence linguistic evidence point present tense operator past future tense one unnecessary interpretation discourse possible tense introduces particular reference time pronominal expression time untensed sentence hand property sophisticated theory considers sentence use present tense marker present tense operator fact capture force tense operator rise formula represent formula english sentence
242,"Tense
(18) a.
b.
c.

Past (sing'(fiona')).
Past (3x [student'(x) & (like'(jo'))(x)]).
Vx [adult' (x) -> Past (child'(x))].

(19) a.
b.
c.

Fiona sang.
A student liked Fiona.
Everyone who is an adult was a child.
(Every adult was a child.)

The interpretation of past tense formulae locates the time of the event described by the predicate at a time prior to the principal reference time, so that the truth or falsity of a formula like Past (sing '(fiona')) is determined by whether there is some interval of time before the moment of utterance at which the formula sing'(fiona') is true.
If there is, then Past (sing'(fiona')) is true, if not, then it is false.
(20) gives the formal definition of the interpretation of formulae in the scope of the past tense operator while (21) represents this diagrammatically and shows clearly the 'pastness' of the situation with respect to the principal reference time.
Past tense: [Past (ft)]*** is 1 iff there is a time j such that j < i and [c()]M*) isl.

(20)
(21)

Past(<())

In order to see how past tense formulae are interpreted with respect to a particular model, let us adopt the simple model, M8, presented in the last section augmented with the denotations of sing'y student' and happy' in (22).
(22) a.
b.
c.

F8(sing') = {<Hl9U\9{WOMAN2}>,
<[t3,t8],{MAN1,WOMAN1,WOMAN2}>,
<[Ul {MAN2,MAN! ,WOMAN2, WOMAN! }>}.
F8(student') =
F 8 (happy') = {<[t,,t2],{MAN1, WOMAN, }>,
<[t3,t6],{MAN1}>,
<[t 8 ,tj, {MAN2,WOMAN2, WOMAN2} >}.

If the sentence Fiona sang was uttered at the moment [t8], the formula that represents it, i.e. Past (sing'(fiona')), is true only if there is an interval of time i prior to [t«] in which sing'(fiona') is true, i.e. if WOMAN2 (the entity denoted by fiona') is in
[sing ']M**\ Clearly, there are a number of intervals at which this is so according to F8,
[tjjtg] being one of these (cf. (22.a)).
Hence, Past (sing'(fiona')) is true with respect to M« and time [ t j .
On the other hand, the formula is not true at the interval [tj, since
243",261,243,"8 Time, Tense and Aspect",No info,No info,tense past sing fiona student adult child fiona student fiona everyone adult child adult child interpretation tense formula locates time event predicate time prior principal reference time truth falsity formula past sing fiona interval time moment utterance formula sing fiona true past fiona true false formal interpretation formula scope tense operator situation respect principal reference time tense past time order tense formula respect particular model simple model denotation sing student happy sing man woman student happy woman sentence fiona uttered moment formula past sing fiona true interval time sing fiona true entity fiona number interval tjjtg past fiona true respect time hand formula true interval
243,"Time, tense and aspect there is no prior interval in which Fiona sings.
(23) presents the formal procedure for verifying the more complex formula Past
(VJC [student'(x) -> sing'(x)]) (the translation of the sentence Every student sang) with respect to M 8 and time of utterance [ t j .
The complexity of this example is due entirely to its rigour and nothing is introduced that was not in the discussion of the past given above.
In (23) and the exercise that follows, it is assumed that the properties of singing, being a student, being a lecturer or being happy are all stative so that if someone has one of these properties at some interval of time, then they have it for all subintervals of that time.
(23) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.
k.

[Past (Vx [student'(x) -^ sing'(x)])]M8'8.r*] is 1 iff there is an interval of time j such that j < [t6] and [Vx [student* (x) —»sing'(x)]]M8«8o is 1.
Let j be [ M J , then [Vx [student* (x) -» sing'(x)]]M8'8«3.<4] i s 1, iff for every value assignment g' like g but for the value of x, [student'(x) —> sing'(x)]M8'8'<tt3-t4J is 1.
Let g' = gMANi/x? t n en [student'(x) -> sing'(x)]M8'8MAN1/xft3t4] is 1 iff
[student']M8'«MAN1/Xtt3t4i is 0 or [sing']M88MAN1/xft3^ is 1.
[student'(x)]M8-8MAN1/xtt3t4i i s 1 since MAN! e F8(student')([t2,t9]), student' is stative and [t3,t4] £ [t 2 ,tj.
[sing'(x)]M8'8MAN1/x[t3t4iis 1 since M A ^ € F8(sing')([t3,t8]), sing' is stative and
[t3,t4] C [ta,t8].
Hence, [student'(x) -> sing'(x)]M8-8MAN1/xft3t4] is 1.
Let g' = gMAN2/x> t hen [student'(x) -> sing'(x)]M8-8MAN2/x<[t3>t4] is 1 because
[student'(x)]M8-8MAN2/xit3t4i i s 0 (as MAN2 g F8(student')([t3,t4])).
Let g' = gwoMANi/x^ [student'(x) -> sing'(x)]M88WOMAN1/x'[t3t4i is 1 because
[student'(x)]M8-«WOMAN1/x'ft3t4] is 0 (as WOMAN, £ F8(student')([t3,t4])).
Let g' = gwoMAN2/X) [student'(x) -> sing'(x)]M8'8woMAN2/x,[t3,t4] i s i , because
[student'(x)]M8-8woMAN2/x,[t3,t4] i s i ( W O M A N 2 G F 8 (student')([t3,t 4 ]) and
[sing'(x)]M88woMAN2/x,[t3.t4] IS \ ( W O M A N 2 G F 8 (sing')([t 3 ,t 4 ])).

Hence, since there are no other g', [Vx [student'(x) —> sing'(x)]]M8'8it3t4i is
1.
Hence, since [t3,t4] < [t 6 ], [Past (Vx [student'(x) -> sing'(x)]]M8-8ft6] i s l.

Exercise 8.2:
For each of the following formulae, give an English sentence which could express it and interpret it formally (as in (23)) with respect to the model M8 and the time of utterance shown.
i.
Past (~(3x [student'(x) & happy'(x)])) at [t 5 ].
ii.
Pres (Vx [student'(x) & Past (happy'(x))]) at [ t j .
iii.
Past (sing'(jo') & (like'(jo'))(fiona')) at [t 7 ].

Very few languages have a morphological future tense and the interpretation of sentences that refer to future time is not straightforward because modality is usually involved.
However, to represent simple future reference in LT, there is another operator, Fut, which gives rise to formulae such as Fut (sing '(fiona')) which can be
244",262,244,"8 Time, Tense and Aspect",No info,No info,time tense aspect prior interval fiona sings formal procedure verifying complex formula vjc student sing translation sentence student respect time utterance complexity due rigour nothing discussion exercise assumed property singing student lecturer happy stative someone property interval time subintervals time past student sing interval time student sing student sing value assignment value student sing student sing student sing student man student student stative sing sing sing stative student sing hen student sing student student student student woman student student sing student student sing sing student sing past student sing exercise formula english sentence interpret model time utterance past student happy pres student happy iii past sing fiona language morphological future tense interpretation sentence future time straightforward modality simple future reference operator fut rise formula fut sing fiona
244,"Tense used to translate English sentences with the auxiliary will as in Fiona will sing.
The interpretation of future tensed formulae proceeds in the same way as for past tense ones, except that we look for a time following the time of utterance at which the simple untensed formula is true.
This gives the truth-conditions in (24) which again can be diagrammatically represented by the time line in (25).
Future tense: [Fut (<t>)]Mgi is 1 iff there is a time j such that i < j and [<t>]M*>J isl.

(24)
(25)

T

As an example, consider the interpretation of Fut (sing '(fwna')) with respect to
Mg and the time of utterance [t 3 ].
This is true if, and only if, there is an interval of time following [t3] where Fiona actually sings.
Since [sing ']M8,g.[t5,t7] contains WOMAN 2 , the entity denoted by fwna', and the time of utterance, [t 3 ], precedes the interval [t s ,t 7 ], the formula is true.
(26) gives a further illustration of the semantics of Fut, and shows the formal interpretation of the formula Fut (3x [student'(x) & happy'(x)]), one of the translations of A student will be happy, with respect to M 8 and the time of utterance
(26) a.
b.
c.
d.
e.
f.
g.
h.

[Fut (3x [student' (x) & happyXx)])]M8-«^ is 1 iff there is atime j , where [t6]
< j , such that [3x [student'(x) & happy'(X)]] M8 «J is 1.
Let j = [U,Ul Then 0 x [student'(x) & h a p p y ' ( x ) ] ] "" 8 * ^ is 1 iff there is a value assignment g' exactly like g except for the value assigned to x such that [student'(x) & happy'(x)]**8*'*8-®] is 1.
Let g' = gwoMAN2/x T n e n [student'(x) & happy'(x)]M8-8WOMAN2/x-£t8t9i is 1 iff
[student'(x)]M8-8WOMAN2/xit8t9] is 1 and [happy'(x)]M8-8WOMAN2/*[t8t9J is 1.
Since WOMAN 2 e [student']M8-8WOMAN2/Xft8t9\ [student'(x)] m ^ O M ™ww [s
1.
Since WOMAN 2 e [happy']M8-8WOMAN2/x-tt8t9J, [student'(x)]M8-8WOMAN2/xit8t9]is 1.
Hence, [student'(x) & happy'(x)]M88'[t8t9i is 1.
Hence, [3x [student'(x) & happy'(x)]] M8 ^ t8t9 i is 1.
Hence, since [U] < [t8,t9], [Fut (3x [student'(x) & happy'(x)])]** 8 *^ is 1.

245",263,245,"8 Time, Tense and Aspect",No info,No info,tense translate english sentence auxiliary fiona interpretation future formula proceeds tense one time time utterance simple untensed formula true time line future tense fut mgi time interpretation fut sing fwna time utterance true interval time fiona sings sing woman entity fwna time utterance precedes formula true illustration semantics fut show formal interpretation formula fut student happy translation student happy respect time utterance fut student happyxx atime student happy student value assignment value student happy student happy student happy woman student student woman happy student student happy student happy fut student happy
245,"Time, tense and aspect
Exercise 8.3:
What are the truth-conditions of the following future formulae?
What English sentences might these translate and what do they reveal about the interaction of the operators Fut, ~ and 3?
i.
~(Fut (3x [student'(x) & happy'(x)])).
ii. ~(Fut (3x [student'(x) & happy'(x)])).
iii.
Bx [Fut (-(student'(x) & happy'(x)))].
iv.
3x [~(Fut (student'(x) & happy'(x)))].

8.3.2

Complex tenses

Because tenses are represented as operators over formulae in LT, it is possible to iterate them, just as it is possible to have more than one quantifier in front of an open formula.
Thus, according to the syntax of Lr all of the formulae in (27) are well-formed.
(27) a.
b.
c.
d.
e.

Fut (Fut (sing'(fiona'))).
Past (Past (sing'(fiona'))).
Fut (Past (sing' (fiona'))).
Past (Fut (sing'(fiona'))).
Past (Fut (Past (Past (Fut (Fut (sing'(fiona'))))))).

The iteration of tenses in this way is a mixed blessing.
Expressions like (27 .e) are likely to translate no natural sentence in any human language, although they can be imitated using very formal language.
For example, the expression in (27.e) can be represented in formal English by repeating the phrases it was the case that and it will be the case that, i.e. by the sentence // was the case that it will be the case that it was the case that it was the case that it will be the case that Fiona will sing.
However, such expressions are unlikely ever to be uttered in any actual situation and, more importantly, finding a language that has a single tense in its inventory that would reflect this temporal contour is highly improbable.
However, the fact that there is a sentence of English that can be translated into the formula in (27.e), no matter in how stilted a fashion, indicates that the explanation for its unnaturalness in terms of human language lies elsewhere than in semantics.
We will not attempt to provide a pragmatic account of the improbability of a sentence expressing the formula in (27.e), but will assume that one can be constructed using Grice's maxims and so accept that tenses can be iterated.
Double combinations of tenses are, however, needed to provide an account of part of the tense/aspect systems of a number of languages, including English.
The double past tense formula in (27.b), for example, reflects the temporal information contained in the English pluperfect.
Consider the sentence in (28) which expresses a true formula if, on the day before the time of utterance, there is a time before that at which Fiona indeed sang the song.
(28)
246

By yesterday, Fiona had sung the song.",264,246,"8 Time, Tense and Aspect",No info,No info,time tense aspect exercise future formula english sentence interaction operator fut fut student happy fut student happy iii fut student happy fut student happy complex tense tense operator formula possible possible quantifier open formula syntax formula fut fut sing fiona past past sing fiona fut past sing fiona fut sing fiona fut past fut fut sing fiona iteration tense way mixed blessing expression likely translate natural sentence human language formal language expression formal english phrase sentence fiona expression unlikely actual situation language single tense inventory temporal contour improbable fact sentence english formula matter stilted fashion explanation unnaturalness term human language semantics pragmatic account improbability sentence formula assume grice maxim tense double combination tense account part system number language english double past tense formula temporal information english pluperfect sentence true formula day time utterance time fiona sang song yesterday fiona sung song
246,"Tense
Thus, two reference times, other than the time of utterance, are required to interpret such a sentence: yesterday, on which the formula Past (sing '(fiona')) is true, and some time before it when sing'(fwna') is true.
These are the truth-conditions of the double past tense in (27.b), so that the pluperfect tense can be represented by the diagram in
(29) where, as before, i is the time of utterance and j and k are two temporal intervals standing for the referent of yesterday and the time at which Fiona did the singing, respectively.
(29)

Pluperfect:

Past(<(>)

Past(Past((|>))

Double futures also underlie the temporal interpretation of certain constructions in human languages.
Although English has no proper double future tense, the sense can be captured by using the construction will be going to as in (30).
(30)

Fiona will be going to sing my favourite song (when she has learnt it).

Although the main clause of this sentence also conveys the intention of the entity denoted by the subject, the temporal information it conveys is that expressed by the formula in (27.a).
Again there are two reference points in addition to the time of utterance: the time when she has learnt the song and the time after this when she actually sings it.
Hence, the situation can be represented by the diagram in (31) where j represents the time Fiona learns the song and k when she sings it.
The diagram of the truth-conditions associated with the formula in (27.a) shows only the temporal relation between the events described by the sentence in (30).
It gives no indication of the modality or the aspect of the English sentence and thus does not provide a complete explication of the meaning of that sentence.
(31)

Fut(Fut(<))))

Fut(<|))

247",265,247,"8 Time, Tense and Aspect",No info,No info,tense reference time time utterance interpret sentence yesterday formula sing fiona true time sing fwna true double past tense pluperfect tense diagram time utterance temporal interval referent yesterday time fiona singing past double future temporal interpretation certain construction human language english proper double future tense sense construction fiona sing favourite song main clause sentence intention entity subject temporal information conveys formula reference point addition time utterance time learnt song time sings situation diagram time fiona song sings diagram associated formula temporal relation event sentence indication modality english sentence complete explication meaning sentence fut fut fut
247,"Time, tense and aspect

Exercise 8.4:
Show that the diagrams in (29) and (31) represent the truth-conditions for the pluperfect and the be going to construction in English, by working out formally the truth or falsity of the formulae in (27.a) and (27.b), with respect to M8 and the moments of time [t3] and [ t j , respectively.

The two diagrams in (29) and (31) reveal an entailment that each of the formulae in (27.a) and (27.b) have.
That is, if the proposition expressed by Fiona had sung the song is true at the time of utterance then so is that expressed by Fiona sang the song
(32.b).
Similarly if Fiona will be going to sing the song expresses a true proposition at a particular time, then so does Fiona will sing the song (32.a).
(32) a.
b.

Fut (Fut (((>)) -> Fut (<)>).
Past (Past (<|>)) -> Past ($).

The mixed combinations of tenses in (27 .c) and (27.d) also figure in English.
The formula in (27.c) is expressed by the sentence in the future perfect given in (33)
(ignoring the adverbial by midnight and the direct object for simplicity).
(33)

Fiona will have sung my favourite song by midnight.

This expresses a true proposition only if there is a future time (before midnight) in which the proposition expressed by the sentence Fiona sang myfavourite songis true.
This situation can be shown schematically by the diagram in (34), which, as before, utilises three reference times including the time of utterance.
(34)

Future perfect:

Fut(Past(0))

Past((|>)

The semantics of the operators Past and Fut do not require the reference point k in
(34) to be in the future with respect to i.
The interval j must be in the future with respect to i, but the formula Past (§) is true with respect to j if (and only if) k is before j , i being irrelevant to its interpretation.
Hence, $ could be true in the future, past or present with respect to i.
The implication in (35) is thus a tautology on this analysis.

248",266,248,"8 Time, Tense and Aspect",No info,No info,time tense aspect exercise show diagram represent pluperfect construction english truth falsity formula respect moment time diagram reveal entailment formula proposition fiona sung song true time utterance fiona sang song fiona sing song true proposition particular time fiona sing song fut fut fut past past mixed combination tense english formula sentence future perfect adverbial midnight direct object simplicity fiona sung favourite song midnight express true proposition future time midnight proposition sentence fiona sang myfavourite songis true situation diagram reference time time utterance future perfect fut past past semantics operator fut require reference point future respect interval respect formula true respect irrelevant interpretation true future present respect implication tautology analysis
248,"Tense
(35)

Fut (Past (<|>)) -> (Past ((|)) v Pres (<|>) v Fut (()>)).

This interpretation of the future perfect is, therefore, rather weak because it does not determine when the event in question is likely to happen with respect to the time of utterance.
On the other hand, the use of this tense apparently conveys the information that the simple formula, <>
| , is true with respect to i, so that one might want to extend the theory to make the time of utterance continue to be relevant at all subsequent evaluations of the truth of the embedded formulae at particular times.
For example, one might evaluate Fut (Past (§)) as being true at i only if Past (§) is true at an interval j following i and(|) is true at an interval k also following i (and, of course, preceding j).
This would make any future perfect formula true only in the situation diagrammed in (34).
However, this seems an unnecessary move.
In the first place, we can appeal to the Maxim of Quantity to account for the non-use of the future perfect where it is known whether Past (§) or Pres (§) is true.
This is because in normal conversation we state what we believe to be true and no more or less.
If we know that something has happened or is happening, then that is what we should say, by using the past or present.
If we know that something has not happened in the past or is not happening in the present, then we must use a disjunction like Fiona is singing the song now or will sing it soon or Fiona has already sung the song or will sing it soon.
Only if we know that something did not happen in the past and is not happening now, and that this something is to happen by a certain time, would we use the future perfect.
Hence, we can account for the implicature of the futurity of <|) in Fut (Past (§)), using pragmatic principles.
Furthermore, it seems that the apparent futurity of k in (34) with respect to i is not contradicted by situations in which k is equal or prior to i.
For example, (36) gives four possible responses to the sentence in (33).
Only the response in (36.d) seems to deny the truth of (33), while the others merely specify the time at which Fiona sings the song.
Hence, the apparent weakness of the future perfect on this interpretation appears to be borne out.
(36) a.
b.
c.
d.

She did, two hours ago!
You must have missed it.
You'd better be quick; she's singing it now.
She's going to sing it in a quarter of an hour.
No, she won't.
She's never sung that song and never will.
She hates it!

Similar considerations apply as well to formulae with the structure in (27.d), where future formulae are evaluated in the past as shown in the diagram in (39).
Again k may be before, after or identical to i, the implication in (37) again turning out to be a tautology.
There is no recognised 'tense' in English that captures this temporal relationship, but the past tense of be going to as in (38) seems to come closest to it.
(37)

Past (Fut (()))) -> (Past (<|>) v ty v Fut (<())).

(38)

Fiona was going to sing my favourite song by midnight.

This sentence can be used to imply that the speaker believes that Fiona has not sung, is not singing and will not sing my favourite song.
However, such an assumption is cancellable as is shown by the fact that the replies in (36.a) to (36.c) contradict the assumption, while not contradicting what is said by the sentence in (38).
Hence, we
249",267,249,"8 Time, Tense and Aspect",No info,No info,tense fut past past pres fut interpretation future perfect weak determine event question respect time utterance hand use tense information simple formula true respect theory time utterance relevant subsequent evaluation truth formula particular time fut past true true interval true interval course future perfect formula true situation unnecessary move first place appeal maxim quantity account future past pres true normal conversation state true le past present know present disjunction fiona singing song sing fiona sung song sing past certain time future perfect account implicature futurity fut past pragmatic principle apparent futurity respect situation equal possible response sentence response deny truth others time fiona sings song apparent weakness future perfect interpretation hour quick singing sing quarter hour sung song similar consideration formula structure future formula past diagram identical implication tautology english capture temporal relationship tense going closest past fut past fut fiona sing favourite song midnight sentence imply speaker belief fiona sung singing sing favourite song assumption cancellable fact reply contradict assumption contradicting sentence
249,"Time, tense and aspect may take the speaker's belief as an implicature and not an entailment of the sentences and maintain the truth-conditional analysis captured in the (partial) translation in
(27.d).
(39)

Fut((J>)

Past(Fut(<!>))

*Exercise 8.5:
Discuss the truth-conditions and provide an appropriate logical translation of sentences containing the adverbs always and never like those in (a) to (d), below.
What problems arise with the interaction of the scope of the different operators in these translations?
i.
ii.
iii.
iv.

Jo was always a fool,
Jo will always be a fool,
Jo was never clever,
Jo will never be clever.

The theory of tense presented above is idealised with respect to actual linguistic data.
The specifics of grammatical tense in particular languages often have different interpretations from those presented in Section 8.2.1.
For example, in English, the grammatical tense that covers the present (the so-called present tense) also allows a future interpretation, although it does not allow a past tense reading (without pragmatic implicatures), as shown in (40).
(40) a.
b.
c.

Jo goes home today.
Jo goes home tomorrow.
?Jo goes home yesterday.

Furthermore, the semantic future tense is encoded using a periphrastic construction involving the auxiliary verb will/shall in English which emphasises the apparent modality of this tense.
Thus, English may be said to distinguish semantic past and non-past and to lack a true future tense.
The theory presented above, however, is not intended as a complete theory of the tense system of English (or any other language), but as the basis of such a theory.
Clearly, in analysing the tense system of any
250",268,250,"8 Time, Tense and Aspect",No info,No info,time tense aspect speaker belief implicature entailment sentence analysis partial translation fut past fut exercise discus appropriate logical translation sentence adverb interaction scope different operator translation iii fool clever clever theory tense idealised respect actual linguistic data specific grammatical tense particular language different interpretation english grammatical tense cover present present tense future interpretation past tense reading pragmatic implicatures tomorrow yesterday semantic future tense periphrastic construction auxiliary verb english emphasis apparent modality tense english distinguish semantic past lack true future tense theory complete theory tense system english language basis theory tense system
250,"Simple aspect human language, one needs a theory of time and some way of expressing past, present and future relative to some point of reference.
This has been done and been shown to have certain interesting properties that hold, or appear to hold, of English.
The theory provides a reasonable base for an analysis of the specifics of a particular system of tense.
8.4

Simple aspect

The previous section deals with the deictic category of tense, which locates an event in time with respect to other times, in particular the time of utterance.
Temporal relations may, however, also be presented according to the perceived internal properties of the event or situation being described.
For example, an activity can be presented as continuing at some interval of time without indicating how long the activity has lasted or will last in relation to that time, as illustrated by the sentences in (41).
On the other hand, an event may be presented as complete or undifferentiated, as illustrated in (42).
(41) a.
b.
c.

Fiona is singing the song.
Fiona was singing the song.
Fiona will be singing the song.

(42) a.
b.
c.

Fiona sings the song.
Fiona sang the song.
Fiona will sing the song.

The examples in (41) are said to be in the imperfective aspect whilst those in (42) are in the perfective aspect.
Other verbal aspects may be defined as subtypes of this basic distinction.
For example, one can further subdivide the imperfective into habitual
(43.a) and continuous (43.b).
(43) a.
b.

Jo used to kick the cat.
Jo was kicking the cat.

Finer grained distinctions may be made by dividing the continuous aspect into progressive and non-progressive types or recognising punctual versus durative events or a difference between events that involve the bringing into existence of some entity (e.g. paint a picture) and those that just involve an activity of some sort (e.g.
walk), and so on.
It is not the intention of this section, however, to discuss the category of aspect in all its manifestations (this would require a whole volume to itself).
Instead, a basic definition of the perfective/imperfective distinction and some characterisation of some of the different types of event denoted by different verbs is given in terms of temporal intervals.
8.4.1

Perfective and imperfective

Despite the controversy that surrounds almost any formal definition of the semantics of the different aspects, the use of temporal intervals allows us to give at least a rudimentary definition of the semantics of the basic perfective/imperfective distinction.
In this section, I present definitions of these that follow Bennett and Partee
251",269,251,"8 Time, Tense and Aspect",No info,No info,simple human language theory time way present future relative point reference certain interesting property hold english theory reasonable base analysis specific particular system tense simple aspect previous deal deictic category tense locates time respect time particular time utterance temporal relation internal property event situation activity interval time long activity last relation time sentence hand event complete undifferentiated illustrated fiona singing song fiona singing song fiona singing song fiona sings song fiona song fiona sing song example imperfective aspect perfective aspect verbal aspect subtypes basic distinction imperfective habitual continuous kick cat cat finer distinction continuous aspect progressive type punctual durative event difference event existence entity paint picture activity sort intention category aspect manifestation whole volume basic distinction characterisation different type event different verb term temporal interval perfective imperfective controversy formal semantics different aspect temporal interval allows least rudimentary semantics basic distinction present definition bennett partee
251,"Time, tense and aspect
(1978) and Dowty (1979).
The analysis presented here is, however, far from complete and, for fuller treatments, the works cited at the end of this chapter should be consulted.
The perfective aspect, as mentioned above, presents a situation as temporally undifferentiated, but complete, and ignores any internal structure it may have.
For example, the sentence Jo kicked Chester presents the event of Jo kicking Chester as a complete unit without indicating how long or how often it occurred.
Hence, to know the truth value of the formula that translates this sentence, all we need to know is whether the event occurred or not (at some time in the past).
Truth-conditionally, therefore, the perfective can be interpreted in the same way as we have been interpreting all formulae in this chapter, i.e. directly with respect to a model, a variable assignment and a time, the latter being the time of the event.
The perfective, then, may be (and often is) treated as the semantically neutral aspect, without any need for an operator (like the tense operators, Pres, Past and Fut).
Any sentence in the perfective aspect, therefore, translates directly into L T and is interpreted using rules already given.
Thus, the sentence Jo kicked Chester translates (after lambda conversion) into
Past ((kick'(chester''))(jo')), a formula that is true if, and only if, Jo actually kicks
Chester at some time prior to the time of utterance.
It is possible, however, that, like the present tense, the perfective should also be signified by the use of an operator, particularly as there are languages that have morphosyntactically marked perfective aspects and others may combine perfective and imperfective aspects.
Furthermore, it could be argued that the completeness property of the perfective should be represented in its semantics.
This may be done by requiring the temporal interval at which the truth of a perfective formula is assessed to contain both initial and final moments of the event being described by the sentence.
This would mean that the proposition expressed by a sentence like Jo kicks Chester would be true only if the event of Jo's kicking Chester is begun and finished at the time of utterance.
Furthermore, by the semantics of the past tense given above, a sentence like Ethel played a game of golf would express a true proposition only if
Ethel actually completed the game of golf at some point before the time of utterance.
It would not be true, however, if, for example, she was still playing the last hole when the sentence was uttered.
In the future tense, such an analysis would entail that the initial moment of the event being described must follow the time of utterance.
So, for example, the sentence Fiona will sing my favourite song would express a true proposition only if Fiona had not already begun singing my favourite song at the time of utterance.
Given these informal descriptions of the truth-conditions of past, present and future perfective sentences, we may introduce a perfective aspect operator, Perf, whose formal interpretation is given in (44).
(44)

The perfective: [Perf (<J>)]M-8J is 1 iff [c()]M•»•* is 1 and i contains initial and final points if $ inherently contains these.

Initial and final points are taken to be initial and final subintervals (as defined in (45)) which are no more than a moment (i.e. intervals consisting only of a single point in time).
The requirement for initial and final points applies only to predicates that inherently contain them.
This is to accommodate stative predicates like be good or like which do not necessarily have beginning or end points.
For example, the sentence
252",270,252,"8 Time, Tense and Aspect",No info,No info,time tense aspect dowty analysis complete fuller treatment work end perfective aspect present situation undifferentiated complete ignores internal structure sentence chester present event chester complete unit truth value formula translates sentence event time perfective interpreted way formula model variable assignment time latter time event perfective neutral aspect need operator tense operator pres fut sentence perfective aspect translates rule sentence chester translates lambda conversion kick chester formula true kick chester time prior time utterance possible present tense perfective use operator language perfective aspect others perfective imperfective aspect completeness property perfective semantics temporal interval truth perfective formula initial final moment event sentence proposition sentence kick chester true event chester finished time utterance semantics tense sentence ethel game golf true proposition ethel game golf point time utterance true last hole sentence future tense analysis initial moment event time utterance sentence fiona favourite song true proposition fiona favourite song time utterance informal description present future perfective sentence perfective aspect operator formal interpretation perfective perf initial final point initial final point initial final subintervals moment interval single point time requirement initial final point stative predicate good end point sentence
252,"Simple aspect
Bertie is good expresses a true proposition, if Bertie is actually good at the moment of utterance.
Its truth does not, however, depend on Bertie* s ceasing to be good at this point.
The proposition is true, even if Bertie continues to be good until the end of his life.
Consequently, bounding points are only taken into account in situations (like playing a game of golf or singing a song) where these are inherently required by the meaning of the predicate.
For those events, like being good, which do not necessarily have beginning or end points, the perfective reduces to the simple assessment of the truth of the formula at an interval.
We will return to the inherent aspectual properties of predicates in the next section.
(45) a.
b.

Initial subinterval: i is a initial subinterval of j , iff i is a subinterval of j and there is no t € j - i and t' e i such that t < t \
Final subinterval: i is a final subinterval of j iff i is a subinterval of j and there is no t e j - i and t' e i such that t' < t.

The definition of the perfective in (44) gives rise to the truth-conditional interpretation in (46) of the formula Past (Perf(3x [book '(x) & write '(x)(jo')])) which translates the sentence Jo wrote a book.
This formal description of the truthconditions of the formula translating this sentence, given in (46), guarantees that it is true only in circumstances in which Jo completed a book some time prior to the time of utterance.
It would not, however, be true if, for example, Jo had begun a book, but not actually finished it, i.e. if the end point of the action is not before the time of utterance.
(46) a.
b.
c.

[Past (Perf (3x [3x [book'(x) & (write\x))(jo')]]))] *«•** is 1, iff there is an interval j such that j < i and [Perf (3x [book'(x) & (write'(x))(jo')])]M8-8<J is
1.
[Perf (3x [book' (x)&( write' (x))(jo')])]M8-8J is l,iff j includes beginning and final points and [3x [book'(x) & (write'(x))(jo')]]M8«J is 1.
[3x [book'(x) & (write'(x))(jo')]]M8«J is 1 iff there is a value assignment g' exactly like g but perhaps for the value of x, such that [book'(x)]M8«'J is 1 and [(write'(x))(jo')]M8-8'Jis 1.

While the perfective describes an event as complete, the imperfective aspect describes it as on-going or incomplete.
To represent this aspect, we introduce the semantic operator, Impf, which is interpreted as requiring the event being described by the formula in its scope to be true of an interval of time properly containing the time at which the imperfective formula is being assessed.
So, for example, the sentence Jo is kicking Chester is translated into the formula Pres (Impf
((kick''(chester '))(jo'))) which is true with respect to an interval i, only if there is a larger interval, j , containing i, such that (kick'(chesterf))(jo') is true at j .
In plainer
English, this means that the event described by an imperfective formula must go on around the time with respect to which it is to be interpreted.
The formal definition of this appears in (47).
(47)

The Imperfective: [Impf (<|>)]M.8J is 1 iff there is an interval j such that i is a proper subinterval of j and [§]M&i is 1.

253",271,253,"8 Time, Tense and Aspect",No info,No info,simple aspect bertie good true proposition good moment utterance truth bertie good point proposition true bertie good end life point account situation game golf singing song predicate event good end point perfective simple assessment truth formula interval inherent aspectual property predicate next initial subinterval initial subinterval subinterval final subinterval final subinterval subinterval perfective rise interpretation formula book translates sentence book formal description truthconditions formula translating sentence true circumstance book time prior time utterance true book end point action time utterance book interval book perf book final point book write book value value book perfective describes event complete imperfective aspect incomplete represent aspect semantic operator event formula scope true interval time time imperfective formula sentence chester formula pres impf kick chester true respect interval larger interval kick chesterf true plainer english mean event imperfective formula time respect formal imperfective impf interval proper subinterval
253,"Time, tense and aspect

To see the effects of this definition, consider the interpretation of the more complex sentence in (48).
This expresses a true proposition if there is some time prior to the time of utterance at which someone called Jo enters and this event occurs in an interval, longer than that in which Jo enters, when someone called Fiona sings.
(48)

Jo entered, while Fiona was singing.

If the model M8 is extended to include denotations for the verb enter as in (49) and while is translated simply as a form of conjunction, then the truth of the formula translating (48) uttered at interval [t5] with respect to M8 is determined as in (50).
(49) a.
b.

F8(enter')([t2,t3]) = {MAN1?
WOMAN,}.
F8(enter')([t1]) = F8(enter')([t3,t9]) = 0 .

(50) a.

[Past (Perf (enter'(jo')) & Impf (sing'(fiona')))]M8-8<t5J is 1 iff there is an interval, j , such that j < [t5] and [Perf (enter'(jo')) & Impf
(sing'(fiona'))]M8-8Jis 1.
Let j = [t2,t3], then [Perf (enter'(jo')) & Impf (sing'(fiona'))] MS^CO] [S I iff
[Perf (enter*(jo'))]M8'gtt2t3J is 1 and [Impf (sing'(fiona'))]M8*112-01 is 1.
[Perf (enter'(jo'))]^-*^'13! is 1 iff [t2,t3] contains initial and final points for
[enter'(jo')]M88it2t3i and [enter*(jo*)]M8*[tW3i is 1.
Since [t2,t3] does contain beginning and end points for [enter'(jo')]M8stt2t3i and [enter' CJo*)]M8*#It2*t311S
1 (both from F8(enter')([t2,t3]) in (49.a)), [Perf (enter'Go'))] ******* is 1.
[Impf (sing' (fiona'))] M8<g ft2«] is 1 iff there is an interval of time, k, such that
[t2,t3] is a proper subinterval of k and [sing'(fiona')]m** is 1.
Let k = [ti,tj.
F8(sing')([t!,t2]) and F8(sing')([t3,t8]) both contain WOMAN2, the value of
[fiona' ]M8,g.[ti,t9] ^ d [sing']M88ttlt8J also contains WOMAN2, since the interval
[ti,t8] overlaps with both of these intervals.
Because sing is an activity verb we can infer that [sing'(fiona')]1*8*1 is the same for all subintervals 1 of [t^tg]
(see next section).
Hence, [sing'(fiona')]M8«ftlt5i is 1.
Since [t2,t3] is a proper subinterval of [UM and [sing'(fiona')]M8«[tlt5i is 1,
[Impf (sing'(fiona'))]™*<w is 1.
Since [Perf (enter'(jo'))]MS*^]is 1 and [Impf (sing'(fiona'))]M8*it2t3i is 1 and
[t2,t3] < [tj], [Past (Perf (enter'(jo')) & Impf (sing'(fiona')))] m *w is 1.
b.
c.
d.
e.
f.
g.
h.

We can represent this situation more succinctly using a timeline.
The diagram in (51) shows the time of utterance, [ts], as i, the time of Jo's entry, [ t ^ ] as j and the period of Fiona's singing, [ti,tj, as k.
It is not necessary that k, the period of Fiona's singing, be prior to the time of utterance, merely that j should be.
This is generally true of all imperfective formulae: the tense requirements need only be met by the proper subinterval at which the truth of the formula is assessed, not by the wider interval at which the base formula is true.
Intuitively this is the correct result, as we do not want to say that the proposition expressed by (48) is false if Fiona is still actually singing at the time of utterance.

254",272,254,"8 Time, Tense and Aspect",No info,No info,time tense aspect effect interpretation complex sentence true proposition time prior time utterance someone event interval someone fiona sings fiona singing model denotation verb conjunction truth formula translating interval respect woman past perf impf sing fiona interval perf impf sing fiona impf sing fiona perf impf sing fiona perf initial final point contain end point cjo impf sing fiona interval time proper subinterval sing fiona sing sing contain value fiona sing interval overlap interval sing activity verb infer sing fiona subintervals sing fiona proper subinterval sing fiona sing fiona perf impf sing fiona perf impf sing fiona represent situation timeline diagram show time utterance time entry period fiona necessary period fiona prior time utterance true imperfective formula tense requirement need proper subinterval truth formula wider interval base formula true correct result want proposition false fiona time utterance
254,"Simple aspect
(51)

Although the truth-conditions given to the imperfective in (47) properly locate the principal reference time inside the time over which some event is occurring, it suffers from a serious deficiency.
The problem is that if an imperfective sentence like
Fiona was singing my favourite song expresses a true proposition, according to (47), then there must be some interval of time at which the perfective aspect of the sentence
Fiona sang my favourite song is also true with respect to some reference time.
The entailment relation in (52) is valid with respect to the model theory containing (47), as can be checked by showing that no situation can be constructed in which, for example, Impf (Past (singf(fwnaf))) is true at some time i, but there is no other interval j in the model at which Perf (Past (singy(fiona'))) is true.
If [Impf (c|))]M** is 1, then [Perf (<fr)]M*i is 1 for some interval j .

(52)

However, although it may well be the case that the conditional in (52) holds for many situations, it does not always do so, as can be seen by considering the sentences in
(53), where the truth of (53.b) does not necessarily follow from that of (53.a).
It is possible, for example, that Fiona has never sung my favourite song before, but was singing it when she was electrocuted and thus never actually completed it.
In such a situation, because Fiona did not complete the singing of the song, the formula Perf
((sing,'(a))(flona')) (where a stands for the translation of the song for convenience) is not true of any interval of time.
(53) a.
b.

Fiona was singing my favourite song, when she was electrocuted by a faulty microphone,
Fiona once sang my favourite song.

The reason (52) is valid in LT is because the imperfective is defined as occurring if (and only if) the primary reference time is a proper subinterval of an interval of time over which some event took place.
For lmpf(§) to be true at i, therefore, there must be an interval j properly containing i, at which <j) is true.
This problem is often referred to as the imperfective paradox and has led to a considerable debate about the proper meaning of the imperfective aspect and to suggestions for revising (47) to get around the problem.
Discussion of alternative suggestions is not possible here, but I have drawn the reader's attention to the problem to show that analyses that appear to account for some part of the meaning of some grammatical construction may have unforeseen consequences.
The advantage of formalisation is that such consequences can be made plain and steps taken to rectify the problem, while trying to maintain the original insight.
Without formalisation, it is possible for undesirable consequences to remain hidden and to lead to further problems elsewhere in the theory.
255",273,255,"8 Time, Tense and Aspect",No info,No info,simple aspect imperfective principal reference time time event serious deficiency problem imperfective sentence fiona favourite song true proposition interval time perfective aspect sentence fiona favourite song true respect reference time entailment relation valid respect model theory situation impf past singf fwnaf true time interval model singy fiona true impf interval conditional many situation sentence truth possible fiona favourite song singing situation fiona complete singing song formula perf sing flona stand translation song convenience true interval time fiona singing favourite song faulty microphone fiona favourite song reason valid imperfective primary reference time proper subinterval interval time event place lmpf true interval true problem imperfective paradox considerable debate proper meaning imperfective aspect suggestion problem discussion alternative suggestion possible reader attention problem analysis account part grammatical construction consequence advantage formalisation consequence plain step rectify problem original insight formalisation possible undesirable consequence hidden lead problem theory
255,"Time, tense and aspect

Exercise 8.6:
Let us add the following to the model M8, given above: a.
b.
two entities S O N d and SONG2 are added to A.
F is extended as follows:
F 8 (song') = {<[t 1 ,t 9 ],{SONG 1 ,SONG 2 }>},
F8(singt') = {<[t1,t2],{<WOMAN2,SONG1>}>,
<[t3,t5],{<MAN1,SONG1>, <WOMAN2,SONG1>, <WOMAN1,SONG1>}>,
<[Ws],{<MAN1,SONG2>, <WOMAN2,SONG2>, <WOMAN1,SONG1>}>,
<[t9],{<MAN1,SONG2>, <WOMAN 2 3ONG 2 >, <WOMAN1,SONG1>,
<MAN2,SONG!>}>}

Assume that sing/ (indicating the transitive use of the verb sing) inherently contains initial and final points and that these are provided by the intervals specified by F 8 , but that sing' (indicating intransitive use) does not.
Work out the truth values of the following formulae with respect to this model and a moment of utterance [t 5 ].
i.
ii.
iii.
iv.
v.
vi.

8.4.2

Past (Perf (3x [(singt'(x))(jo')])).
Fut (Perf (3x [(singt'(x))(ethel')])).
Fut (Perf (3x [sing'(x)])).
Past (Perf (~(3x [sing'(x)]))).
Pres(Impf(sing'(jo'))).
Fut(Impf(3y [3x [

States and actions

One of the reasons why studies of aspect (both formal and informal) become so complex is that the semantics of individual words, or groups of words, within a sentence contributes almost as much to the aspectual interpretation of that sentence as any morphosyntactic marking of grammatical aspect.
We have already come across this in our discussion of the perfective, where the notion of beginning and end points was required to account for the completeness property for predicates that have inherent boundaries, like build a garage, etc. We have also seen that the extensions of stative predicates (like like, know, be good) at some interval i are constant at all subintervals of i.
The study of the different aspectual classes of predicates has a long history, going back at least to Aristotle in the fourth century BC.
Aristotle's original classification has been the source of revision and debate by philosophers ever since and now the subject has been taken up, with somewhat different emphasis, by linguists.
The literature on this complex topic is vast and we can do very little in this book but look briefly at one particular classification, that of Zeno Vendler, and some of the entailments associated with the classes he proposed.
These properties are not strictly logical in the sense that the semantic theory can derive them as theorems.
Rather they have to do with the lexical meanings of expressions and so must be stated separately from the model theory itself.
As we saw in Chapter 7, this may be done by the use of meaning postulates which specify the idiosyncratic semantic properties of predicates as part of the lexicon of some language.
256",274,256,"8 Time, Tense and Aspect",No info,No info,time tense aspect exercise model entity song song song singt woman song transitive use verb sing initial final point interval sing intransitive use work truth value formula respect model moment utterance past perf singt fut perf singt ethel fut perf sing past perf sing pres sing fut impf state action reason study aspect formal informal complex semantics individual word group word sentence much aspectual interpretation sentence morphosyntactic grammatical aspect discussion perfective notion end point account completeness property predicate inherent boundary build garage etc extension stative predicate good interval constant subintervals different aspectual class predicate long history least fourth century aristotle original classification source revision debate subject different emphasis linguist literature complex topic vast little book particular classification zeno vendler entailment associated class property logical sense semantic theory theorem lexical meaning expression model theory use meaning postulate idiosyncratic semantic property predicate part lexicon language
256,"Simple aspect
The basic distinction that can be made between predicates is that between states
(or stative predicates) and actions.
Syntactically these two classes can be distinguished (in English, at any rate; these syntactic properties do not necessarily carry over into other languages) by the facts that stative predicates do not easily go into the progressive (54.a) unlike actions (54.b); imperatives usually have an action reading, even where stative verbs are used (55); and the pseudo-cleft construction is more natural with action verbs than stative ones (56).
(54) a.
b.

?Ethel is knowing the answer,
Ethel is playing golf.

(55) a.
b.

?Know the answer!
Play golf!

(56) a.
b.

?What Ethel did was know the answer,
What Ethel did was play golf.

We have already seen the primary semantic property of statives: the extensions of such predicates at one interval remain the same for all subintervals, including moments.
We can capture this property by the meaning postulate in (57) which guarantees that sentences like that in (58) sound tautologous.
(57)

If f is a stative predicate, then if [f(a)]M*s is true, then so is [f(a)]M«J for all subintervals j of i.

(58)

If Jo was tall for his age between the ages of two and four years old, then
Jo was tall for his age at the age of three.

Actions are subdivided by Vendler into three categories: activities, accomplishments and achievements.
The first group includes predicates denoting general activities like running, walking, driving a car, singing, etc. These differ from achievements (e.g. recognise, find, lose, die, etc.) and accomplishments (e.g. sing a song, paint a picture, write a book, etc.) in having no inherent boundaries, i.e. no necessary initial and final points to the events they describe.
There is nothing inherent in the meaning of the word sing that requires the action to have a beginning and an end.
After all the sentence The gods are singing could express a proposition that is true at all times, past, present and future.
The main entailment of activity predicates involves a relation between their imperfective and perfective uses.
Thus, if the imperfective use of an activity predicate is true, then its perfective (in the same tense) is also true.
For example, if the dog was howling is true now, then the dog howled is also true.
This is captured by the meaning postulate in (59).
Because activities do not have inherent boundaries the perfective formula reduces truth-conditionally to the simple base formula, i.e.
[Perf (<|>)]M'84 =
[c|)]M,8,i for a n formulae, <|), containing activity predicates.
(59)

If f is an activity predicate, then if [Impf (f(a))]M<& is true, then so is [Perf
(f(a))]M*o

A further entailment involves the truth of formulae containing activity predicates at subintervals.
In general, it seems to be the case that if Jo walked for an hour then he walked for all periods in that hour, apart from individual moments of that hour
257",275,257,"8 Time, Tense and Aspect",No info,No info,simple aspect basic distinction predicate state stative predicate action class english rate syntactic property language fact stative predicate progressive action imperative action stative verb construction natural action verb ethel answer ethel golf answer play golf ethel know answer ethel play golf primary semantic property statives extension predicate interval subintervals moment capture property meaning postulate guarantee sentence tautologous stative predicate true subintervals tall age age year old tall age age action vendler category activity accomplishment achievement first group predicate general activity car differ achievement recognise lose die accomplishment sing song paint picture write book inherent boundary necessary initial final point event nothing inherent meaning word sing action end sentence god singing proposition true time present future main entailment activity predicate relation imperfective perfective imperfective use activity true perfective tense true dog true dog true meaning postulate activity inherent boundary perfective formula simple base formula perf formula activity predicate activity predicate impf true entailment truth formula activity predicate subintervals general hour period hour individual moment hour
257,"Time, tense and aspect
(walking seems to have to be defined over periods greater than a moment, since a snapshot of someone walking shows no movement by the walker).
We can symbolise the durational part of the activity asfor'(NPtemp) (a predicate modifier) where NPtemp stands for some temporal NP (which we may allow directly to denote intervals of time, although this poses certain problems).
Thus, we arrive at the meaning postulate in (60).
(60)

If f is an activity predicate, then if [for'(NPtemp)(f(a))]M-8i is 1 where
[NPtemp]^1 = j , then so is [f(a)]M<8\ for all subintervals k of j that are larger than a moment.

Finally, we must look at achievements and accomplishments.
In the first place, the meaning postulates in (59) and (60) do not hold of these.
One cannot infer from the truth of Fiona was singing my favourite song, that Fiona sang my favourite song is true: she may have been interrupted somehow and never finished the song.
Nor can one assume that if Bertie wrote a book for an hour then he wrote a book at any time in that hour.
Achievements differ from accomplishments in that they appear to be momentaneous events.
Hence, durational phrases sound peculiar, if not totally ungrammatical, as witness the achievement predicates in (61) versus the accomplishments in (62).
(61) a.
b.

?Jo recognised the dog for a few minutes,
?The dog died for a few hours.

(62) a.
b.

Jo sketched the dog for a few minutes,
The dog barked for a few hours.

Furthermore, accomplishments which are complete in a particular period enable us to infer that the imperfective form of the accomplishment is true for all subintervals of that period, excluding final subintervals.
Thus, if in'(NPlemp) is the logical representation of phrases such as in an hour, the meaning postulate in (63) guarantees the truth of (64) in all normal situations.
(63)

If f is an accomplishment predicate, then if [in'(NPtemp)(Perf (fla)))]***1 is true, where [NPtemp]1^1 = j , then [Impf (f(a))]M'*k is also true for all subintervals k of j excluding final subintervals.

(64)

If Jo painted a picture in an hour, then Jo was painting a picture during that hour.

There is a lot more that can be said on this subject and there are more subtle differences between the different classes of predicates that can be teased out, but this brief sketch should give some idea of the range of variation in entailments between them and how these may be captured formally in the semantic theory described in this book.

258",276,258,"8 Time, Tense and Aspect",No info,No info,time tense aspect walking period greater moment snapshot someone show movement walker symbolise durational part activity nptemp predicate modifier nptemp temporal interval time certain problem meaning postulate activity predicate nptemp nptemp subintervals larger moment achievement accomplishment first place meaning postulate infer truth fiona singing favourite song fiona favourite song true song assume bertie book hour book time hour achievement accomplishment momentaneous event durational phrase sound peculiar ungrammatical witness achievement predicate accomplishment dog minute dog hour dog minute dog barked hour furthermore accomplishment complete particular period infer imperfective form accomplishment true subintervals period final subintervals nplemp logical representation phrase hour meaning postulate guarantee truth normal situation accomplishment predicate nptemp perf fla true nptemp true subintervals final subintervals picture hour painting picture hour lot subject subtle difference different class predicate brief sketch give idea range variation entailment semantic theory book
258,"Scope ambiguities
8.5

Scope ambiguities

So far we have been looking at tense and aspect from the purely semantic point of view.
Translations of English sentences have been given without any attempt to specify the rules for deriving them in a compositional manner and reliance has been placed on the reader's ability to work out the relation between the sentences in the object language and the corresponding formulae in LT.
This relation should be clear enough, but specifying the translation rules from English into LT depends so much on the syntactic theory that one adopts that it seems sensible at this point to dispense with our previous practice of constructing complete and precise grammar fragments.
This should not give the impression that a translation procedure cannot be given, but different theoretical frameworks encounter different problems and have different advantages for providing a precise translation procedure.
Hence, a procedure worked out for one syntactic theory is not necessarily going to provide insights into the procedure for another.
Although no attempt will be made to give a comprehensive translation algorithm for all the constructions discussed above, this chapter ends with a discussion of one problem that arises with respect to the relative scopes of the tense
(and aspect) operators and any quantifiers contained in subject phrases.
This problem is analogous to that of quantifier scope ambiguities discussed in Chapter 6 and will have to be solved by the translation procedure for any theory.
To see the problem in more detail, let us update the grammar fragment of
Chapter 6 to incorporate simple present and past tense verbs (i.e. ignoring entirely future tense and aspect).
Using a binary feature PAST, the basic sentence rule is revised to become (65.a) and all the VP rules given in previous chapters are now assumed to allow a verb to be marked + or - PAST, according to whether the VP node that dominates it is + or -.
There are two translations (65.a) depending on the value of the feature [PAST] which are given in (65.b) and (65.c).
(Although this seems to be a violation of the rule-to-rule hypothesis, it is not, if different feature values in a syntactic rule are defined as givingriseto different rules.)
The effect of the translation in (65.b) is to accommodate the present and future readings of the English present tense as illustrated in (40), above.
Given these rules, a sentence like Every student passed an examination receives the partial analysis in (66).
After applying lambda reduction to the translation in (66.c) we get the formula in (67) which has the truth-conditions in (68).
These guarantee the truth of (67) only in situations where all students at some time prior to the time of utterance pass an examination at that same time.
(65) a.
b.
c.

S[oPAST] -> NP VP[ocPAST].
S[-PAST] => [Pres (NP'(VP)') v Fut (NP'(VP'))].
S[+PAST] =f> [Past (NP'(VP'))].

(66) a.
passed an examination
=> Xy [Bz [examination'(z) & (pass'(z))(y)]].
every student
=> XQ [Vx [student'(x) -> Q(x)]].
every student passed an examination
=> Past(AQ [Vx [student'(x) -> Q(x)]]
(Xy [3z [examination'(z) & (pass'(z))(y)]])).
b.
c.

259",277,259,"8 Time, Tense and Aspect",No info,No info,scope ambiguity scope ambiguity tense aspect semantic point view translation english sentence attempt specify rule compositional manner reliance reader ability work relation sentence object language formula relation clear enough specifying translation rule english much syntactic theory one adopts sensible point dispense previous practice complete precise grammar fragment impression translation procedure different theoretical framework different problem different advantage precise translation procedure procedure syntactic theory insight procedure attempt comprehensive translation algorithm construction end discussion problem respect relative scope tense aspect operator quantifier subject phrase problem analogous quantifier scope ambiguity translation procedure theory problem detail update fragment simple present past tense verb future tense aspect binary feature basic sentence rule rule previous chapter verb past node translation value feature past violation hypothesis different feature value syntactic rule givingriseto different rule effect translation present future reading english present tense rule sentence student examination partial analysis lambda reduction translation formula guarantee truth situation student time prior time utterance pas examination time opast ocpast pres fut past examination examination pas student student student examination student examination pas
259,"Time, tense and aspect
(67)

Past (Vx [student'(x) -> 3z [examination'(z) & (pass'(z))(x)]]).

(68) a.

[Past (Vx [student'(x) -> 3z [examination'(z) & (pass'(z))(x)]])]M88-i is 1 iff there is a time j < i such that [Vx [student'(x) —> 3z [examination'(z) &
(pass'(z))(x)]]] M ^Jisl.
[Vx [student'(x) -> 3z [examination'(z) & (pass'(z))(x)]]]M8-gi is 1 iff for every substitution a e A for x [student'(x) -> 3z [examination'(z) &
(pass'(z))(x)]]M8-8a/xoisl.
[student'(x) -> 3z [examination'(z) & (pass'(z))(x)]]M8'«a/x,j is 1 iff either
[studentXx)]* 18-^ is 0 or [3z [examination'(z) & ( p a s s ' ^ X x ) ] ] * 1 8 ^ is 1.
[3z [examination'(z) & (pass'(z))(x)]]M8«a/xJ is 1 iff there is a substitution b e A for z such that [examination'(z) & (pass'(z))(x)]M88[a/xib/zo is 1.
[examination'(z) & (pass'(z))(x)]M8 ^ b / z o ls \ iff [examination'(z)]* 18 ^ 1 ^ is 1 and [(pass'(z))(x)]M8'8fa/xib/zo i s 1.
b.
c.
d.
e.

The crucial point for our purposes is seen in (68.c) which shows that on this reading the entities passing the examination are also students at the time of passing.
This is because student'(x) and 3z [examination y(z) & (pass '(z))(x)] are both assessed with respect to the interval j , in the past with respect to the time of utterance.
However, there is another possible interpretation of this sentence where the entities passing the examination in question are not necessarily students at this past time, but are students at the time of utterance.
For example, if the examination was an entrance exam to a university, the people passing it would in general not be students at the time of passing.
To get this second reading, we can use the rule of quantifying in introduced to handle quantifier scope ambiguities in Chapter 6.
Using this rule to postpone the combination of the translation of the subject phrase until after the tense operator has been introduced yields the translation for Every student passed an examination in (69.a) which reduces to (69.b).
(69.a) is derived by supplying A,P[P(y)] as the translation of the subject, then applying the tensed sentence rule, followed by quantifying in the translation of every student, as readers can check for themselves.
(69) a.
b.

XQ [Vx [student' (x) -> Q(x)]]
(ky [Past (XPP(y)(Xx,[3z [examination'(z) & (pass'(z))(x,)]]))]).
Vx [student'(x) -> Past (3z [examination'(z) & (pass'(z))(x)])].

The truth-conditions of (69.b) are computed as in (70) with the crucial information appearing in (7O.a and b).
These show that we are assessing the truth of student'(x) at the time of utterance, i, while the truth of 3z [examination'(z) &
(pass'(z))(x)] is assessed at the past interval, j .
(70) a.
b.
c.
d.

260

[Vx [student'(x)-> Past (3z [examination'(z) & (pass'(z))(x)])]]M8'8jis 1 for every substitution a e A for x [student'(x)]* 18 -^ is 0 or [Past (3z
[examination'(z) & (pass'(z))(x)])]M8i8a/xi is 1.
[Past (3z [examination'(z) & (pass'(z))(x)])]M8-8a/xi is 1 iff there is a time j prior to i such that [3z [examination'(z) & (pass'(z))(x)]]M88a/xJ is 1.
[3z [examination'(z) & (pass'(z))(x)]]M88a/xJ is 1 iff there is a substitution b
G A for z such that [examination'(z) & (pass'(z))(x)]M88fa/x^b/zJ is 1.
[examination'(z) & (pass'(z))(x)]M8•gi^i^.j is 1 iff [examination'( is 1 and [(pass'(z))(x)]M8^a/xJb/zJ is 1.",278,260,"8 Time, Tense and Aspect",No info,No info,time tense aspect student examination pas past student examination pas time student examination pas student examination pas substitution student examination pas student examination pas examination examination pas substitution examination pas examination pas examination pas crucial point purpose show entity examination student time student examination pas respect interval past respect time utterance possible interpretation sentence entity examination question student past time student time utterance examination entrance exam university people general student time second reading use rule handle quantifier scope ambiguity rule postpone combination translation subject phrase tense operator yield translation student examination reduces translation subject sentence rule translation student reader check student xpp examination pas student examination pas crucial information show truth student time utterance truth examination pas past interval student examination pas substitution student examination pas examination pas time examination pas examination pas substitution examination pas examination pas examination pas
260,"Scope ambiguities
Thus, we find further scope interactions between logical operators, quantifiers and tenses, which do appear to mirror certain genuine ambiguities in English sentences.
Ignoring any aspectual operators, the sentence every student passed an examination turns out to be at least six ways ambiguous, according to the different scopes of the operators Past, 3 and V. Two of these have already been discussed.
The others are shown in (71).
(71) a.
b.
c.
d.

Past (3z [examination'(z) & Vx [student'(x) -> (pass'(z))(x)]]).
3z [examination'(z) & Past (Vx [student'(x) -> (pass'(z))(x)])].
3z [examination'(z) & Vx [student'(x) —> Past ((pass'(z))(x))]].
Vx [student'(x) —> 3z [examination'(z) & Past ((pass'(z))(x))]].

Exercise 8.7:
Work through the truth-conditions of the formulae in (71) to show how they differ in meaning.
Are all of these readings intuitively plausible as interpretations of the sentence Every student passed an examination?
The proliferation of scope ambiguities of this sort gives rise to a number of questions that need consideration.
In particular, it is necessary to ask whether all the ambiguities predicted by the free application of the rule of quantifying in are plausible for some particular sentence.
As scope ambiguities involve all the logical operators, readings involving scope differences between tenses and aspects also need to be considered.
If certain readings do not seem to represent genuine readings of a particular sentence or set of sentences, then the limits to ambiguity need investigation and some motivated constraints need to be put on the operation of the rule of quantifying in to allow only those ambiguities that are felt to be valid and to reject all others.
It is not my intention to pursue these weighty matters here, but the reader should be aware that much more research needs to be carried out into the domain of scope ambiguity, before we can be confident that the treatment of tenses and aspects as logical operators is the correct one.
Furthermore, one has to ask whether the rule-to-rule hypothesis can be maintained, given that any construction containing more than one logical operator has more than one output for any single input.
Whether or not the rule-to-rule hypothesis should be abandoned depends on whether one's syntactic theory can provide alternative syntactic analyses, with the same output, mirroring the different semantic readings.
Again, this topic will not be pursued here, bound up as it is with theory particular considerations.
Scope ambiguities do, however, cast doubt on the validity of the rule-to-rule hypothesis (although not the principle of compositionality) as holding for the full range of semantic phenomena found in human languages.

261",279,261,"8 Time, Tense and Aspect",No info,No info,scope ambiguity scope interaction logical operator quantifier tense mirror certain genuine ambiguity english sentence aspectual operator sentence student examination turn least way ambiguous different scope operator others examination student pas examination student pas examination student pas student examination pas exercise work formula show meaning plausible interpretation sentence student examination proliferation scope ambiguity rise number question consideration particular necessary ask ambiguity free application rule plausible particular sentence scope ambiguity logical operator scope difference tense aspect certain reading genuine particular sentence sentence limit ambiguity need investigation motivated constraint need operation rule ambiguity valid others weighty matter reader aware much research domain scope ambiguity confident treatment tense aspect logical operator hypothesis construction logical operator output single input hypothesis syntactic theory alternative syntactic analysis output different semantic reading topic theory particular consideration scope ambiguity doubt validity hypothesis principle compositionality full range semantic phenomenon human language
261,"Time, tense and aspect
8.6

Further reading

General linguistic discussions of tense and aspect can be found in Comrie (1985),
Comrie (1976), Lyons (1977: 677-690; 703-718), and Dahl (1985) which all have good bibliographies.
For discussions of tense logic with respect to moments of time rather than temporal intervals see, inter alia, Lyons (1977: 809-823), McCawley
(1981: 340-359), Reichenbach (1947), Prior (1967), Rescher and Urquhart (1971),
Gunthner (1976), Dowty, Wall and Peters (1981: 112-121), and Chierchia and
McConnell-Ginet (1990: 223-1234).
The suggestion that temporal intervals are more useful for the analysis of natural languages is proposed in Bennett and Partee (1972) and developed subsequently in Bennett (1977), Dowty (1979: ch.
3), Aquist (1976),
Baiierle (1979), Cresswell (1985a: ch.
3), and many others.
The classification of verbs in terms of their aspectual properties is the subject of many books and articles, among which see especially Vendler (1967), Dowty (1979: ch.
2), Mourelatos (1978) and
Verkuyl (1972; 1989).
Discussions of tense and aspect can be found in many collections of papers, among which see, for example, Rohrer (1980) and Tedeschi and
Zaenen (1981).
A critique of interval semantics can be found in, for example, Tichy
(1985) (but see also the reply in Cresswell (1985a: 85-95))).
A considerable amount of discussion of aspect currently takes place with reference to the notion of events which are considered to be ontological primitives like the individual entities encountered in this book.
Event theory owes its current popularity to Davidson
(1967) (and see also the other articles in Davidson (1980)); some examples of this approach can be found in Dowty (1989), Bach (1986), ter Meulen (1983; 1984) and
Parsons (1989) which gives a good discussion of the Imperfective Paradox and presents a solution.

262",280,262,"8 Time, Tense and Aspect",No info,No info,time tense aspect reading general linguistic discussion tense aspect comrie comrie lyon dahl good bibliography discussion tense logic respect moment time temporal interval inter alia lyon mccawley reichenbach prior urquhart gunthner dowty wall peter chierchia suggestion temporal interval useful analysis natural language bennett partee bennett dowty aquist baiierle cresswell many others verb term aspectual property subject many book article vendler dowty mourelatos verkuyl discussion tense aspect many collection paper rohrer tedeschi zaenen critique interval semantics tichy cresswell considerable amount discussion aspect place reference notion event ontological primitive individual entity book event theory current popularity davidson article davidson example approach dowty bach ter meulen parson good discussion imperfective paradox present solution
262,"Possible Worlds

9.1

Where entailments fail

In previous chapters (particularly Chapter 7), we looked at certain types of entailment relations that are guaranteed by the theory of interpretation set out in the earlier part of this book.
Certain contexts exist, however, where expected entailments do not hold.
Consider, for example, the inference pattern in (1).
(1) a.
b.
c.

The Morning Star is the planet Venus.
The Evening Star is the Morning Star.
Therefore, the Evening Star is the planet Venus.

The validity of this inference pattern illustrates a general rule that holds in the extensional semantic theory developed in Chapters 2 to 6 of this book.
This rule is called Leibniz's Law or the Law of Substitution and it allows the substitution of extensionally equivalent expressions for one another in a formula while maintaining the truth value of the original formula.
Thus, in (1), since the Morning Star and the
Evening Star denote the same entity, the latter expression may be substituted for the former in the first premiss to give the conclusion.
Indeed, because all three terms in
(1) have the same extension all of them may be substituted for each other salva veritate (the Latin phrase used by Leibniz meaning 'with truth unchanged').
The Law of Substitution can be formally defined as in (2) which, in words, says that if an expression a is extensionally equivalent to another expression b, then a formula (>
| is truth-conditionally equivalent to the formula formed from <j) by substituting an instance of b for every instance of a.
(2)
(a = W->[4><->4>*].
That substitution of this sort does really hold in the semantic theory (without tense) developed up to Chapter 7 can be shown by trying to show that <)| could be true while
<|>b* is false for any extensionally equivalent expressions a and b.
No formal proof will be attempted here, but intuitively it should be fairly clear to the reader that the formula in (2) does indeed hold, because truth-conditions are defined in a model in terms of entities and functions over entities and not in terms of the names of entities or functions.
Hence, the truth of a formula depends on the extension of an expression in a model and not on the expressions themselves.
If two expressions, say morning-staf and evening-star \ denote the same thing, say the entity VENUS, then the truth of a formula containing either of these expressions depends only on whether the entity denoted, i.e. VENUS, is mapped onto 1 by the function denoted by some predicate, e.g.
[Xx [x = venus']]M s (the set of all entities identical with Venus).
The Law of Substitution in (2) does not, however, hold in all linguistic contexts.
Consider the inference patterns in (3), (4) and (5).

263",281,263,9 Possible Worlds,No info,No info,possible world entailment fail previous chapter certain type entailment relation theory interpretation earlier part book certain context entailment hold consider inference pattern morning star planet venus evening star morning star evening star planet venus validity inference pattern general rule extensional semantic theory chapter book rule leibniz law law substitution substitution equivalent expression formula truth value original formula morning star evening star denote entity latter expression former first premiss term extension salva veritate latin phrase leibniz truth unchanged law substitution word expression equivalent expression formula equivalent formula instance instance substitution sort semantic theory tense show true false equivalent expression formal proof clear reader formula hold model term entity function entity term name entity function truth formula extension expression model expression expression denote entity venus truth formula expression entity venus function predicate venus entity identical venus law substitution linguistic context inference pattern
263,"9 Possible worlds
(3) a.
b.
c.

Necessarily, the Morning Star is the Morning Star.
The Morning Star is the Evening Star.
Therefore, necessarily, the Morning Star is the Evening Star.

(4) a.
b.
c.

Bertie believes the Morning Star is the Planet Venus.
The Morning Star is the Evening Star.
Therefore, Bertie believes that the Evening Star is the planet Venus.

(5) a.
b.
c.

Bertie wants to look at the Morning Star.
The Morning Star is the Evening Star.
Therefore, Bertie wants to look at the Evening Star.

None of these inference patterns is intuitively valid, despite the fact that they involve the substitution of extensionally equivalent expressions in a formula.
The inference pattern in (3) fails because, while it is (logically) necessary that something is identical to itself, it is not necessary for two different names to have the same extension.
We can imagine a possible state-of-affairs in which the Morning Star is the planet Venus, but the Evening Star is, for example, the planet Jupiter.
The fact that the proposition expressed by the sentence The Morning Star is the Evening Star is contingently true is not sufficient grounds for asserting that it is necessarily true.
Contingent formulae are those whose truth value could be otherwise than they are whilst non-contingent formulae are either always true or always false and whose truth or falsity is determined by their logical structure.
The invalidity of the inference patterns in (4) and (5) depends on the attitudes and beliefs of the referent of the subject of the main clause.
The person called Bertie could well believe that the Morning Star is the planet Venus, but not believe that the
Evening Star and the Morning Star are the same thing.
Thus, while the second premiss in (4) is true, it is true outside Bertie*s beliefs and so cannot be used to construct new statements about what Bertie believes from the original premise.
In Bertie's system of beliefs, the Evening Star could be the planet Jupiter and not Venus at all.
Similar reasoning argues against the validity of (5).
Here, Bertie may easily want to see the
Morning Star and so be intending to get up at dawn, but this is not the same as wanting to see the Evening Star at dusk.
He may already have seen the Evening Star and merely wants to catch a sight of its manifestation as the Morning Star.
Notice that here the failure in substitution in (5) may also persist even if Bertie knows that the
Evening Star and the Morning Star are extensionally equivalent.
What is important is a particular manifestation of some entity, the planet Venus.
Sentences containing verbs like want and believe exhibit another interesting property.
Consider the sentences in (6).
(6) a.
b.

Jo believes that the Ladies' Scottish Golf Champion is rich,
Jo believes that Ethel is poor.

In general, it is, of course, possible for these two sentences to express true propositions at the same time.
If, however, it is true that Ethel is the Ladies' Scottish
Golf Champion, it might seem that Jo has contradictory beliefs, believing of one and the same person that she isrichand that she is poor.
However, the contingent fact that
Ethel is a golf champion does not necessarily affect Jo's beliefs and we cannot substitute the name Ethel for the subject noun phrase in (6.a) (or vice versa) in order
264",282,264,9 Possible Worlds,No info,No info,possible world star morning star morning star evening star morning star evening star bertie belief morning star planet venus morning star evening star bertie belief evening star planet venus bertie morning star morning star evening star bertie evening star none inference pattern valid fact substitution equivalent expression formula inference pattern necessary identical necessary different name extension possible morning star planet venus evening star planet jupiter fact proposition sentence morning star evening star true sufficient ground true contingent formula truth value formula true false truth falsity logical structure invalidity inference pattern attitude belief referent subject main clause person bertie morning star planet venus evening star morning star premiss true true bertie belief new statement bertie belief original premise bertie system belief evening star jupiter venus similar reasoning validity bertie morning star dawn evening star dusk evening star catch sight manifestation morning star notice failure substitution bertie evening star morning star equivalent important particular manifestation entity planet venus sentence verb want interesting property consider sentence belief lady scottish golf champion rich belief ethel poor general course possible sentence true proposition time true ethel lady scottish golf champion contradictory belief person poor contingent fact ethel golf champion belief substitute name ethel subject noun phrase vice versa order
264,"Where entailments fail to infer the truth of the contradictory sentence (via conjunction introduction and the opposite relation between rich and poor) Jo believes that Ethel is rich and Jo believes that Ethel is not rich.
If Jo does not know (or believe) that Ethel is the Ladies' Scottish
Golf Champion, then (6.a) means that Jo has a belief about someone who carries the title of Ladies' Scottish Golf Champion without knowing (or perhaps caring) who that person is.
In other words, (6.a) may be a reflection of Jo's pre-conceived ideas about those who win golfing tournaments and have nothing to do with the actual individuals concerned.
Such belief is often said to be de dicto, a belief 'about what is said or mentioned'.
In such contexts, the referents of noun phrases within the sentential complement of a verb like believe are, one might say, within the subject's 'belief worlds' and do not refer necessarily to entities outside those worlds.
There is a second way that (6.a) may be interpreted, however.
The assertion of such a sentence, instead of being interpreted as a simple statement about Jo's beliefs, may be taken as asserting of a certain individual that Jo has a particular belief about them.
In other words, the speaker may refer to the particular individual that is denoted by the expression the Ladies' Scottish Golf Champion, who may not be known to Jo, the subject of the belief.
In these cases, the belief is said to be de re, belief 'about the thing' referred to.
In such cases, the reference of a noun phrase in the sentential complement of believe is to an entity outside the subject's beliefs, something 'in the real world'.
Furthermore, because de re reference is outside the subject's beliefs, substitution of extensional equivalents is valid, but, for the same reason, this does not lead to the conclusion that Jo has contradictory beliefs (see below).
This ambiguity between de re and de dicto reference is not confined to belief contexts, but may be found after verbs which denote mental states, acts and attitudes
(a subclass of which, including believe, doubt, consider, are traditionally called by philosophers verbs of propositional attitude).
For example, the sentences in (7) exhibit the same ambiguity as those in (6).
(7) a.
b.

Jo does not want to meet Ethel.
Jo wants to meet the Ladies' Scottish Golf Champion.

In the de dicto sense, if Ethel and the Ladies' Scottish Golf Champion are one and the same, these sentences are not contradictory.
Jo may very well want to meet the Ladies'
Scottish Golf Champion (perhaps under the illusion that she is a rich lady of leisure) but definitely not want to meet Ethel, his secretary, whose filing system he has ruined.
On ade re reading, on the other hand, the sentences in (7) are contradictory, because the speaker is asserting of some individual (i.e. Ethel) that Jo does and does not want to meet her.
People hearing a sentence like (7.b) meant in a de dicto sense might interpret it de re.
So, for example, Fiona might utter (7.b) to Bertie and the latter might reply Oh, he wants to meet Ethel, i.e. he supplies the actual referent of the phrase the
Ladies' Scottish Golf Champion, even though Jo may still not want to meet Ethel.
We will return to this topic in Chapter 10.
There is one further problem with the verbs we have been discussing with respect to Leibniz' Law.
The way this is defined in (3), above, allows for the substitution, not just of entity-denoting expressions, but of any two extensionally equivalent expressions of any type.
By this law, therefore, if someone believes any true formula at all, then they should also believe every other true formula.
Thus, if someone believes that grass is green then they must, by Leibniz' Law, also believe that the
265",283,265,9 Possible Worlds,No info,No info,entailment fail infer truth contradictory sentence conjunction relation rich poor belief ethel rich belief ethel rich know believe ethel lady scottish golf champion mean belief someone title lady scottish golf champion person word idea tournament nothing actual individual concerned belief dicto belief context referent noun phrase sentential complement verb subject world entity world second way assertion sentence simple statement belief certain individual particular belief word speaker particular individual expression lady scottish golf champion subject belief case belief belief case reference noun phrase sentential complement entity subject belief real world reference subject belief substitution extensional equivalent valid reason contradictory belief ambiguity dicto reference belief context verb denote mental state act attitude subclass believe doubt philosopher propositional attitude sentence exhibit ambiguity ethel want meet lady scottish golf champion dicto sense ethel lady scottish golf champion sentence contradictory scottish golf champion illusion rich lady leisure meet ethel secretary filing system ade hand sentence contradictory speaker individual ethel people sentence dicto sense fiona bertie latter meet ethel supply actual referent phrase lady scottish golf champion ethel return topic problem verb respect leibniz law way substitution expression equivalent expression type law someone belief true formula true formula someone belief grass green leibniz law
265,"9 Possible worlds
Morning Star is the planet Venus, that 29 is the square root of 841 and that there is a pink water lily in flower in my garden pond!
This patent absurdity follows from the fact every true formula denotes the value 1, so that any sentence that translates into a formula with this value may be substituted for any other sentence with the same value.
This is clearly not true and verbs like believe are not truth-functional in their complement position, because the truth of the whole proposition expressed by the sentence does not depend on the truth (or falsity) of the proposition expressed by the embedded sentence.
It is not only the law of substitution that is problematic in the above contexts.
Scope effects involving the logical quantifiers may also fail to hold.
Consider the inference pattern in (8).
(8) a.
b.

Jo met a secretary.
Therefore, there exists a secretary that Jo met.

As we saw in Chapter 6, the decomposition rule for transitive verbs ensures that any quantifier in an object noun phrase has scope over the verb.
Thus, in LQ, (9.a) provides the translation of the premiss in (8) which is, of course, also the translation of the conclusion of the inference pattern, hence ensuring that the truth of the premiss guarantees the truth of the conclusion.
From conjunction elimination applied to (9.a), we can also conclude that a secretary exists (9.b) and that someone exists whom Jo met (9.c).
In other words, the interpretation given to the translation of the premiss in
(8) ensures that there exists someone specific whom Jo met, provided that the premiss is true.
(9) a.
b.
c.

3x [(meet' (x))(jo') & secretary' (x)].
3x [secretary'(x)].
3x

After verbs of needing, wanting, seeking, etc., however, this type of entailment does not necessarily follow.
Thus, in (10), none of (lO.b) to (lO.d) necessarily follow from(lO.a).
(10) a.
b.
c.
d.

Jo wanted to meet a secretary.
There exists a secretary that Jo met.
There exists a secretary.
There is someone whom Jo met.

If Jo met a secretary, then there is a specific secretary that Jo met, but if he wanted to meet a secretary, then it does not follow that there is a specific secretary that he wanted to meet.
He may have in mind a particular individual secretary, but not necessarily.
He may just want to meet someone who is a secretary, without caring which particular one.
Indeed, (lO.a) could be true even if no secretaries exist, a situation that is made more obvious in the sentence Jo wants to meet a unicorn which can clearly express a true proposition without there being any unicorns for someone to meet.
Thus, certain verbs allow a non-specific reading for their objects (including objects of subordinate non-finite verbs), because there is no particular entity with the property defined in the noun phrase that is the object of the main predicate.
In effect, then, these verbs may prevent an existential quantifier in an object phrase from having scope over the whole sentence.
Again there is ambiguity, because a specific reading
266",284,266,9 Possible Worlds,No info,No info,possible world morning star planet venus square root pink water lily flower garden pond patent absurdity fact true formula denotes value sentence formula value sentence value true verb complement position truth whole proposition sentence truth falsity proposition embedded sentence law substitution problematic context scope effect logical quantifier hold consider inference pattern secretary secretary decomposition rule transitive verb quantifier object noun phrase scope verb translation course translation inference pattern truth premiss guarantee truth conjunction elimination secretary someone word interpretation translation premiss someone specific premiss true meet secretary secretary verb type entailment none meet secretary secretary secretary someone secretary specific secretary meet secretary follow specific secretary meet particular individual secretary someone secretary particular true secretary situation obvious sentence meet unicorn true proposition unicorn someone certain verb object object subordinate verb particular entity property noun phrase main predicate effect verb existential quantifier object phrase scope whole sentence ambiguity specific reading
266,"Intension and extension of the complement is possible.
For example, Jo may have in mind a particular secretary who has been recommended to him as being particularly efficient, although he does not know exactly who this is.
In this case, not every secretary will satisfy Jo's wanting to meet them, but only the specific one who has been recommended for their efficiency.
9.2

Intension and extension

The contexts in which straightforward entailments fail are often referred to as referentially opaque (or oblique) contexts, opposed to the referentially transparent contexts dealt with in Chapters 2 to 6.
In order to make our semantics more adequate than it obviously is, we need to find some way of being able to distinguish between the objects of verbs like want, lookfor and those of verbs like meet, find.
We also need to decide what complement clauses should denote, since, as we have seen, they cannot just denote truth values, but must still be associated with truth or falsity.
The philosopher Gottlob Frege was the first to tackle this problem directly.
He proposed that a distinction should be made between what he called the reference (German
Bedeutung) of an expression and its sense (German Sinn).
The reference of an expression is what we have been calling its extension, that is the entity or function that an expression refers to in any model.
Its sense, on the other hand, is more abstract, more like the 'meaning' of the expression.
We may think of the sense of an expression as being the thing that each of the elements in the reference of the expression have in common that cause them to be identified as such.
As an illustration, the reference of the English word red is, according to Frege, the extension as defined in previous chapters, i.e. the set of all red entities.
Its sense, however, is the property of being red, the 'redness' of all these entities abstracted away from the individuals themselves.
In order to avoid confusion with the notion of reference as the act of picking out entities in the world and that of sense as the meaning relation between expressions in a particular language (see Chapter 7 and Lyons (1977:177ff)X it is better to follow the terminology of Carnap (1947) and use, as we have been doing, the term extension for
Frege's Bedeutung and intension for Sinn.
Some may think of intensions as psychological concepts, but here the view is taken that they are external to human beings (in the world, so to speak) and so publicly accessible in some way.
In either case, both intension and extension are intended to refer to things in the world and so constitute different aspects of the denotation of an expression, according to the definition of this concept in Chapter 1.
This distinguishes both terms from sense, which is, from the linguistic point of view, language internal and defines the meaning relations between words and expressions of a particular language, as we saw in Chapter 7.
We may thus picture the 'meaning' of an expression as minimally constructed from its sense and its denotation, as shown in the diagram in (11).
(The role of sense in this system is briefly discussed in the next chapter.)

267",285,267,9 Possible Worlds,No info,No info,intension extension complement possible particular secretary efficient secretary satisfy specific efficiency intension extension context straightforward entailment fail opaque oblique context transparent context chapter order semantics way able distinguish object lookfor meet complement clause denote denote truth value truth falsity philosopher gottlob frege first tackle problem distinction reference german bedeutung expression sense german sinn reference expression extension entity function expression model sense hand abstract expression sense expression element reference expression common cause illustration reference english word red frege extension previous chapter red entity sense property red entity individual order confusion notion reference act entity world sense relation expression particular language lyon better follow terminology carnap use term extension frege bedeutung intension sinn intension psychological concept view external human world accessible way intension extension refer thing world different aspect denotation expression concept term sense linguistic point view language internal defines relation word expression particular language expression sense denotation diagram role sense system
267,"9 Possible worlds
(11)
Meaning
Sense

Extension

Intension

Making a distinction between extensional and intensional denotation allows a distinction to be made between referentially transparent and referentially opaque contexts.
In the former case, a predicate is interpreted as a function over the extensional type of its argument, in the way familiar from previous chapters.
Predicates that create opaque contexts, however, can be interpreted as denoting functions that take the intensional type of their arguments as their domain.
Thus, while the verb meet denotes a relation between two entities, the verb look for denotes a relation between an entity, the searcher, and the intension (or concept) of another.
In this way, we can distinguish the meanings of the sentences Bertie is looking for an elf and Bertie is looking for a hobbit.
The expressions elf and hobbit, we assume, extensionally denote the null set in the actual world, and hence the noun phrases an elf and a hobbit also both denote the null set (since no set has a non-null intersection with 0).
Their intensions, on the other hand, differ, since the property that identifies an entity as an elf differs from that which identifies a hobbit, even though there are no actual elves or hobbits picked out in the real world and so if Bertie actually found one he would be able to identify it as such.
Similarly, verbs like believe do not denote relations between entities and truth values, the extensions of sentences, but relations between entities and the intensions of sentences, which may be informally interpreted as the propositions they express.
To believe that the Morning Star is the planet Venus is, therefore, not the same as believing that the Evening Star is the planet Venus because the propositions expressed by these two sentences differs.
In the first case, the proposition expressed by the sentence is true if something called the Morning Star
(which is visible at dawn) is the same as the planet Venus whilst the second is true if something called the Evening Star (which is visible at dusk) is the same entity as the planet Venus.
Because the intensions of these sentences differ, Jo can 'stand in a belief relation' to one and not the other without contradiction, even if it is contingently true that the Evening Star and the Morning Star extensionally denote the same entity.
Furthermore, by appealing to the notion of intension, we can salvage the
Principle of Compositionality.
If the denotation of an expression can only be extensional, then the examples in Section 9.1 constitute a direct refutation of this principle, because the meaning of the whole does not rely on the extensions of the complements of the main verbs.
However, for the purposes of compositionality, we can equate 'meaning' with intension and redefine the principle as in (12).
(12)

268

Principle of Intensional Compositionality: The intension of a complex expression is a function of the intensions of its parts.",286,268,9 Possible Worlds,No info,No info,possible world sense extension intension distinction extensional intensional denotation distinction transparent referentially opaque context former predicate function extensional type argument way familiar previous chapter predicate opaque context function intensional type argument domain verb meet denotes entity verb look relation entity searcher intension concept way distinguish meaning sentence bertie elf bertie hobbit expression elf hobbit assume null actual world noun phrase elf hobbit null set intersection intension hand property identifies entity elf identifies actual elf hobbit real world bertie able verb believe denote relation entity truth value extension sentence relation entity intension sentence proposition express believe morning star planet venus evening star planet venus proposition sentence first proposition sentence true morning star visible dawn planet venus second true evening star visible dusk entity planet venus intension sentence belief relation contradiction true evening star morning star entity appealing notion intension salvage principle compositionality denotation expression extensional example direct refutation principle meaning whole extension complement main verb purpose compositionality equate intension redefine principle principle intensional compositionality intension complex expression function intension part
268,"Introducing other worlds
Frege attributed another important property to his concept of intension (Sinn) which is stated as the Principle ofIntensional Reference in (13).
This captures the traditional principle that intension (the defining property of some class) determines extension (the membership of a class).
(13)

Principle of Intensional Reference: There is a relation between intensions and extensions such that each intension determines a unique extension.

The idea that an intension determines a unique extension for some expression allows the concept to be defined in terms of a function.
The intension of an expression is the property that unifies all the members of its extension, and so it enables the identification of the extension to take place.
Hence, an intension may be thought of as a function that picks out an extension for any possible state-of-affairs.
For example, the intension of the word red can be considered to be the function that identifies the set of red entities in any situation, i.e. a function from situations to extensions.
Before we go on to look at intensionality in more detail in Chapter 10, however, we will first extend our semantic analysis to cover the simple modal adverbs necessarily and possibly.
The introduction of modality leads to an introduction into the model of a set of possible worlds and lays the foundations for a discussion of
Montague's formal approach to intensionality and intensional contexts.
9.3

Introducing other worlds

Human beings are capable of imagining situations that are not actual and all languages have the ability to refer to such states-of-affairs.
Thus, while none of the sentences in
(14) (presumably) express true propositions on 12 August 1990, we can interpret them well enough and imagine states-of-affairs of which they are true.
Furthermore, as (15) shows, English has many ways of presenting non-actual situations for the purposes of conveying information.
(15.a) contains a modal verb indicating the possibility of the truth of the situation described by the non-modal counterpart of the sentence, (15.b) illustrates a (slightly archaic) construction that presents the information of its modified sentence as untrue but desirable while (15.c) exemplifies conditionals whose component clauses are presumed to be untrue.
Like the other constructions in (15), such counterfactual conditionals rely on our ability to entertain the idea that situations may be different from what they actually are (or are assumed to be).
(14) a.
b.
c.
(15) a.
b.
c.

Richard Montague was thefirstperson ever to win a Nobel Prize for Logic.
Hitler's postwar pact with Japan came unstuck when Hirohito invaded the
USA, Germany's closest ally.
A team of robots from Mars began to clean up Earth's poisoned atmosphere.
The depletion of the Ozone Layer might be caused by the excessive use of aerosol sprays.
Would that I had never agreed to write this book!
If Richard Montague had been a linguist, he would never have written PTQ.

It is in the notion of alternative situations that the formalisation of the concept of intension lies.
This concept has already been used in this book in the representation
269",287,269,9 Possible Worlds,No info,No info,world frege important property concept intension sinn principle ofintensional reference capture traditional principle intension property class extension membership class principle intensional reference relation intension extension intension unique extension idea intension unique extension expression concept term function intension expression property unifies member extension identification extension place intension function extension possible intension word red function identifies red entity situation function situation extension intensionality detail semantic analysis cover simple modal adverb modality lead model possible world foundation discussion montague formal approach intensionality intensional context world human capable situation actual language ability none sentence true proposition august interpret true furthermore english many way situation purpose information modal verb possibility truth situation counterpart sentence archaic construction present information sentence desirable exemplifies conditionals component clause untrue construction counterfactual conditionals ability entertain idea situation assumed richard montague thefirstperson win nobel prize logic hitler postwar pact japan unstuck hirohito usa germany closest ally team robot mar clean earth atmosphere depletion ozone layer excessive use aerosol spray book richard montague linguist ptq notion alternative situation formalisation concept intension lie concept book representation
269,"9 Possible worlds of the meanings of the propositional connectives.
As we saw in Chapter 3, the truthconditional meanings of the connectives, &, v, ~, -», <-», can be represented by truth tables, each line of which represents a different situation with regard to the truth or falsity of one or more formulae and provides the truth value in that situation of a complex formula formed from these using a connective.
Logicians tend to talk, not of different situations, but of possible worlds, a term introduced by Leibniz.
Just as we may think of our own world, the actual world (the 'best of all possible worlds' according to Leibniz) as a thing in its own right, so we may think of all possible worlds in the same way (although possibly not as existing).
In constructing intensional models, therefore, we may introduce another set of ontological primitives, a set, W, of worlds alongside the set, A, of individual entities and the set, T, of times, in a temporal semantics.
While Occam's Razor states that the postulation of different constructs should be avoided, it crucially states that entities should not be posited beyond need (entia non sunt multiplicanda praeter necessitatem).
Since we need to account for the existence of opaque contexts like those discussed in Section 9.1, and since a purely extensional semantics using only individuals (and times) cannot explain them, we clearly need something else to provide a semantic account of these expressions.
Unlike the postulation of a set of primitive times in temporal semantics, however, the adoption of a set of primitive worlds is somewhat mysterious and less intuitively appealing.
Indeed, the ontological status of possible worlds has been the subject of heated philosophical debate, but it is not my intention to go into this.
If we assume that possible worlds are theoretical constructs (whose ontological status is similar to other mathematical constructs), then what we, as linguists, need to do is to assess their usefulness in achieving the general aims of semantic theory that were set out in Chapter 1.
If the use of possible worlds enables an account of opaque contexts to be given in a clear and precise fashion and helps to capture the meaning relations that hold between different opaque sentences, then their adoption into the theory is justified.
Of course, if another way of accounting for intensional phenomena is found that does not require the use of mysterious things like possible worlds, then, by
Occam's Razor, we should dispense with their use.
However, although alternative theories of intensionality have been suggested, none appear so far to have the scope and simplicity of the possible worlds approach and so this is the one that will be adopted here to provide an account of modality (and other intensional phenomena).
9.3.1

Simple modality

Some examples of modal sentences containing the modal adverbs necessarily and possibly and the modal verbs may and must are given in (16).
(16) a.
b.
c.
d.

Every proposition is necessarily either true or false, but not both.
Bertie possibly knows that the Morning Star is the Evening Star.
Every proposition must be either true or false, but not both.
Bertie may know the Morning Star is the Evening Star.

There are a number of different types of modality and so there are a number of different ways in which the necessity and possibility in the sentences in (16) may be taken.
Some different types of modality will be discussed in the next section, but here we will concentrate only on logical necessity and possibility: that is to say, necessity
270",288,270,9 Possible Worlds,No info,No info,possible world propositional connective truthconditional meaning connective truth table line different situation regard truth falsity formula truth value situation complex formula connective logician tend talk different situation possible world term leibniz world actual world possible world leibniz right possible world way intensional model ontological primitive set world individual entity time temporal semantics occam razor state postulation different construct state entity entia sunt multiplicanda praeter necessitatem account existence opaque context extensional semantics individual time semantic account expression postulation primitive time temporal semantics adoption primitive world mysterious le appealing ontological status possible world subject heated philosophical debate intention possible world theoretical ontological status similar mathematical construct linguist ass usefulness general aim semantic theory use possible world account opaque context clear precise fashion help meaning relation different opaque sentence adoption theory course way intensional phenomenon use mysterious thing possible world occam razor dispense alternative theory intensionality none scope simplicity possible world approach provide account modality intensional phenomenon simple modality example modal sentence modal adverb modal verb true false bertie morning star evening star proposition true false bertie morning star evening star number different type modality number different way necessity possibility sentence different type modality next concentrate logical necessity possibility necessity
270,"Introducing other worlds and possibility that have to do with truth or falsity within a logical system.
We may say that a formula is necessarily true (or false) in a logical sense (or alethic sense from the Greek aletheia meaning 'truth'), if the system of logic used ensures that a modal formula has to be true (or false), whatever model it is being interpreted with respect to.
On the other hand, possibly true (or false) formulae are just those formulae that the logic does not define as necessarily false (or true).
Thus, we may follow tradition and divide up the set of all formulae not only into true and false but also into contingent and non-contingent as represented in the diagram in (17) where the box
(17)

Contingent and non-contingent propositions true non-contingent false contingent non-contingent represents the set of all formulae.
The set of necessarily true formulae thus consists of all the non-contingent truths while the set of necessarily false formulae consists of the non-contingent falsehoods.
Possibly true formulae are all those formulae that are not non-contingently false, i.e.
all non-contingently true formulae plus all the contingently true and false ones.
Formulae are possibly false if they are non-contingently false or contingently true or false.
This is shown in the diagram in (18) on the following page.
Under this interpretation of necessity and possibility, we may say that sentences like those in
(16.a) and (16.c) express true propositions if (and only if) the formula translating the sentence Every proposition is either true or false, but not both is amongst the set of non-contingently true formulae.
On the other hand sentences like (16.b) and (16.d) express true propositions if (and only if) the sentence Bertie knows that the Morning
Star is the Evening Star translates into a formula that is not amongst those that are necessarily false.

271",289,271,9 Possible Worlds,No info,No info,world possibility truth falsity logical system formula true false logical sense alethic sense greek aletheia meaning system logic modal formula true false model respect hand true false formula formula logic define false true tradition divide formula true false contingent diagram box contingent proposition true false contingent formula true formula truth false formula falsehood true formula formula false true formula true false formula false false true false diagram page interpretation necessity possibility sentence true proposition formula translating sentence proposition true false true formula hand sentence true proposition sentence bertie morning star evening star formula false
271,"9 Possible worlds
(18)

Necessary and possible propositions necessarily true possibly true possibly false necessarily false

The fact that the interpretation of sentences expressing possibility and necessity may be defined in terms of their non-modal counterparts implies that these two concepts may be represented as operators like the tense and aspect operators of
Chapter 8, an analysis that also reflects the fact that the adverbs necessarily and possibly axe sentential modifiers.
We may therefore introduce two logical operators:
• translating necessarily or it is necessary that and o translating possibly or it is possible that.
We may also associate English sentences containing the modal verb may with formulae containing o and those containing the verb must with formulae containing • (but see Chapter 10).
Possible worlds can be used to provide a formal definition of the semantics of these two operators.
To do this, a set W of possible worlds is introduced into models, which (if tense is ignored for the moment) thus consist of an ordered triple « A,F,W».
A is a set of entities, as before, W is a set of possible worlds and the denotation assignment function, F, assigns an extension to each constant in every world in W. An expression is thus interpreted with respect to a model, M, an assignment of values to variables, g, and a possible world, wn (just as in a semantics with tense an interpretation refers to an interval of time).
Thus, if ty is a formula, then its interpretation with respect to M, g and wn, i.e. [<|>]M*™, is the truth value of (() at w n .
If
<(> is contingent, then the value of [(|)]M gwn may be different from [((>]M,g,wm where wm is some member of W other than W,,.
We will not go into details of the translation and interpretation procedure for formulae in models with possible worlds at this point, but in order to illustrate how this is done let us consider the interpretation of the formula laugh '(fiona') with respect to a very simple model, M9.
In this model, there are five entities, two men, two women and a dog which are associated with the same logical name in each of the four worlds in the model, i.e. jo\ bertie\ ethel\ fiona' and Chester\ respectively.
The only predicate we are interested in is laugh' and both Jo and Fiona are laughing in one of the worlds (wO, only Chester is laughing in another (w2), no-one is laughing in a third
(w3) and everyone is laughing in the last (w4).
This model is formally set out in (19).
272",290,272,9 Possible Worlds,No info,No info,possible world necessary possible proposition true true false false fact interpretation sentence possibility necessity term counterpart concept operator tense aspect operator analysis fact adverb sentential modifier logical operator necessary translating possible english sentence modal verb verb possible world formal semantics operator possible world model tense moment triple entity possible world denotation assignment function extension constant world expression respect model assignment value variable possible world semantics tense interpretation interval time formula interpretation respect truth value contingent value gwn different member detail translation interpretation procedure formula model possible world point order interpretation formula laugh fiona respect simple model model entity men woman dog logical name world model fiona interested laugh fiona world chester third everyone last model
272,"Introducing other worlds
(19)

M9 = «{MAN1, MAN2, WOMANX, WOMAN2, DOG},
F9(jo') = {<w1,MAN1>, <w2,MAN1>, <w3,MAN1>, <w4,MAN1>},
F9(bertie') = {<W!,MAN2>, <w2,MAN2>, <W3,MAN2>, <w4,MAN2>},
F9(ethel') = {<w1,WOMAN1>, <w2,WOMANt>, <w3,WOMAN1>,
<w 4 ,WOMAN 1 >},
F9(fiona') = { ^ .
W O M A N ^ , <w2,WOMAN2>, <w3,WOMAN2>,
<w 4 ,WOMAN 2 >},
F9(chester') = {<w t ,DOG>, <w2,DOG>,< w3,DOG>, <w 4 ,DOG>},
F 9 (laugh') = {<w1,{MAN1,WOMAN2}>, <w 2 ,{DOG}>, <w 3 ,0>,
<w4, {MANXMAN* WOM AN,,WOM AN2 ,DOG} >},
{W!,W 2 ,W 3 ,W 4 }»

As mentioned above, formulae are now interpreted with respect to a particular world, the reference world, just as they are to particular times in a temporal model.
(We could also, if necessary, select a particular world, say Wi, to represent the actual world which may function as the base reference point in the same way as the moment of utterance in Chapter 8.)
Constants have the extension they are assigned by F at the reference world and the values of function-argument structures are computed from the extension of the function and applied to that of the argument at the reference world.
Thus, to compute the value of laugh'(fwna') at the world w b i.e.
[laugh '(fiona ^JM^W^ w e take the value of laugh' with respect to M 9 and W! and apply it to the value of fiona' with respect to the same model and world, i.e.
[laugh ']M9>&<wl(\fiona *]M9'8-wl).
Because laugh' is a constant, [laugh ']M9'g-wl is determined by taking the value of F9( laugh') at W! which can be written as F9(laugh ')(wi), because the value of F(ot) is a set of ordered pairs of worlds and extensions, i.e. a function from the former to the latter.
The value of ¥9(laugh')(wi) is, according to (19), the
(characteristic function of the) set {MAN l9 WOMAN 2 }.
Since [fiona']M9&""\
V9(fiona')(yri\ is WOMAN, and WOMAN, is a member of the set {MAN1?
WOMANJ, the formula laugh '(fiona') is true with respect to M 9 and w2.
On the other hand, this formula is not true in worlds w2 and w3, because WOMAN 2 is not in the extension of laugh' in either of these worlds, as can be seen from the model in (19).
Thus, a model containing possible worlds can provide characterisations of different situations, in some of which Fiona is laughing and in some of which she isn't.
Now we return to the interpretation of modal formulae.
Because non-contingently true (i.e. necessarily true) formulae are true by virtue of the logical system used, they are true in every (logically) possible world, just as necessarily false formulae are false in every (logically) possible world.
We can therefore define the truth-conditions of a formula containing the operator Dby looking at the truth value of the formula without the operator in every world.
Only if the latter is true in every world is the modal formula with • be true.
Hence, the truth-conditions of EH are defined as in (20).
(20)

| is a formula then [D(|)]M<8'wn is 1 iff [§]M* wm is 1 for all wm in W.
If <>

For example, given (20), the formula D( laugh'(fwna')) is true in world, w h if (and only if) laugh '(fiona') is true in all worlds in the model M9.
Since there is at least one world (in fact, there are two) in which Fiona is not laughing, [•(laugh '(fiona f))]^^i is false.
On the other hand, the disjunction of this formula with its negation,
Dflaugh'(fwna') v -laugh'(fwna')) is true with respect to M9, g and w, because
273",291,273,9 Possible Worlds,No info,No info,world womanx dog bertie ethel womant woman fiona woman chester dog dog dog dog laugh dog manxman wom dog formula respect particular world reference world particular time temporal model necessary particular world actual world base reference point way moment utterance constant extension reference world value structure computed extension function argument reference world compute value laugh world laugh fiona value laugh respect value fiona respect model world laugh laugh constant laugh value laugh laugh value pair world extension function former latter value laugh characteristic function man woman fiona fiona woman woman member womanj formula laugh fiona true respect hand formula true world woman extension world model model possible world characterisation different situation fiona return interpretation modal formula true true formula true virtue logical system true possible world false formula false possible world define formula operator dby truth value formula operator world latter true world modal formula true formula formula laugh true world laugh fiona true world model least world fact fiona laughing laugh fiona false hand disjunction formula negation dflaugh fwna true respect
273,"9 Possible worlds laugh'(fiona') v -laugh'(fiona') is true in every world (as can be shown by looking at the truth table for/? v -p which yields the value 1 for all possible values of/?).
Logically possibly true formulae, as we have seen, consist of all the necessarily true formulae plus all other contingent formulae, whether true or false.
In fact, the possibly true formulae only exclude those that are necessarily false, i.e. those that can never be true.
Translating this into a possible worlds context we can define a formula
<x|) as being true if, and only if, it is not false in every possible world, i.e. that it is true in some possible world.
Therefore, we define the truth-conditions for possibility as in
(21).
If § is a formula, then [o<|)]M'8'wn is 1 iff [c|)]M-8'wm is 1 for some wm in W.

(21)

Given this definition, the formula o(-laugh'(fiona')) translating the sentence It is possible that Fiona doesn 't laugh is true with respect to M 9 and Wi, because there is a world, w2, in which -laugh'{fiona') is true.
On the other hand, the conjunction of this formula with its positive counterpart, o(-laugh '(fiona') & laugh '(fiona')), is false because there is no world in which (-laugh '(fiona') & laugh '(fiona')) is (or could be) true.
Exercise 9.1:
Which of the following formulae are true in world Wi with respect to the model M9?
i.
ii.
iii.
iv.
v.
vi.

D~(laugh' (Chester')).
o(~(laugh'(chester')) —» laugh'(jo')).
-(Dlaugh'(chester')).
~(o(laugh'(jo') -> -(laugh'(jo')))).
o~(laugh' (fiona')).
~(olaugh' (fiona')).

Do the truth values of these expressions change depending on which world acts as the reference world?
Explain your answer.

There are a number of important entailment rules that are valid in this semantics for modal formulae that also appear to be intuitively valid for the English sentences they are intended to translate.
In the first place, the semantics for • and o involve quantification over possible worlds and so the entailment rules defined for the logical quantifiers have counterparts in this modal logic.
Necessity is interpreted in terms of universal quantification over worlds, and a version of the rule of universal instantiation, given in Chapter 7, is valid for all worlds in all models.
This rule is given in (22.a) and allows one to infer the truth of a formula $ from the truth of the formula Q().
If we treat formulae as denoting functions from possible worlds to truth values, then the validity of (22.a) follows from that of the corresponding first order quantified formula in (22.b) for all worlds wm.
It should, however, be clear without
(22.b) that if some formula is necessarily true (true in every possible world), then it is true in any named world.

274",292,274,9 Possible Worlds,No info,No info,possible world fiona fiona true world truth table yield value possible value true formula true formula contingent formula true false fact true formula true possible world context define formula true false possible world true possible world possibility formula formula fiona translating sentence possible fiona true respect world fiona true hand conjunction formula positive counterpart fiona laugh fiona false world fiona laugh fiona true exercise formula true world respect model laugh chester laugh chester laugh dlaugh chester laugh laugh laugh fiona olaugh fiona truth value expression change world act reference world answer number important entailment rule valid semantics modal formula valid english sentence translate first place semantics quantification possible world entailment rule logical quantifier counterpart modal logic necessity term universal quantification world version rule universal instantiation valid world model rule infer truth formula truth formula treat formula function possible world truth value validity first order formula world clear formula true true possible world true world
274,"Introducing other worlds
(22) a.
b.

Q|>-><|>.
V w [<Kw)] - > (Kw m ).

Logical possibility involves existential quantification over worlds and so the rule in
(23.a) is valid for all models and worlds.
Again this may be seen as a version of existential generalisation indicated in the formula in (23.b), where wm is any named world.
Intuitively, this too is valid, because if something is true at some named world, then it must be possibly true (nothing actually true can be necessarily false).
(23) a.
b.

<J> —> <><>.
(t>(wm) - > 3w [<Kw)].

Other rules that are valid in the current logic are shown in (24) to (27) where each formula is followed by examples in English plus their schematic translations to illustrate their intuitive validity.
(24) and (25) show the interdefinability of o and D, while (26) shows that impossible formulae are those that are necessarily false and
(27) shows that possibly false formulae are those that are not necessarily true.
(24) a.
b.
c.
(25) a.
b.
c.
(26) a.
b.
c.
(27) a.
b.
c.

O|)<-> ~o~<|>.
Fiona must be laughing or not laughing,
•(laugh'(fiona') v -laugh'(fiona')).
It is not possible that Fiona isn't laughing or not laughing.
~o~(laugh'(fiona') v -laugh'(fiona')).
<x|> <r>

Fiona may be laughing, olaugh'(fiona').
It is not the case that Fiona is necessarily not laughing,
-•-laugh'(fiona').
~O(() <->
It is not the case that Fiona may be laughing,
-olaugh'(fiona').
It must be the case that Fiona is not laughing,
•-laugh'(fiona').
o~<J) <-> -Of).

It may be the case that Fiona isn't laughing.
o~laugh'(fiona').
It is not the case that Fiona must be laughing,
-•laugh'(fiona').

Exercise 9.2:
Explain why the semantics given for • and o guarantees that the rules in (24) to (27) are valid.

275",293,275,9 Possible Worlds,No info,No info,world logical possibility existential quantification world valid model world version existential generalisation formula world valid true world nothing true false rule valid current logic formula example english schematic translation intuitive validity show interdefinability show impossible formula false show false formula true fiona laugh fiona fiona possible fiona laughing laugh fiona fiona fiona fiona fiona fiona fiona fiona laughing fiona fiona fiona fiona exercise semantics guarantee rule valid
275,"9 Possible worlds
The interpretation of necessity proposed above also has the desired property that it guarantees that the substitution of extensional equivalents is not valid in this context.
Recall the invalid inference pattern in (3), repeated as (28).
A schematic translation of this inference pattern appears in (29) where ms' is used for the translation of the Morning Star and es' for that of the Evening Star.
(28) a.
b.
c.

Necessarily, the Morning Star is the Morning Star.
The Morning Star is the Evening Star.
Therefore, necessarily, the Morning Star is the Evening Star.

(29) a.
b.
c.

D(ms'=ms').
ms' = e s \
Q m s ' = es').

The inference pattern set out above is invalid in the terms of modal logic because the first premiss and the conclusion have different truth-conditions.
(29.a) is true, as we have seen, relative to a model M and world wn if, and only if, ms' = ms' is true in every possible world in M. Since every constant is, by the definition of identity, necessarily identical to itself, this formula is true of any set of possible worlds.
(29.b), on the other hand, is true if and only if two different constants happen to extensionally denote the same entity.
Although the premiss in (29.b) asserts that it is true that two different constants do denote the same entity, it is true non-modally, i.e. only with respect to some specified world (the actual one).
Since it is not a logical impossibility that two different constants extensionally denote different things, there must be some logically possible world in which (29.b) is false.
Hence, (29.c) must be false in a model that contains all logically possible worlds, i.e. in any model likely to provide an adequate interpretation for any natural language.
The truth of (29.c) thus does not follow from the truth of the premises in (29.a) and (29.b).
The putative inference pattern in (28) is set out in (30) in terms of the truth-conditions of the expressions in (29).
From this it is easy to see that (29.a) and
(29.c) have different truth-conditions and that therefore (28.c) does not follow from
(28.a) and (28.b).
We have, therefore, provided a semantics that ensures that extensional substitution into one of the opaque contexts noted in Section 9.1 is not valid.
(30) a.
b.
c.

9.3.2

[Qns' = ms'] M 8 wn is 1 iff [ms' = ms']M'8iWm in all wm e W, i.e. if [ms']M'8'wm is identical to [ms']M«wm in every possible world.
[ms' = es'] M * wn is 1 iff [ms'] M * wn is identical to [es'] M * wn .
[dies' = ms']M'8'wn is 1 iff [es' = ms'] M * wm in all wm e W, i.e. if [ms'] M * wm is identical to [es']Ms-wm in every possible world.
Accessible worlds

In models more satisfactory than the simplistic M 9 , the set of worlds would include all the logically possible worlds, i.e. a set of worlds in which each non-contradictory formula is true in at least one world.
This has the consequence that every formula that is not a logical falsehood is possibly true and thus every sentence in (31) is associated with a true formula in some appropriate model.

276",294,276,9 Possible Worlds,No info,No info,possible world interpretation necessity property guarantee substitution extensional equivalent valid context recall invalid inference pattern schematic translation inference pattern translation morning star evening star morning star morning star morning star evening star morning star evening star inference pattern invalid term modal logic different true relative model world true possible world constant identity identical formula true possible world true different constant denote entity premiss true different constant denote entity true respect world actual logical impossibility different constant extensionally denote different thing possible world false false model possible world model adequate interpretation natural language truth follow truth premise putative inference pattern term expression easy different follow semantics extensional substitution opaque context valid qns identical possible world identical identical possible world accessible world model satisfactory simplistic set world possible world world formula true least world consequence formula logical falsehood true sentence true formula appropriate model
276,"Introducing other worlds
(31) a.
b.
c.
d.

The Conservative Party might not win a fifth term of office in 1997.
Rabbits may be robots from Mars.
Snow may be a black sticky substance, hot to touch.
A tree may be an air-breathing quantifier that lives at the bottom of the sea on a diet of logic textbooks.

Although all the sentences in (31) describe situations that are logically possible, not all of them are as likely as the others.
For example, (31 .a) is much more likely than
(31.b) and (31.d) is completely unlikely.
Indeed, in the latter case the English word tree appears to have lost all of the properties generally associated with trees in the actual world and one could question whether a speaker asserting (31.d) as a true statement in some possible world was actually speaking English.
Because of such differences in likelihood, the notion of possibility (and necessity) might be taken to be relative to a particular world and not absolute for all worlds.
This notion of the relativity of modality can be defined in terms of a relation, R, of accessibility (or alternativeness) between possible worlds.
A world wm is thus R-accessible from another world wn, if, and only if, wnRwm is true (i.e. if wn stands in relation R to w,n) in which case wm is a possible alternative to wn.
The relation, R, thus imposes structure on the set of possible worlds, as the precedence relation, <, imposes structure on the set of possible times, T, in temporal models.
The relations R and <, however, generally have different properties from < For example, unlike <, R is not usually transitive so that if wJRWm and w,nRwo it is not necessarily the case that WnRwo.
R is, however, often reflexive, so that WnRwn holds.
The actual properties of R depend on the type of accessibility relation being modelled and thus no independent restrictions are put upon its definition.
The introduction of accessibility relations into the model allows possibility and necessity to be redefined in such a way as to refer only to worlds that are accessible to the reference world and not to every world in the model.
This relativisation of modality to certain sets of worlds is reminiscent of the restriction of the domain of quantification to pragmatically determined context sets discussed in Chapter 6 with respect to definiteness, except that Ris assumed to be given in the model itself, rather than by the pragmatics.
The truth-conditions for o and • relativised to accessible worlds are given in (32) where models contain a set of worlds plus an accessibility relation as well as a set of entities and a denotation assignment function, i.e. M =
«A,F,W,R».
(32) a.

If <(> is a formula, then [O|)]M'8<wn is 1 iff [ty]**™ = 1 for all wm e W where
WnRw m .
b.

If <}> is a formula, then [oc()]M'8'wn is 1 iff [<()]M'g'wm = 1 for some w m 6 W where

There are many different sorts of accessibility relation that may be defined over the set of possible worlds and these may yield different interpretations for modal formulae.
Where logical necessity and possibility are involved, R relates all worlds that conform to the system of logic chosen.
By (32), a formula that is logically necessarily true is one which is true in all logical worlds, but not in worlds where the logical structure breaks down.
Whether the set of possible worlds should include worlds that do not conform to logical rules of inference like conjunction elimination
277",295,277,9 Possible Worlds,No info,No info,world conservative party fifth term office rabbit mar snow sticky substance hot touch tree life bottom sea diet logic textbook sentence situation possible likely others unlikely latter english word tree property tree actual world speaker true statement possible world english difference likelihood notion possibility necessity relative particular world absolute world notion relativity modality term relation accessibility alternativeness possible world world world wnrwm true relation possible alternative relation structure possible world precedence relation structure possible time temporal model relation different property transitive wjrwm nrwo reflexive wnrwn actual property depend type accessibility relation independent restriction accessibility relation model possibility necessity way refer world accessible reference world world model relativisation modality certain set world reminiscent restriction domain quantification context respect definiteness assumed model pragmatic accessible world model contain set world accessibility relation entity denotation assignment function formula wnrw formula many different sort accessibility relation possible world different interpretation modal formula logical necessity possibility world conform system logic formula true true logical world world logical structure break possible world world logical rule inference conjunction elimination
277,"9 Possible worlds is a matter of debate, but there are more interesting accessibility relations that do properly discriminate between logically possible worlds.
One such relation is that defined by the sense relations amongst words, such as those discussed in Chapter 7.
We saw there that word meaning may be partly accounted for in terms of meaning postulates that relate the extensions of different expressions within a particular language.
In a semantic theory that allows for the possibility of alternative states of affairs, the status of meaning postulates like those in (33) is unclear.
Do they constrain the extensions of predicates in all permissible models or only in the actual world in particular models?
We do not want to require all possible worlds to conform to all sense relations (thus elevating meaning postulates to the status of logical constraints) because we can, for example, happily accept talking trains and excitable cars within the space of a children's story or an adventure film.
Nor do we want to restrict sense relations to holding only in the actual world, since we could not then explain why a sentence like Colourless green ideas may sleep furiously seems to describe an empirically impossible situation.
If meaning postulates are interpreted as defining accessibility relations between worlds, however, then the anomaly associated with sentences like that just quoted or the peculiar sentence in
(31 .d) may be accounted for.
For example, if a definition of the sense relations of
English includes the statements in (33) and we interpret R to be Rs, an accessibility relation that relates worlds that conforms to these sense relations, then (31 .d) turns out to be false according to the definition of possibility in (32.b).
Any world in which this sentence expresses a true proposition fails to conform to the constraints in (33), because it requires some entity to be both abstract and not abstract, a logical impossibility.
Hence, such worlds are not accessible to the actual world and so A tree may be an air-breathing quantifier that lives at the bottom of the sea on a diet of logic textbooks is true in no world, wm, that is Rs-accessible to the reference world, i.e.
where wJRWn, does not hold.
(33) a.
b.

Vx [tree'(x) -* -abstract'(x)].
Vx [quantifier' (x) -^ abstract' (x)].

We may conceive of sense, according to the definitions of Chapter 7, as defining a complex of accessibility relations that relate worlds according to how they conform to the different sets of meaning postulates associated with different lexical items.
The sense of an expression, therefore, structures the set of worlds and makes it possible to differentiate those expressions that have the same intension.
(This is discussed further in Chapter 10.)
In this way, it is possible to give a more subtle account of the meaning of words and the sentences that contain them, one that may provide a semantic theory of figurative language in terms of possible worlds.
Be that as it may, interpreting sense relations in terms of meaning postulates that define accessibility relations enables the differentiation of likely from unlikely possibilities.

278",296,278,9 Possible Worlds,No info,No info,possible world matter interesting accessibility relation possible world relation sense relation word word meaning term meaning postulate relate extension different expression particular language semantic theory possibility alternative state affair status meaning postulate unclear constrain extension permissible model actual world particular model possible world conform sense relation meaning postulate status logical constraint train excitable car space child story adventure film restrict sense relation actual world sentence green idea impossible situation meaning postulate defining accessibility relation world associated sentence peculiar sentence sense relation english statement interpret accessibility relation world sense relation turn false possibility world sentence true proposition conform constraint entity abstract abstract logical impossibility world accessible actual world tree life bottom sea diet logic textbook true world reference world wjrwn hold tree quantifier abstract sense definition complex accessibility relation relate world different set meaning postulate different lexical item sense expression structure world possible differentiate expression intension way possible subtle account meaning word sentence semantic theory figurative language term possible world sense relation term meaning postulate define accessibility relation differentiation likely unlikely possibility
278,"Introducing other worlds
*Exercise 9.3:
Consider a language with only two (one-place) predicate constants, P and Q, and two individual constants, a and b, and a model consisting of only two elements, d and e2, a denotation assignment function, F and a set of possible worlds W.
1.

Define the set of all logically possible worlds, W, by listing the possible combinations of extensions of P and Q in this model (i.e. by defining F).
How many worlds are there?

2.

Which worlds are accessible to each other, if we add the accessibility relation Rx to the model which is defined to hold between worlds that conform to the meaning postulate Vx [P(x) —> Q(x)]?
How many worlds are no longer accessible?

3.

What are the truth values of the following expressions with respect to this model, assuming Ri accessibility?
i.
D(~P(b)v Q(b)).
ii.
«P(a) & ~Q(a)).
iii. ~O(~P(a) v ~Q(a)).
iv. ~D(P(a)vQ(a)).
While the accessibility relation on worlds imposed by sense relations may be considered central to the meaning of non-figurative English expressions, other notions of accessibility can be used to account for other sorts of modal relations that are central to what one knows or what one's obligations are.
In addition to the alethic modality discussed in the last section, philosophers also recognise epistemic and deontic modalities, amongst others.
The former expression, derived from the Classical
Greek word for 'knowledge', defines necessity and possibility in terms of states of knowledge while the second, a word derived from the Greek word meaning 'to be binding', has to do with permission and obligation.
The sentences in (34) would generally be construed epistemically, since it is likely that (34.a) is not logically true (we can conceive of worlds where room temperature is below the freezing point or above the boiling point of water) and (34.b) conveys little information from the logical point of view.
Hence, the proposition expressed by (34.a) is true if (and only if) water is wet at room temperature in every world consistent with what is (objectively) known about the temperature of rooms and about the properties of water.
Similarly, (34.b) expresses a true proposition if and only if in some world consistent with what is known about cold climates, precipitation and snow, precipitation does indeed fall as snow in cold climates.
The truth of the propositions expressed by these sentences thus does not depend on worlds in which, for example, rooms generally have a temperature of -50°C or in which water is a solid at +20oC.
(34) a.
b.

At room temperature, water must be wet.
In cold climates, precipitation may fall as snow.

279",297,279,9 Possible Worlds,No info,No info,world exercise language predicate constant individual constant model element denotation assignment function possible world define possible world possible combination extension model many world world accessible accessibility relation model hold world meaning postulate many world truth value expression respect model accessibility accessibility relation world sense relation central english expression notion accessibility account sort modal relation central one obligation addition alethic modality last philosopher epistemic deontic modality others former expression classical greek word necessity possibility term state knowledge second word greek word meaning permission obligation sentence true conceive world room temperature freezing point boiling point water little information logical point view proposition true water wet room temperature world temperature room property water true proposition world cold climate precipitation snow precipitation fall snow cold climate truth proposition sentence world room temperature water solid room temperature water cold climate precipitation snow
279,"9 Possible worlds
Epistemic modality may be interpreted as truth with respect, not to worlds consistent with what is generally known, but to worlds consistent with what an individual, speaker or hearer, knows.
Consider the two sentences in (35).
(35) a.
b.

Fiona must be drunk.
Bertie may sing at the party.

In terms of what is objectively known, the proposition expressed by (35.a) is
(probably) not true, since Fiona is drunk (at some particular time) is unlikely to be true in every world consistent with objective knowledge.
However, it can be interpreted in such a way that it is true, provided that we take into consideration the knowledge of the person who utters the sentence.
For example, according to what a speaker knows, it may indeed be necessarily true that Fiona is drunk, because she has drunk six glasses of wine and does not usually drink alcohol.
In other words, Fiona must be drunk is true epistemically, if Fiona is drunk is true in every world consistent with what is known by the speaker.
Similarly, a speaker-oriented epistemic interpretation of (35.b) requires there to be some world consistent with what is known by the speaker in which Bertie sings at the relevant party.
The two sentences in (35) are ambiguous not only according to the scope of knowledge assumed, but also according to the sort of modality intended.
On a deontic interpretation, an utterance of (35.b) asserts that Bertie is being allowed to sing at the party while an utterance of (35.a) asserts that Fiona is obliged or required to be drunk
(e.g. because she is acting in a play that requires this behaviour or is taking part in some initiation ceremony).
More formally, (35.b) is true if (and only if) there is a world that is deontically accessible from the actual world where Bertie sings at the party is true and (35.a) is true if in every world deontically accessible from ours Fiona is indeed drunk.
Exactly what deontic (or indeed epistemic) accessibility involves is a matter for the philosopher rather than the linguist, but the fact that different accessibility relations may alter the truth values of modal sentences allows us to begin to account for the different interpretations of sentences like those in (35).
Thus, the truth or falsity of modal statements depends on the different accessibility relations holding between different worlds.
These accessibility relations have an effect, not only on the truth value of a formula translating a particular sentence, but also on the inferences that can be drawn within the modal system.
For example, the entailment rule in (22.a), which allows the inference that 0 is true whenever D<|) is true, is valid only if R is reflexive (i.e. where for all worlds, w,,, wnRw is true).
As pointed out in McCawley (1981:277), in certain interpretations of moral necessity, where R is interpreted something like is morally better, or more desirable, than, R is not reflexive.
In such a modal system, we cannot infer from the truth of All children must be good that All children are in fact good, because the former sentence only requires the latter to be true in all morally more desirable worlds, of which the actual world is not necessarily one.
The definition of such relations is, therefore, very important for the interpretation of modal sentences and it is likely that an adequate semantic theory needs to contain many accessibility relations, providing a rich and complex structure to the worlds contained by any model.
Context is then required for the hearer to identify the particular relation intended by the speaker.
Despite the importance of the notion of accessibility, nothing further will be said about such relations.
The reason for this is
280",298,280,9 Possible Worlds,No info,No info,possible world epistemic modality truth respect world world consistent individual speaker hearer know sentence fiona bertie party term proposition true fiona drunk particular time unlikely true world consistent objective knowledge way true consideration knowledge person utters sentence speaker know true fiona drunk drunk glass wine alcohol word fiona true fiona drunk true world speaker epistemic interpretation world speaker bertie sings relevant party sentence ambiguous scope knowledge modality deontic interpretation utterance bertie party utterance fiona drunk acting play behaviour part initiation ceremony true world actual world bertie sings party true true world accessible fiona deontic epistemic accessibility matter linguist fact different accessibility relation truth value modal sentence different interpretation sentence truth falsity modal statement different accessibility relation different world accessibility relation effect truth value formula translating particular sentence modal system entailment rule true true valid reflexive world wnrw true pointed mccawley certain interpretation moral necessity desirable reflexive modal system truth child good child fact good former sentence latter true desirable world actual world relation important interpretation modal sentence adequate semantic theory many accessibility relation rich complex structure world model context hearer identify particular relation speaker importance notion accessibility nothing relation reason
280,"Further reading that, while particular interpretations and inferences are affected by the particular relation supposed, the general theory is not affected by which accessibility relation is assumed.
Therefore, in the next chapter, it will be generally assumed that R defines logical accessibility, unless otherwise stated.
9.4

Further reading

Referentially opaque constructions are discussed in Lyons (1981: 157- 167),
McCawley (1981:326-340), Chierchiaand McConnell-Ginet (1990:204-208), Partee, ter Meulen and Wall (1990: 403-414) and Dowty, Wall and Peters (1981: 141-146).
Frege's discussion on Sinn and Bedeutung can be found in Frege (1892) and Dummett
(1981: chs.
5 & 6) gives a useful critical (philosophical) discussion of this.
The notion of possible world is discussed at length in, for example, Lewis (1981), and, for a different point of view, Bradley & Swartz (1979).
A full logical exposition of modal logic can be found in Hughes and Cresswell (1968), but the subject is given a simple introduction in Guttenplan (1986: ch.
16), McCawley (1981: 273-296) and Allwood,
Andersen and Dahl (1977: 108-110).
The logic is discussed in the terms used in this chapter in Dowty, Wall and Peters (1981: 121-131), and Chierchia and
McConnell-Ginet (1990:213-221).
Different types of modality are discussed in Lyons
(1977: ch.
7), Lyons (1981: ch.
10) and accessibility relations are discussed in
McCawley (1981:273 ff. & ch.
11), Partee, ter Meulen and Wall (1990:414-423) and
Martin (1987: 281-295).

281",299,281,9 Possible Worlds,No info,No info,particular interpretation inference particular relation general theory accessibility relation next assumed defines logical accessibility reading opaque construction lyon mccawley chierchiaand partee ter meulen wall dowty wall peter frege discussion sinn bedeutung frege dummett chs useful critical philosophical discussion notion possible world length lewis different point view bradley swartz full logical exposition modal logic hughes cresswell subject simple guttenplan mccawley allwood andersen dahl logic term dowty wall peter chierchia different type modality lyon lyon accessibility relation mccawley partee ter meulen wall martin
281,"10 Intensional Semantics

10.1

Modelling intensions

In Chapter 9, an interpretation of the modal adverbs necessarily and possibly was presented in terms of possible worlds, but the other contexts in which extensional entailments fail were not discussed.
As proposed in Section 9.2, the general solution to the problem of referentially opaque contexts lies in the concept of intensionality, but the interpretation of modality given above was not stated in terms of this concept and it has not been made clear how possible worlds enable a formal definition of intension to be made.
Let us now remedy the situation and provide a general semantic theory for opaque contexts, thus completing our survey of formal semantic theory.
The definitions for the interpretation of modal formulae given in Chapter 9 embody the idea that formulae may be true in some worlds but not in others, i.e. that the extensions of formulae (i.e. truth values) may vary from world to world.
Furthermore, it was suggested at the end of Section 9.2 that an intension is something that picks out the extension of an expression in any state of affairs.
The intension of a formula may thus be defined as something that specifies its truth value in every state of affairs.
Equating states-of-affairs with possible worlds, we interpret the intensions of formulae as functions that map possible worlds onto truth values: functions that map a possible world onto 1 if the formula is true in that world and onto 0, otherwise.
For example, the truth values of the formula laugh '(fwna') with respect to the model
M 9 differ according to the reference world.
As can be seen from the specification of this model in (19) of Chapter 9, this formula is true in worlds Wi and w4 but false in worlds w2 and w3.
The intension of laugh '(fiona') in M 9 is thus the function that maps
Wi and w4 onto 1 and w2 and w3 onto 0, as shown in (1).
(1)

Intension of laugh'(fiona') in M9

While the truth value of two formulae may be the same in some world, their intensions may differ.
For example, both laugh '(fiona') and -(laugh'(Chester')) are true in world
Wi with respect to M9.
However, the intension of the latter is the function that maps
Wi and w 3 onto 1 and w2 and w4 onto 0, since in the latter worlds Chester does not laugh, as shown in (2.a).
Furthermore, the formula laugh '(jo') v -laugh '(jo') although again true in w h differs in intension from both the previously considered formulae, since its intension is that function which maps every possible world onto 1, cf. (2.b).

282",300,282,10 Intensional Semantics,No info,No info,intensional semantics intension interpretation modal adverb term possible world context extensional entailment fail general solution problem opaque context lie concept intensionality interpretation modality term concept clear possible world formal intension remedy situation general semantic theory opaque context survey formal semantic theory definition interpretation modal formula embody idea formula true world others extension formula truth value world world end intension pick extension expression state affair intension formula specifies truth value state affair possible world interpret intension formula function possible world truth value function possible world formula true world truth value formula laugh respect model reference world specification model formula true world false world intension laugh fiona function intension laugh fiona truth value formula intension laugh fiona laugh chester true world respect intension latter function latter world chester laugh formula laugh true differs intension formula intension function possible world
282,"Modelling intensions
(2) a.

Intension of -(laugh'(Chester')) in M 9 b.

Intension of laugh '(jo') v -laugh '(jo') in M9

As the diagrams in (1) and (2) show, interpreting the intensions of formulae as functions from possible worlds to truth values allows semantic differentiation between formulae that happen to have the same extension in some world.
Although there are some formulae that have the same intensions in M 9 (compare, for example, the intension of laugh '(jo') with (1)), but which are not true paraphrases, this is an artefact of the small scale of the model and not of the theory itself.
In principle, if a full set of logically possible worlds is incorporated into the model, it is possible using this method to differentiate the intensions of all contingently true formulae.
Intensions cannot, however, be defined solely with respect to possible worlds.
As we saw in the last chapter, the concept of time is necessary to account for tense and aspect distinctions.
Since natural languages may combine tense and modality in particular sentences, as, for example, in Jo possibly laughed yesterday and When she has finished her degree, Fiona may apply for a job as a gardener, an adequate semantics for natural languages must also combine elements of modal and temporal interpretation.
Models should, therefore, contain both times and possible worlds, as well as entities.
Furthermore, because temporal models allow the extensions of expressions to change from interval to interval in the same way that modal models allow them to vary from world to world, our semantic models must allow extensions to vary along two dimensions: temporal interval and possible world.
Thus, we may think of extensions as being defined for a particular world at a particular time.
In other words, extensions are defined for a particular co-ordinate or index consisting of a possible world, wn, and an interval of time, i, i.e. with respect to an ordered pair
<wn,i>.
If one of the co-ordinates with respect to which an expression is interpreted changes then the extension of that expression may change.
Hence, [oc]Mgwni, the extension of an expression a at the index <w m i> with respect to model M and variable assignment g, may differ from [oc]M-8-wnJ or [a]M.g.wm.« where wn differs from wm and i differs from j .

283",301,283,10 Intensional Semantics,No info,No info,intension intension laugh chester intension laugh diagram show intension formula function possible world truth value semantic differentiation formula extension world formula intension intension true paraphrase artefact small scale model theory principle full set possible world model possible method differentiate intension true formula intension possible world last concept time necessary account tense aspect distinction natural language tense modality particular sentence yesterday degree fiona job gardener adequate semantics natural language element modal temporal interpretation model contain time possible world entity temporal model extension expression change interval interval way modal model vary world world semantic model extension dimension temporal interval possible world extension particular world particular time word extension particular possible world interval time respect pair respect expression change extension expression mgwni extension expression respect model variable assignment differs differs
283,"10 Intensional semantics
As an illustration, consider the diagram in (3) which shows the changing extensions of the predicate laugh* in four worlds across four moments of time, to give part of the intensional model Mi0.
In (3), a line indicates an interval of time and the set below the line shows the extension of laugh' at that interval.
The horizontal axis presents the different extensions for laugh' across the four moments of time within the same possible world while the vertical axis traces its extensions at the same time in different worlds.
(3) tl wl

** t2 t3 t4

• ^
{MANX} w2

-^
{DOG} w3

-*
0 w4

0

{WOMAN 2 }

{WOMAN 1 ,WOMAN 2 }

*<

•

{MAN^MAN^WOMAN^WOMAN^DOG}

If intensions are defined as functions from states of affairs to extensions, then in models with times and worlds, they must have the set of all world-time co-ordinates
(or indices) as their domain.
Thus, the intension of the formula laugh'(fiona') with respect to Mi0 is a function from pairs consisting of a world and a time to the truth values, 0 and 1.
Because laugh is an activity verb, its extension holds for all subsets of an interval over which it is defined, as we saw in Chapter 8.
Hence, we can define the intension of laugh '(fiona') in terms of its truth values at each ordered pair of world plus moment of time, as is done in (4), i.e. as a function from world/time pairs to truth values.
The intension of an expression, a, with respect to a model, M, and an assignment of values to variables, g, is written as 3[oc]M«, so 3 [laugh'(fiona')]M1°s represents the intension of the formula laugh'(fiona') with respect to M10 and g.

284",302,284,10 Intensional Semantics,No info,No info,intensional semantics illustration diagram show extension predicate laugh world moment time part intensional model line interval time set line show extension laugh horizontal axis different extension laugh moment time possible world vertical axis trace extension time different world manx dog woman woman woman intension function state affair extension model time world index domain intension formula laugh fiona respect function pair world time truth value laugh activity verb extension subset interval define intension laugh fiona term truth value pair world moment time function pair truth value intension expression respect model assignment value variable laugh fiona intension formula laugh fiona respect
284,"Modelling intensions sflaugh' (fiona')] M10'«

(4)

Exercise 10.1:
Diagram the intensions of the following formulae with respect to M10 (assuming that jo\ fiona' and Chester' have the same extensions in all worlds and times, i.e. MANi,
WOMAN2 and DOG, respectively): i.
ii.
iii.
iv.
laugh'(jo').
laugh'(chester') v laugh'(jo'), laugh'(fiona') & -laugh'(fiona').
laugh'(fiona') —»laugh'(jo').

It is possible to add more co-ordinates to the indices in terms of which intensions are defined.
For example, it is often the case that locations are relevant to the interpretation of sentences.
Thus, if the sentence // is raining is uttered, it is usually interpreted as an assertion that it is raining at the place in which the speaker is situated
(at the present time in the actual world), not that it is raining everywhere.
Hence, we might expand our semantic space to include locations and introduce into our models a set of places together with some relation of proximity.
Furthermore, the fact that / and you are indexical (or deictic) expressions, like here and there or tense, indicates that co-ordinates for speaker and hearer should be added to the model.
Indeed, as
285",303,285,10 Intensional Semantics,No info,No info,intension sflaugh fiona exercise diagram intension formula respect fiona chester extension world time mani laugh laugh chester laugh laugh fiona fiona laugh fiona laugh possible index term intension location relevant interpretation sentence sentence uttered assertion raining place speaker present time actual world semantic space location introduce model place relation proximity indexical deictic expression tense speaker hearer model
285,"10 Intensional semantics
Lewis (1972) points out, there are many other candidates for co-ordinates in defining an adequate semantics for any human language.
Exactly what ones should be included is a matter for debate and empirical research, but at a minimum we would need worlds, times and places.
In this book, however, we will utilise indices that consist only of worlds and times.
The addition of a topographical co-ordinate will only complicate matters unduly without altering the basic properties of the semantic system.
In principle, any (finite) number of co-ordinates may be added to the model theory presented below, allowing more and more contextual information to be included in the semantics, but without altering the fundamental structure of the theory.
The semantics of the modal operators can now be redefined in terms of the intensions of the formulae they have scope over, i.e. as functions from functions from co-ordinates to truth values to truth values.
Since functions that map some set of entities into the truth values are characteristic functions of subsets of those entities, the intensions of formulae may be thought of as sets of indices.
Hence, we can define the semantics of necessity and possibility in terms of functions from (the characteristic functions of) sets of world/time pairs to truth values.
In the definitions in the previous chapter, Q|> is true (with respect to a model and a reference world) if, and only if, <>
| is true in all accessible worlds in the model. o<|), on the other hand, is true if, and only if, (() is true in some accessible world.
The necessity operator can, therefore, be interpreted as that function that maps the set of all co-ordinates onto 1 and all other subsets of W x I onto 0 and the possibility operator is that function that maps the null set of co-ordinates onto 0 and all other subsets onto 1.
In order to differentiate this approach to necessity and possibility from the earlier approach, we will not use the modal operators, • and o, but translate the words necessarily and possibly directly into necessarily' and possibly'.
These expressions denote the functions over the intensions of formulae (over 3[(|)]M-8) which are spelled out in (5) where I is the set of all temporal intervals defined on a set of moments T, [cc]M.g.wiu is the extension of a with respect to M, g and index <wn,i> (see Section 10.1.2) and 3[(t)]M<<wn,i>) is the value of the intension of <|) at the index <wn,i>.
(5) a.
b.

[necessarily']M*8wni is that function which maps the intension of a formula
(j) onto 1 iff s[(|)]M8(<wm,i'>) is 1 for all wm e W such that wnRwm and i e
I (i.e. where 3[<f)]M-8 is the set of all possible world/time pairs),
[possibly'l 1 ^^ is that function which maps the intension of a formula (j) onto 1 iff 3 [(|>]M8(<wm,i'>) is 1 for some wm e W such that WnRw™ and some
V e I (i.e. where 3[<()]M'8 is not null).

A question that arises with the interpretation of necessity within models which have times as well as possible worlds is whether to interpret it as necessity for all times and worlds, as in (5), or for particular times in all worlds.
Should we analyse a sentence like Necessarily, the Morning Star is the Morning Star as expressing a true proposition if The Morning Star is the Morning Star is true always and in all situations or whether it is true now in all situations (and therefore perhaps false at some other time)?
Although it would seem that with sentences like the above it is clear that the first interpretation is intended, with sentences containing modal verbs interpreted non-alethically, e.g. Fiona must be singing, it would seem preferable to have an interpretation in which the proposition expressed by the sentence comes out as true if
Fiona is singing is true in every deontically or epistemically accessible world only at
286",304,286,10 Intensional Semantics,No info,No info,intensional semantics lewis many candidate adequate semantics human language matter debate empirical research minimum world time place book utilise index world time addition topographical complicate matter basic property semantic system principle finite number model theory contextual information semantics fundamental structure theory semantics modal operator term intension formula scope function function truth value truth value function map set entity truth value characteristic function entity intension formula index define semantics necessity possibility term function characteristic function pair truth value definition previous true respect model reference world true accessible world model hand true true accessible world necessity operator function map subset possibility operator function map null subset order differentiate approach necessity possibility approach use modal operator translate word expression denote function intension formula temporal interval moment extension respect value intension function map intension formula wnrwm possible pair function map intension formula null question interpretation necessity model time possible world interpret necessity time world particular time world analyse sentence morning star morning star true proposition morning star morning star true situation true situation false time sentence clear first interpretation sentence modal verb fiona singing preferable interpretation proposition sentence true fiona true accessible world
286,"Modelling intensions the time of utterance but not at all past and future times in those worlds.
Montague adopts, without argument, the interpretation of necessity in (5.a).
However, while this seems to work as an analysis of the adverb, necessarily, the modal verb must appears to require the less strict interpretation given in (6.a) which specifies that a formula must'(§) is true as long as <|) is true in all worlds at the appropriate reference time.
Thus, according to (6.a) [must'(Impf(sing '(fwna ')))]u*.™i is true provided that [(Impf
(sing'(fiona')))]M^mi is true in all worlds wm at i.
A parallel interpretation for the modal verb of possibility may is given in (6.b).
This differs from that given for possibly in (5.b) in that a formula like may'(Impf (sing'(fwna'))) (translating Fiona may be singing) is true as long as there is at least one world accessible to the reference world in which Fiona is singing at the time of utterance.
Worlds in which she is singing at other times are irrelevant.
Hence, while (6.a) gives a less restrictive form of necessity than (5.a), the definition of possibility in (6.b) is more restrictive than that in (5.b).
(6) a.
b.

[must']M8'wna is that function which maps the intension of a formula ty onto
1 iff 3[<t)]M-K<wm,i>) is 1 for all wm e W such that wnRwm.
[may']M8wni is that function which maps the intension of a formula <>
| onto
1 iff s[<|)]M*(<wn,i>) is 1 for some wm e W such that WnRw,,,.

Treating modal expressions as functors over intensional expressions in this way has the extremely desirable consequence that Leibniz' Law fails to be valid.
The reason for this, of course, is that the intensions of formulae may differ even if their extensions happen to be the same at some index.
Thus, the functions denoted by necessarily\ possibly \ must' and may' may map the intension of one formula, <(), onto true (or false) but that of another, \j/, onto the opposite truth value, where s[<t>]Ms is not identical to 3[\j/]M8.
As a concrete example, consider the interpretations of Fiona must be laughing and Jo must be laughing with respect to M10 and the index <W!,[t2]>.
Suppose that the accessibility relation of the model is one where w3 and w4 are both accessible to Wi which is accessible to itself, but w 2 is not accessible to w b i.e. where
R is {<Wi,w1>,<Wi,w3>,<Wi,w4>}.
The interpretation of must' in (6.a) entails that
[must']M8wl tt2i is that function that maps a function from indices to truth values onto
1 if, and only if, that function maps the indices <Wi,[t2]>, <W3,[t2]>, and <w4,[t2]> onto 1, i.e. it picks out all those worlds accessible to w, at time [t2].
Thus,
[must']M*vl-iaKz[laugh'(fiona')]M*) is true if, and only if, s[laugh'(fiona')]M* applied to each of these indices yields the value 1.
Looking at the diagram in (4) which represents the intension of laugh '(fwna'), we can see that this is the case.
It is true that
Fiona is laughing in all worlds accessible to Wi at the appropriate time [tj.
Hence,
Fiona must be laughing is true.
However, although it is true that Jo is laughing is true in world wt at time [t2], it is not the case that Jo must be laughing is true at that index.
This is because the function z[laugh'(jo')]u* maps the index <w3,[t2]> onto 0, as can be checked by referring to the diagram in (3) showing the denotation of laugh' in M10, and so Jo is laughing is not true in every accessible world at time [t 2 ].
Hence, s[laugh'(jo')]M& differs from z[laugh'(fwna')]M& and so must'(laugh'(jo')) is false while must '(laugh '(fiona')) is true, despite the fact that Jo and Fiona are both laughing at the same reference index.
The fact that two expressions are extensionally equivalent at some index has no bearing at all on their intensional equivalence and so while substitution of the
287",305,287,10 Intensional Semantics,No info,No info,intension time utterance future time world montague argument interpretation necessity work analysis adverb modal verb le strict interpretation specifies formula true long true world appropriate reference time sing fwna true impf sing fiona true world parallel interpretation modal verb possibility formula sing fwna fiona true world accessible reference world fiona singing time utterance world time irrelevant le restrictive form necessity possibility restrictive intension formula wnrwm intension formula wnrw modal expression functors intensional expression way desirable consequence leibniz law valid reason course intension formula extension function intension formula true false opposite truth value identical concrete interpretation fiona respect accessibility relation model accessible accessible accessible interpretation map function index truth value function map index world accessible time fiona true laugh fiona index yield value diagram intension laugh true fiona world accessible appropriate time fiona true true true world time true function laugh diagram denotation laugh true accessible world time laugh differs laugh fwna false fiona true fact fiona reference fact expression equivalent bearing intensional equivalence substitution
287,"10 Intensional semantics expressions preserves truth in extensional contexts, there is no guarantee that it does in intensional ones.
As we saw at the end of Chapter 9, the inference pattern in (3) of that chapter fails because the extensional equivalence of the Morning Star with itself is necessary while that between the Morning Star and the Evening Star is contingent.
The sentences The Morning Star is the Morning Star and The Morning Star is the
Evening Star differ in intension and so are not intersubstitutable in intensional contexts.
Leibniz' Law is thus valid only in extensional contexts and fails for all expressions that create intensional contexts.
Thus, we must revise the definition of the
Law of Substitution in (2) of Chapter 9 to exclude explicitly substitution into intensional contexts.
These contexts also include the scopes of the past and future tense operators, because the extensions of expressions may vary over time and so those that are extensionally equivalent at one interval of time may not be at others.
Thus, the truth of (8.c) does not follow from the truth of (8.a) and (8.b) because while
Ethel may now be the Ladies' Scottish Golf Champion, someone else could have been when Jo met the then Ladies' Scottish Golf Champion.
The revised version of the Law of Substitution is stated in (8), where the term intensional functor covers expressions like necessarily\ may' and the other opaque predicates discussed in later sections.
(7) a.
b.
c.

Jo met the Ladies' Scottish Golf Champion.
Ethel is the Ladies' Scottish Golf Champion.
Jo met Ethel.

(8)

(a = b) —»[())<-» (I)1""*] where a is not in the scope of an intensional functor or the tense operators Past and Fut.

As we will see in Section 10.2, the analysis of modal expressions given above can be generalised to all opacity creating predicates.
In this way, we can ensure that the Law of Substitution fails for the reasons shown above and we will see that this also has the effect of making the other false inference patterns noted in Section 9.1 truly invalid.
Before this can be tackled properly, however, we need to construct a metalanguage that can represent intensional expressions and provide a proper and fully explicit semantics for this language.
This will involve extending our definitions of possible types and revising the model theory of previous chapters to take account of intensions.
10.2

The intensional language LIL

In this section, we look at Montague's definition of a co-ordinate semantics for a fully typed language, called LiL, which is like LQ but with tense and modal operators as well.
First, we must revise the theory of types to take account of intensional expressions and look at how such expressions should be interpreted.
No systematic attempt, however, is made to revise the grammar fragment so far constructed to take account of intensional contexts.
From now on it is assumed that readers have the skill to see the relation between expressions in the intensional language and the English examples they are assumed to translate.
While the construction of an adequate translation algorithm from syntax to LIL is not without its problems or interest, to attempt the task here would unduly lengthen an already long book and would not particularly help the reader understand the most important matter, which is the
288",306,288,10 Intensional Semantics,No info,No info,intensional semantics expression truth extensional context guarantee intensional one saw end inference pattern extensional equivalence morning star necessary morning star evening star contingent sentence morning star morning star morning star evening star intension intersubstitutable intensional context leibniz law valid extensional context expression intensional context law substitution substitution intensional context context scope future tense operator extension expression time equivalent interval time others truth truth ethel lady scottish golf champion someone lady scottish golf champion version law substitution term intensional functor cover expression later section lady scottish golf champion ethel lady scottish golf champion ethel scope intensional functor tense operator fut analysis modal expression opacity predicate way law substitution reason false inference pattern invalid construct metalanguage intensional expression proper explicit semantics language definition possible type revising model theory previous chapter account intension intensional language lil montague semantics language lil tense modal operator theory type take account intensional expression expression systematic attempt revise fragment take account intensional context reader skill relation expression intensional language english example translate construction adequate translation algorithm syntax lil problem interest attempt task long book reader important matter
288,"The intensional language LIL semantic interpretation.
Here more than ever the choice of the syntactic framework determines the precise nature of the translation algorithm and so setting out a particular algorithm would not necessarily be helpful or enlightening.
10.2.1

Intensional expressions...

The intensional language L,L has the language of Chapter 8, Lr, as its core, but also contains intensional expressions and intensional operators.
To show that an expression is intensional, an intension operator, symbolised as A , is used and, like all operators, it is written to the left of an extensional expression.
For example, the intensional counterpart of laugh '(fiona') is Alaugh '(fiona'), that of laugh' is Alaugh \ that of fiona' is Afiona'.
As might be expected, an intensional expression like Alaugh'(fiona') denotes z[laugh'(fiona')]M*y the intension of its extensional counterpart, laugh'(fiona').
This gives the general rule for intensional expressions in (9).
(9)

If a is any extensional expression, Aoc is an intensional expression which denotes 3[ot]M-8.

Montague did not restrict the intensional operator to apply only to extensional expressions but allowed it to be recursive, thus allowing expressions like
AAA
^laugh'(fiona'), laugh'(fiona') and so on.
These expressions are not very interesting semantically, however, as they denote constant functions which pick out the same denotation for Alaugh'(fiona') or ^augh'(fiona') at every index.
Furthermore, higher order intensions appear to be of little or no use in defining the semantics of any natural language and, as we are interested only in accounting for the interpretation of natural languages, ignoring the existence of higher order intensions is justified, at least as a temporary expedient.
Parallel to the intension operator is the extension operator written as v which applies to an intensional expression a to yield an expression vot which denotes the extension of a at some index.
Thus, at any index the result of applying the extension operator to an intensional expression, Aoc, is to cancel out the intensionality, making the expression so formed, VAoc semantically equivalent to the original extensional expression a.
For example, from Alaugh'(fiona') the extensional expression
""Haugh '(fiona') can be formed which denotes at a particular index, say <w3,[t2]>, the extension of Alaugh '(fiona') at that index, i.e. z[laugh '(fiona ')]M'8(<w3,[t2]>) which is, of course, equivalent to [laugh'(fiona')]M^wXlt2].The rule for using the extension operator is given more formally in (10) and the equivalence between ~Aoc and a stated in (11) holds for all models, indices and variable assignments.
(10)

If a is an intensional expression with denotation 3[a]M«, then ""a is an extensional expression whose denotation at any index <wn,i>, fa] M '8 wni , is the value of 3[a]M«at <w,,,i> (i.e. 3[oc]MK<wn,i>)).

(11) f Aa]M.g,wn,i

=

[a]M.g,wn,i

While the identity in (11) is valid, a parallel equivalence between A~oc and a is not valid.
As no expressions of this form are considered in this book, the explanation for this will not be given and readers are invited to try to work it out for themselves; or they may consult Dowty, Wall and Peters (1981: 175-176).
289",307,289,10 Intensional Semantics,No info,No info,intensional language lil semantic interpretation syntactic framework precise nature translation particular algorithm helpful enlightening intensional expression intensional language language core intensional expression intensional operator show expression intensional intension operator operator extensional expression intensional counterpart laugh fiona alaugh fiona laugh alaugh fiona afiona intensional expression alaugh fiona denotes laugh fiona intension extensional counterpart laugh fiona general rule intensional expression extensional expression aoc intensional expression montague intensional operator extensional expression recursive expression aaa fiona laugh fiona expression interesting denote constant function pick denotation alaugh fiona fiona higher order intension little use defining semantics natural language interested accounting interpretation natural language existence higher order intension least temporary expedient parallel intension operator extension operator intensional expression yield expression vot extension result extension operator intensional expression aoc intensionality expression vaoc equivalent original extensional expression alaugh fiona extensional expression haugh fiona denotes particular extension alaugh fiona laugh fiona course equivalent laugh fiona rule extension operator equivalence hold model index variable assignment intensional expression denotation extensional expression denotation wni value identity parallel equivalence valid expression form book explanation reader try work dowty wall peter
289,"10 Intensional semantics
Because Ln. is a typed language, all intensional expressions must be assigned an appropriate intensional type.
These are derived according to the rule in (12) which introduces a type that has the symbol s as its first element.
Mnemonic for sense (after the Fregean Sinn), s is not itself a primitive type, like e and t, but is just used to indicate that a type is intensional.
The fact that s is not treated as primitive means that no expressions directly denote indices, a reflection of the fact that natural languages have no way of referring directly to such things.
(12)

Intensional types: If a is a type, then <s,a> is a type.

(12) is added to the rules defining types given in Chapter 4 and givesriseto types like those shown in (13).
Recursive application of the intensional type rule will not be used in this book, as (10) already rules out the creation of 'higher order' intensional expressions so that types like that in (13.f) do not appear in the discussions below.
(13) a.
b.
c.
d.
e.
f.
gAs in the language Ltype, and the languages based on this, LQ and Lr, complex expressions are derived by the rule of functional application, repeated in (14).
(14)

If a is an expression of type <a,b> and p is an expression of type b, then oc(p) is an expression of type a.

This rule must be strictly adhered to and caution must be taken when utilising it with expressions in intensional categories.
Since there is no type s, there are no expressions of type s and so intensional types cannot directly combine with any expressions in LIL.
In order to combine an intensional functor with an argument, it is necessary first to
'de-intensionalise' the functor by applying the extension operator,v, to it.
Thus, one cannot directly apply an intensional functor Aoc, of type <s,<a,b», to an argument p, of type a, but one can apply the extension of the functor v/va to the same argument to get the well-formed expression CAoc)(P) which, by the equivalence in (11), is semantically equivalent to cc(p).
By the general definition of types given in Chapter
4, intensional types may also appear as the argument or result types of other types.
Examples of such types appear in (13.d,e & f) and care must be exercised in combining such functors with their arguments.
Functors which have the general type
«s,a>,b> can be applied only to argument expressions that are themselves intensional, i.e. of type <s,a>.
Thus, if a is of type «s,a>,b> one cannot directly apply it to an expression p of type a.
First, the latter must be made intensional using the intension operator to form the expression AP of type <s,a> which can then be the argument of a to give oc(AP).
No problems arise in the application of functors with intensional result types of the form <a,<s,b», except that it must be borne in mind that the resulting expression is itself intensional and so may not directly combine with an argument and may only be an argument of a functor that takes an argument thathas an intensional type.
290",308,290,10 Intensional Semantics,No info,No info,intensional semantics language intensional expression appropriate intensional type rule introduces type symbol first element mnemonic sense fregean sinn primitive type type intensional fact primitive mean expression index reflection fact natural language way thing intensional type type type rule type givesriseto type recursive application intensional type rule book creation order intensional expression type discussion gas language ltype language complex expression rule functional application expression type expression type expression type rule caution expression intensional category type expression type intensional type expression lil order intensional functor argument necessary first functor extension operator intensional functor aoc type argument type extension functor argument expression caoc equivalence equivalent general type intensional type argument result type type example type care functors argument functors general type applied argument expression intensional type type one expression type latter intensional intension operator form expression type argument problem application functors intensional result type form mind expression intensional argument functor argument intensional type
290,"The intensional language LIL

Exercise 10.2:
Assuming the type assignment that follows, which of the expressions below are well-formed expressions of W?
If they are well-formed say what types they have and if not, say why not.
Type:
<s,e> e
«s,e>,t>
<e,t>
«s,t>,t>
<t,t>
«s,<e,t»,<e,t»
«e,t>,<e,t»

Expression: m bertie', fiona' change' walk', student' necessarily', possibly
~ good' happy' i.
ii.
iii.
iv.
change' (bertie').
good'(Astudent').
~CAwalk'(bertie')).
necessarily' (A((good' (Astudent' ))(fiona'))).
V.
possibly'(change'(Am)).
vi. (happy' (student' ))(vm).
vii. good' (happy' (Astudent')).
The language LIL also contains a full set of variables for each type, including the intensional types.
Formally, the set of variables of any type a is formally symbolised as Wara and particular variables of type a are formally indicated as vn,a where n is some natural number.
This notation is somewhat cumbersome, however, and certain notational conventions are usually adopted.
The conventions used in this chapter are set out in (15) and subscript numerals may be used with the various symbols where there are a number of variables of a particular type.
The symbols used to indicate variables over extensional types (e.g. JC, P, P and R) are the same as they have been in previous chapters, except for/? and q which are here given an intensional type and so symbolise variables of type <s,t> and not of type t.
(15)

Type: e
<s,e>
<e,t>
<s,<e,t»
<s,t>
«e,t>,t>
<s,«e,t>,t»
<e,<e,t»

Vanables: x, y, z.
r.
P,Q.
A.
p>q.
p.
pR.

291",309,291,10 Intensional Semantics,No info,No info,intensional language lil exercise type assignment expression expression type type expression bertie fiona change walk student good happy change bertie good astudent bertie good astudent fiona happy student vii happy astudent language lil full variable type intensional type variable type wara particular variable type natural number notation cumbersome certain notational convention convention subscript numeral various symbol number variable particular type symbol variable extensional type previous chapter intensional type symbolise variable type type type vanables
291,"10 Intensional semantics
Because LiL contains both intensional and extensional variables, the lambda operator, X, may bind intensional and extensional argument places.
The definition of lambda abstraction remains as it was given in the final form in Chapter 5 (and as it is repeated in (16.6) below), but one must again be careful to use the correct type of variable.
An extensional variable cannot be used where the position being bound is intensional, and vice versa.
For example, given the type assignments in (15) and
Exercise 10.2, Xr [change '(r)] is well-formed, because r is of type <s,e> and change' is of type «s,e>,t>, but neither Xx [change '(x)] nor Xx [change '(r)] is well-formed.
The former is ill-formed because x is of type e and so not of a type appropriate to be the argument of change' while the latter is wrong because there is no instance of the variable bound by X in the expression in its scope.
I^L also contains the logical quantifiers V and 3 which like X may bind variables of any type.
So, for example, V/? [necessarily '(p)] is a well-formed formula which asserts that all expressions of type <s,t> are necessarily true while 3A
[(good '(A))(bertie')] asserts that Bertie is a good something or, more accurately, there is some property with respect to which Bertie is good.
The identity operator = in LIL may also conjoin expressions of any type to yield a formula, as defined in (16.5).
In the rules that construct quantified formulae in (16.13) and (16.14), the universal and existential operators are operators over extensional formulae (i.e. expressions of type t) and not over intensional ones (of type <s,t>) and their outputs are again extensional formulae.
The same is true for the tense and aspect operators, Past, Fut, Pres, Perf and Impf and the propositional connectives, &, v, —>, <-> and ~.
The full definition of Lu. is given in (16) in the form of a recursive definition of what constitutes the set of meaningful expressions of a certain type.
Anything that does not conform to one of these rules is not a meaningful expression of the logic and so does not have an interpretation in the model.
(16) contains no rules for constructing modal expressions using the operators • and o, as these these have now been supplanted by their counterparts necessarily' and possibly \ as discussed in Section
10.1.
(16) a.
b.
c.
d.
e.
f.
g.
h.
i.
j.
k.
1.

292

If a is an expression of type <b,a> and p is an expression of type b, then oc(p) is an expression of type a.
If a is an extensional expression of type a, then A a is an expression of type
<s,a>.
If a is an expression of type <s,a>, then ""a is an expression of type a.
If a is an expression of type a containing a free instance of a variable u of type b, then Xu [a] is an expression of type <b,a>.
If a, P are expressions of type a, then a = P is an expression of type t.
If (|) is an expression of type t, then ~(|) is an expression of type t.
If <|), \j/ are expressions of type t, then (((> & y) is an expression of type t.
If (j>, \|/ are expressions of type t, then (cj) v \\f) is an expression of type t.
If ((), \\f are expressions of type t, then ((() —> \\f) is an expression of type t.
If (|), \\f are expressions of type t, then (((> <-> \|/) is an expression of type t.
If (j) is an expression of type t containing an instance of a free variable u of any type, then Vu [$] is an expression of type t.
If <|) is an expression of type t containing an instance of a free variable u of any type, then 3u [(()] is an expression of type t.",310,292,10 Intensional Semantics,No info,No info,intensional semantics lil intensional extensional variable lambda operator intensional extensional argument place lambda abstraction final form careful correct type variable extensional variable position intensional vice versa type assignment exercise change type change type change former type type appropriate argument change latter wrong instance variable expression scope logical quantifier variable type formula expression type true good bertie bertie good property respect bertie good identity operator lil expression type yield formula rule formula universal existential operator operator extensional formula expression type intensional type output extensional formula true tense aspect operator fut pres impf propositional connective full form recursive meaningful expression certain type conform rule meaningful expression logic interpretation model rule modal expression operator counterpart expression type expression type expression type extensional expression type expression type expression type expression type expression type free instance variable type expression type expression type expression type expression type expression type expression type expression type expression type expression type expression type expression type expression type expression type expression type instance free variable type expression type expression type instance free variable type expression type
292,"The intensional language L1L m.
n.
o.
p.
q.
10.2.2

If <> t is an expression of type t, then Past (<(>) is an expression of type t.
If 4> is an expression of type t, then Fut (^)) is an expression of type t.
If 0 is an expression of type t, then Pres (())) is an expression of type t.
If <>
| is an expression of type t, then Perf ((()) is an expression of type t.
If (j) is an expression of type t, then Impf ((()) is an expression of type t.
...
And their interpretation

Having defined the language W , into which expressions from English will now be translated, we must specify its interpretation, thus, as usual, providing an indirect interpretation of translated English expressions.
First of all, we need a definition of the sorts of denotation that expressions of different intensional types may have and then we will move on to a consideration of intensional models and the formal definition of the model theory that will interpret all expressions in LiL with respect to appropriate models.
Given the definition of an intension as a function from indices to extensions, from Section 10.1, the possible denotations of intensional types are easy to define.
In all cases, an expression with an intensional type <s,a> denotes a function from indices
(i.e. world/time pairs) to denotations of type a.
The set of all possible world/time pairs can be symbolised by the Cartesian product of the set W of possible worlds and the set I of temporal intervals defined by the set of times T. The Cartesian product of two sets A and B is written as A x B and is equivalent to the set of all ordered pairs where the first element is a member of set A and the second is a member of set B, as defined in (17).
(17)

Cartesian product: A x B = {<a,b> l a e A & b e B}.

The Cartesian product of W and I is thus, by (17), the set of all pairs of possible worlds and temporal intervals, i.e. all indices defined by the model.
The denotation of an expression of any intensional type is, therefore, taken from the set of functions from the Cartesian product of W and I to denotations associated with its associated extensional type as formally defined in (18.a) and exemplified in (18.b).
(18) a.

D<s>a> = Dawxi b.

A

{1,0}

While all intensional expressions have the same sort of formal denotation as in
(18.a), expressions of certain types have a special significance in translating expressions from a natural language like English and may be associated with particular philosophical concepts.
For example, the intensions of formulae, which are

293",311,293,10 Intensional Semantics,No info,No info,intensional language expression type expression type expression type fut expression type expression type pres expression type expression type expression type expression type impf expression type interpretation language expression english interpretation usual indirect interpretation english expression sort denotation expression different intensional type consideration intensional model formal model theory interpret expression lil respect appropriate model intension function index extension possible denotation intensional type easy define case expression intensional type denotes index pair denotation type possible pair cartesian product possible world temporal interval time cartesian product set equivalent ordered pair first element member second member cartesian product cartesian product pair possible world temporal interval index model denotation expression intensional type set function cartesian product denotation associated extensional type exemplified dawxi intensional expression sort formal denotation expression certain type special significance expression natural language english particular philosophical concept intension formula
293,"10 Intensional semantics expressions of type <s,t>, have as their denotations functions from world/time pairs to truth values, i.e. members of {0,l}WxI (cf. e.g. (4) above which gives the denotation of the expression Alaugh'(fwna') in M10).
Because such functions specify the truth value of a formula in any situation given by the model, they can be thought of as corresponding to propositions.
This captures the intuition that the proposition expressed by a sentence is that part of its meaning that provides information about the situations that can be truly described by the sentence.
The intensions of individual constants of type <s,e> are called individual concepts and denote functions from indices to the set of entities in the model, i.e.
AWx *, a function that picks out an individual entity at any index.
In M10, there are five such functions, one for each of the individual constants ethel \ jo \ bertie \ fiona' and
Chester'.
The denotation of the individual concepts of these names is, in each case, a constant function, i.e. a function that picks out the same entity at every index, i.e.
WOMANj, MANi, MAN2, WOMAN2 and DOG, respectively.
More interesting individual expressions are those that pick out different entities at different indices.
The most obvious examples of such names are titles like Queen of Scotland, President of the USSR, Mr Universe, Mayor of New York, and so on.
The extensions of these names differ from time to time and from world to world.
So, for example, while the
President of the Russian Republic in 1991 was Boris Yeltsin, in 1975 no-one bore this title and in 1995 it could refer to someone else.
Furthermore, we can think of different situations in which other people bear these titles.
So, it is possible to envisage a world in which the current Queen of Scotland is not also the current Queen of England, i.e.
Elizabeth Windsor, but a descendant of Bonnie Prince Charlie called Morag Stuart; or one in which Britain had become a republic in the 1860s, and thus where there was no current Queen of England.
The intensions of one-place predicates are of type <s,<e,t» and so denote functions from indices to sets of entities, i.e. functions in ({0,l}A)WxI.
Such functions pick out the set of all entities that are in the extension of a predicate at each index and so may be referred to as properties.
Thus, formally, the extension of the predicate red is a set of entities that are red while the property of redness is a function that specifies the extension of the predicate in every situation, i.e. Ared'.
An example of such a property is specified for the model M10 in the diagram in (3) which represents the function that picks out the set of entities that are laughing at any index.
We can follow
Montague and generalise the term property to the denotations of expressions of any type with the structure <s,<a,t» where a is any type.
Such expressions denote functions in ({0,l}Da)WxI and, because such functions pick out sets of entities of the sort denoted by expressions of type a at every index, they may be said to be properties of such entities.
Thus, expressions of type <s,<e,t» denote properties of individual entities, those of type <s,«e,t>,t» denote properties of sets, those of type
<s,«s,t>,t» denote properties of propositions, and so on.
Two-place predicates extensionally denote relations between entities, and the intensions of such expressions, of type <s,<e,<e,t>», are called relations in intension between entities, denoting functions in (({0,l}A)A)w x! .
Like the term property, this term can also be generalised to cover all expressions that denote the intensions of two-place functions, i.e. those with the type structure <s,<a,<b,t>» where a and b are any type.
Thus, expressions of type <s,«s,t>,<e,t>» denote relations in intension between entities and propositions, expressions of type
294",312,294,10 Intensional Semantics,No info,No info,intensional semantics expression type denotation function pair truth value member wxi denotation expression alaugh function truth value formula situation model proposition capture intuition proposition sentence part meaning information situation sentence intension individual constant type individual concept denote function index entity model awx function individual entity function individual constant ethel bertie fiona chester denotation individual concept name constant function function entity womanj mani dog interesting individual expression different entity different index obvious example name title queen scotland president ussr universe mayor new york extension name time time world world president russian republic boris yeltsin bore title someone different situation people title possible envisage world current queen scotland current queen england elizabeth windsor descendant bonnie prince charlie morag stuart britain become republic current queen england intension predicate type denote function index entity function wxi function entity extension predicate property extension red set entity red property redness function extension predicate situation property model diagram function entity laughing follow montague generalise term property denotation expression type structure type expression denote function wxi function entity expression type property entity expression type denote property individual entity type denote property type denote property proposition relation entity intension expression type relation intension entity function term property term cover expression denote intension function type structure type expression type denote relation intension entity proposition expression type
294,"The intensional language L!L
<s,«s,e>,«s,e>,t»> denote relations in intension between individual concepts, and so on.
The different denotations of expressions are summarised in (19) according to whether they are intensional or extensional.
There are, of course, many other intensional types and we will come across more in the sections that follow, but they all have the same sort of denotations, i.e. functions from indices (W x I) to extensional denotations.
(19)

Category
Name

Extensional Extensional
Type
Denotation

Individual constant e

Entity
A

Intensional
Type

Intensional
Denotation

<s,e>

Individual concept
A WxI

Formula t

Truth value
{1,0}

<s,t>

Proposition
{l,0} WxI

One-place predicate

<e,t>

Set of entities

<s,<e,t»

Property of entities
({1,0}A)W*I

Two-place predicate

<e,<e,t»

Relations between entities
({0,l}A)A

<s,<e,<e,t»:> Relation in intension between entities
(({0,l}A)A)W*I

Exercise 10.3:
What sorts of denotation do expressions of the following types have?
Give the formal definition of the denotation, describe it in words and try and think of an English expression that might have such a denotation.
ii.
iii.
iv.
v.
vi.
The models used to interpret expression of LIL consist of the ordered sextuple in
(20).
(20)

Intensional model: M = «A,F,W,R,T,o>.

As before, A is a set of entities defining the ontology of the model, containing all the entities that exist, have existed, will exist and might exist.
W is a set of logically possible worlds and R is some relation of accessibility between them (or indeed a set
295",313,295,10 Intensional Semantics,No info,No info,intensional language denote relation intension individual concept different denotation expression intensional extensional course many intensional type section follow sort denotation function index extensional denotation category name extensional extensional type denotation individual constant entity intensional type intensional denotation individual concept formula truth value proposition entity property entity predicate relation entity relation intension entity exercise sort denotation expression type formal denotation word english expression model interpret expression lil sextuple intensional model set entity ontology model entity possible world relation accessibility
295,"10 Intensional semantics of such relations; see Section 9.3.2).
As in Chapter 8, T is a set of times ordered by the precedence relation, <.
F is again a denotation assignment function, but now complicated to account for intensions.
It assigns an intension to each lexeme in the object language, thus providing an extension for each basic expression at each world-time co-ordinate in the model.
F can thus be defined as a function from lexemes to a function in DaWxT, where a is an extensional type.
As with temporal models, there must be no gaps in the intension assigned to a basic expression, either in worlds or in temporal intervals in those worlds.
In other words, there must be no index for which the extension of any constant is not defined.
Thus, the union of all worlds in the domain of F for some constant a must be equal to W, the set of all possible worlds, and the union of all time intervals mentioned by F must equal the set of times, T, for all worlds in W. Thus, F must conform to the two conditions in (21) for all basic expressions, a.
(21) a.
b.

UwnF(a)(<wn,i>) = W.
U F(a)(<wn,i>) = T, for all wn e W.

The diagram in (4) that represents the intension of laugh' in M10 can thus more formally be specified as a set of extension plus co-ordinate pairs (or, equivalently, a function from indices to characteristic functions of entities), as in (22).
The extension of ¥l0(laugh') need not be specified for every index, provided that there are meaning postulates that specify how to get to the extension of the constant at any index.
Because laugh is an activity verb, there is a meaning postulate that specifies that the extensions of the predicate at any interval holds of all subintervals.
Thus, in (22) the extension of laugh' at the index <Wi,[t2]> is the same as ¥Maugh') at the index
(<W!,[ti,t2]>), i.e. {MAN^WOMANJ, since [tj is a subinterval of [tl9tj.
Furthermore, the rule for computing the extensions for intervals not specified by the denotation assignment function also holds (cf. Chapter 8).
Strictly speaking, the meaning postulates defining the properties of predicates and the general rule determining extensions at other intervals hold of the denotations assigned by F, but do not determine them.
Formally, therefore, the denotation assignment function should directly specify the extensions of a predicate at all indices.
However, since such a specification is time consuming and tedious, in the example models in this chapter the denotation assignment functions give the denotations for only the minimum indices necessary to determine extensions at other indices, according to the rules given in Chapter 8.
(22)

FI0(laugh') = {«w1,[t,,t2]>,{ MAN1,WOMAN2}>,
«w1,[t3,t4]>,{MAN1}>,
«w2,[t1,t3]>,{DOG}>,
«w 2 ,[t 4 ]>,0>,

«w3,[t2,t3]>,{ WOMAN2}>,
«w3,[t4]>,{WOMAN1, WOMAN, }>,
«w 4 ,[t! ,t4]>, {MANXMAN,, WOMAN,, WOMAN! ,DOG} >}
The extension of a basic expression a at a particular index, <wwi>, is thus the value of F at that index.
Hence, the base of the model theory used to interpret LIL is given by the statement in (23), where F(oc)(<Wn,i>) is the function F(oc) applied to the
296",314,296,10 Intensional Semantics,No info,No info,intensional semantics relation time precedence relation denotation assignment function account intension intension lexeme object language extension basic expression model function lexeme function dawxt extensional type temporal model intension basic expression world temporal interval world word constant union world domain constant possible world union time interval time world condition basic expression uwnf diagram intension laugh set extension pair index characteristic function entity extension laugh meaning postulate specify extension constant laugh activity verb meaning postulate extension predicate interval hold subintervals extension laugh subinterval rule extension interval denotation assignment function meaning postulate property predicate general rule extension interval hold denotation determine denotation assignment function extension predicate index specification time tedious model denotation assignment function denotation minimum index necessary determine extension index rule laugh dog woman manxman woman woman dog extension basic expression particular wwi value base model theory interpret lil statement function
296,"The intensional language LIL index <WnJ> which yields the extension of a at that index.
This rule is generalised to obtain the extension of any intensional expression.
Thus, where a has an intensional type, the denotation of vcc at an index <w,,,i> is determined by the denotation of a (an intension) applied to the index <w,»i>.
(23) a.
b.

If a is a basic expression, then [a]M'«wn'i = F(a)(<wn,i>).
fa]M-8wniis [a]M*wni(<wI1,i>).

The intension of a basic expression, a, is F applied to a, i.e.
[Aa]M«wn J = F(a).
In general, the intension of an expression Aot in Ln. is a function that picks out the denotation of a at each index, as formally defined in (24).
(24)

If a is an extensional expression of type a, then [Aa]M'«wni is that function, h, with domain W x I such that for all <wm,P> in W x I, h(<wm,P>) =
[a]M*wmi'.

The intension of an expression is the same at every index, unlike the extension which may vary from index to index, because intensions are defined over all indices and make no special mention of the reference index.
We may, therefore, equate [Acc]M*wn-i with s[a]M<8, the intension of an expression with respect to a model and a variable assignment, irrespective of index.
To ascertain the denotations of complex expressions, whether intensional or extensional, we simply adopt a variant of the basic rule for interpreting expressions formed via functional application, relativised, not just to a temporal interval as in
Chapter 8, but also to an index consisting of a world and a time.
Thus, the value of
[oc(P)]M'8wni is ascertained by applying the value of the functor a at the reference index,
<wn,i>, to the value of p at the same index.
Thus, for example, to ascertain the extension of the expression laugh'(Chester') with respect to M10 and the index
<w3,[t2,t3]>, we apply the function denoted by laugh' at <w3,[t2,t3]> to the entity is denoted by Chester' at that index, i.e. [laugh'(Chester')]M^V/3^2^
The value of [laugh']M*<w3wwis the characteristic
[laugh^^^Klchestery*****2*]).
function of the set {WOMANj} and the value of [chester '] M -gw3 -w-w (as at every index) is DOG.
Since the latter is not in the set denoted by the functor at the reference index
<w3,[t2,t3]>, laugh'(chester') is false at that index.
Nothing has, therefore, changed in the interpretation of functor-argument expressions, except that care must now be taken to ensure that the denotations of the component parts of a complex expression are ascertained at the same index.
Furthermore, caution must be exercised to ensure that the correct sort of denotation, intension or extension, is selected for each expression.
This will be important in Section 10.3 and discussion of the details is postponed until then.
As for the rest of the model theory used for interpreting expressions in LIL, very little differs from the rules we have already come across in previous chapters except again for the relativisation of denotations to indices.
Note that the interpretation of a variable, w, is, as in Chapter 4 onwards, just the value assigned to u by the value assignment g, i.e. [u]M'«wni = g(u).
In other words, assignments of values to variables are constant from index to index, as one might expect.
Everything else remains much the same as before and the complete formal specification of the model theory is given in (25) which includes the interpretations of the expressions necessarily', possibly', must' and may \ since these are logical expressions whose interpretation does not vary
297",315,297,10 Intensional Semantics,No info,No info,intensional language lil wnj yield extension rule extension intensional expression intensional type denotation vcc denotation intension basic expression wni intension basic expression general intension expression aot function denotation extensional expression type wni function domain wmi intension expression extension intension index special mention reference acc intension expression respect model variable assignment irrespective ascertain denotation complex expression intensional extensional variant basic rule expression functional application temporal interval world time value value functor reference value ascertain extension expression laugh chester respect function laugh entity chester laugh chester value laugh characteristic function womanj value chester dog latter functor reference laugh chester false nothing interpretation expression care denotation component part complex expression caution correct sort denotation intension extension expression important discussion detail rest model theory expression lil little differs previous chapter relativisation denotation index note interpretation variable value value assignment wni word assignment value variable constant one everything much complete formal specification model theory interpretation expression logical expression interpretation
297,"10 Intensional semantics from model to model.
Students are advised to take some time to go through this before going on to the discussion of the important implications of this theory for an account of opaque contexts in the next section.
(25) a.
b.
c.
d.

If a is a basic expression, then [a] M * wn4 = F(a)(<w n ,i>).
If a is a variable, then [a]^-*"" 4 = g(oc).
If a is an expression of type <b,a> and (i is an expression of type b, then
[a(p)]M-8-wni is [a]M'8'wni([p]M'8wni)If a is an extensional expression of type a, then [Aa]M-8wn4 is that function h with domain W x I such that, for all <wm,F> in W x I, h(<w m ,i'>) =
[tt]M*wm4' ( = 3[(X]M>8).
e.
f.
g.
h.
i.
j.
k.
1.
m.
n.
o.
p.
q.
r.
s.
t.
u.

298

If a is an expression of type <s,a>, then [/oc]M,g,wn,i j s [a] M '8 wni (<w n ,i>).
If a is an expression of type a containing a free instance of a variable u of type b, then [Xu [a]]M'«wn *is that function h with domain D b such that for any object a in D b , h(a) = [oc]M'8'wni where g' is exactly the same as g except perhaps for the fact that g'(ii) = a.
If a and |3 are expressions of type a, then [ a = (3]M«wni is 1 iff [a] M « wni is identical to [p]M,g,wn,i Otherwise, [a = (3]M'8wni is 0.
If <|) is an expression of type t, then [~<j)]M« wn ^is 1 iff [c))]M,g,wn,i [s Q Otherwise,
[H[)]M'8'wni is 0.
If 4> and \\f are expressions of type t, then [((() & \j/)]M,g,wn,i j s x iff [(j)]M,g,wn,i j s
1 and [\|/]M.g,wn,i i s a i s o x.
Otherwise, [(<|) & \|/)]M,g,wn.i i s Q
If cf> and \|/ are expressions of type t, then [((() v \|/)]M,g,wn,i i s x iff [(|>]M,g,wn,i [s
1 or [\|/]M.g.wn,i i s x.
Otherwise, [((() v \j/)]M,g,wn.i j s Q
If <() and \|/ are expressions of type t, then [((() -»\|/)]M,g,wn,i i s x iff [<|)]M,g,wn,i i s
0 or [\|/]M,g,wn,i is x.
Otherwise, [(()) —»\j/)]M.g.wni is 0.
If <|) and \|/ are expressions of type t, then [((() <-> \(/)]M.g,wn,i i s \ iff [(|)]M,g,wn,i a n ( j
[\j/]M,g,wn,i both have the same truth value.
Otherwise, [(()) <-> \|f)]M,g,wn,i ls Q
If 0 is an expression of type t containing an instance of a free variable u, then [Vu [a]] M '« wni is 1 iff [<t>]M-8'wni is 1 for all value assignments g' exactly like g except perhaps for the value assigned to u.
If (() is an expression of type t containing an instance of a free variable u, then [3u [a]] M '8 wni is 1 iff [c|)]M,g\wn,i i s \ for S O me value assignment g' exactly like g except perhaps for the value assigned to u.
If 0 is an expression of type t, then [Pres ((j))]M.g.wn,i i s x iff [(|>]M,g,wn,i i s \
If <>| is an expression of type t, then [Past ((())]M-8wni is 1 iff [c()]M<8'wno is 1 for some j in I where j < i.
If <>| is an expression of type t, then [Fut (c|))]M8.wn.i j s x iff [(|>]M.g,wn,j i s x for s o m e j in I where i < j .
If (() is an expression of type t, then [Perf ((())]M-8-wni is 1 iff [<()]M-8.wn,i i s x and
1 contains initial and final points if <|) inherently contains these.
If $ is an expression of type t, then [Impf ((|))]M8.wn.i is 1 iff there is an interval j such that i is a proper subinterval of j and [<J>]M-»o is 1.
If <|) is an expression of type t, then [necessarily '(A(j))]M.g,wn,i i s \ iff [(|)]M,g,wtno is 1 for all j G I and all w m e W such that w n Rw m .
If <>| is an expression of type t, then [possibly '(^t))]1*'8'™4 is 1 iff [<|)]M.g,wmo ls
1 for s o m e j € I and some w m e W such that",316,298,10 Intensional Semantics,No info,No info,intensional semantics model model student time discussion important implication theory account opaque context basic expression variable expression type expression type extensional expression type function domain expression type wni expression type free instance variable type function domain object expression type wni wni identical expression type expression type expression type expression type expression type truth value expression type instance free variable wni value assignment value expression type instance free variable wni value assignment value expression type pres expression type expression type fut expression type perf initial final point expression type impf interval proper subinterval expression type expression type wmo
298,"Interpreting opaque contexts v.
w.

10.3

If (() is an expression of type t, then [mwsf *(A<|>)]M*wn'i is 1 iff [cj)]M,g.wm,i j s \ for a l l w m e W such that w n Rw m .
If <>
| is an expression of type t, then [may '(A<t))]M>8 wn>i is 1 iff [c|)]M,g,wm,i [s \ for some w m e W such that WnRwm.

Interpreting opaque contexts

We are now in a position to show to what extent the problems posed by the opaque constructions discussed in Section 9.1 are solved by the adoption of the intensional semantics defined above.
We begin by considering the interpretation of verbs with opaque noun phrase or verb phrase object positions like want, try and seem and then move on to a consideration of verbs of propositional attitude like believe, know, etc.
10.3.1

Oblique transitive verbs

As we saw in Section 9.1, the fact that someone wants or is looking for something like a unicorn, a drink or a secretary does not entail that there is a specific unicorn, drink or secretary that they want or are looking for nor that any entity with the property specified actually exists.
This differentiates such verbs from the ordinary transitive verbs like like and stroke with respect to which quantified object noun phrases always take wide scope, because the lexical decomposition of the latter guarantees that they denote relations between entities (cf. Chapter 6).
For example, the sentence in (26.a) translates into LQ as the complex expression in (26.b).
After lambda conversion this reduces to (26.c) from which the entailments in (26.d) and (26.e) can be straightforwardly derived through conjunction elimination.
These verbs also allow the substitution of referential equivalents in their object position, as shown by the valid inference pattern in (27).
(26) a.
b.
c.
d.
e.
(27) a.
b.
c.

Jo liked a student.
XQ [QQo')]QJ> Pu [P(Xy [(like'(y))(x)])]](XP @z [student'(z) & P(z)]])).
3z [student'(z) & (like'(z))(jo')].
3z [student' (z)].
Jo liked a student.
The student Jo liked is a wealthy Glaswegian.
Therefore, Jo liked a wealthy Glaswegian.

As we have seen, opaque transitive verbs do not have the same properties as transparent ones, as shown in (28): (28.b) cannot be inferred from (28.a) nor can
(28.d) be inferred from (28.c) despite the fact a unicorn and a gryphon are referential equivalents in the actual world (i.e. they both extensionally denote the null set).
(28) a.
b.
c.
d.

Jo sought a student.
There is a student that Jo sought.
Bertie wanted a unicorn.
Bertie wanted a gryphon.

299",317,299,10 Intensional Semantics,No info,No info,opaque context expression type mwsf expression type opaque context position extent problem opaque construction adoption intensional semantics interpretation verb opaque noun phrase verb phrase object position move consideration propositional attitude transitive verb fact someone unicorn drink secretary entail specific unicorn drink secretary entity property verb ordinary transitive verb stroke respect object noun phrase wide scope lexical decomposition latter guarantee denote relation entity sentence complex expression lambda conversion conjunction elimination verb substitution referential equivalent object position valid inference pattern student qqo student student student student student wealthy glaswegian wealthy glaswegian opaque transitive verb property transparent fact unicorn gryphon referential equivalent actual world null set student student bertie unicorn bertie gryphon
299,"10 Intensional semantics
Because of the failure of Leibniz' Law in the object position of verbs like want, seek, imagine and look for, these are analysed as functors with an intensional argument position.
It could be argued that, since ordinary transitive verbs ultimately denote relations between entities of type <e,<e,t», opaque verbs denote relations between individual concepts and entities, and so translate into expressions of type
« s , e > , < e , t » .
This would go some way towards a solution, since it allows one to distinguish between the particular individuals being sought or imagined.
For example, the sentence in (29.a) translates into UL as the formula in (29.b), assuming the type of imagine' to be « s , e > , < e , t » .
This translation ignores tense and treats the definite noun phrase The Ladies' Scottish Golf Champion as translating into the individual
(sublimation of the) constant, sgc\ rather than as a proper Russellian definite description.
(29) a.
b.

Jo imagined the Ladies' Scottish Golf Champion,
(imagine'(Asgc))(jo').

According to the model theory specified in Section 10.2, the formula in (29.b) is true at an index <wn,i>, if the entity denoted by jo' at <wn,i> is 'in an imagining relation' not with the entity extensionally denoted by the Ladies' Scottish Golf Champion at that index, but with its associated individual concept, i.e. with [Asgc']M<* rather than
[sgc']M^wn\ If Ethel and the Ladies' Scottish Golf Champion happen to be one and the same at some index, it does not therefore follow that because Jo is imagining the
Ladies' Scottish Golf Champion, he is imagining Ethel.
This is because the individual concept of ethel', the function that picks out Ethel at every index, may differ from that of sgc', the function that identifies the Ladies' Scottish Golf Champion at every index.
In model M10, the name Ethel refers to the same entity in every world at every time.
Hence, 3[ethel']M10'8 is the constant function in (30.a).
The Ladies' Scottish Golf
Champion, however, is not the same person at every index but in world Wi sgc' extensionally denotes Ethel (WOMAN0 at all times, but in w 2 it denotes the dog at the interval [tiytj and Bertie at [t^tj.
In world w3, Fiona is the Ladies' Scottish Golf
Champion for the first three moments in the model, but Ethel in the last moment.
In the final world w4, Fiona is the Ladies' Scottish Golf Champion at the interval [ti,t4].
The denotation of Asgc' in M w is, therefore, the function represented in (30.b).
(30) a.

3[ethel']M10-8

MAN 2
<w 3 ,[t 1 ,t 4 ]>

WOMANj

<w 4 ,[t 1 ,t 4 ]>

WOMAN 2
DOG

300",318,300,10 Intensional Semantics,No info,No info,intensional semantics failure leibniz law position verb imagine analysed functors intensional argument position ordinary transitive verb relation entity type opaque verb denote relation individual concept entity translate expression type solution distinguish particular individual sentence formula type imagine translation ignores tense treat definite noun phrase lady scottish golf champion individual sublimation constant proper russellian definite description lady scottish golf champion imagine asgc model theory formula true entity relation entity lady scottish golf champion individual concept asgc sgc ethel lady scottish golf champion follow lady scottish golf champion ethel individual concept ethel function pick ethel sgc function identifies lady scottish golf champion model name ethel entity world time ethel constant function lady scottish golf champion person world sgc ethel time dog interval tiytj bertie world fiona lady scottish golf champion moment model ethel last moment final world fiona lady scottish golf champion interval denotation asgc function ethel man womanj woman dog
300,"Interpreting opaque contexts
3[SgC]M10'*

<w2,[t1,t2]>
<w2,[t3,t4]>
<w3,[t1,t3]>
<w3,[t4]>
<w4,[t1,t4]>

MAN2
WOMANj
WOMAN2
DOG

Because the intensions oietheV andsgc' differ, it is possible for the denotation of imagine' at some index to map one of them onto the characteristic function of a set containing the entity denoted by jo \ but not the other.
In other words, it is possible for
Jo to imagine the concept of the Ladies' Scottish Golf Champion without imagining the concept of Ethel.
Hence, Leibniz' Law fails in these contexts and so the inference pattern in (31) is correctly predicted to be invalid under the assumption that imagine' is of type «s,e>,<e,t».
(31) a.
b.
c.

Jo imagines the Ladies' Scottish Golf Champion.
Ethel is the Ladies' Scottish Golf Champion.
Therefore, Jo imagines Ethel.

Unfortunately, however, treating opaque verbs as relations between individual concepts and entities is not sufficient, because they may take quantified noun phrases as direct objects.
If the argument type of predicates like imagine' is <s,e>, any quantifiers in the translation of an object noun phrase still have scope over the verb.
The translation of a sentence like Jo imagined a unicorn is thus parallel to that of Jo liked a student in (26.c) except that the variable in the object position of imagine' is in an intensional position, i.e. 3x [unicorn '(x) & (imagine '(Ax))(jo')].
This allows the application of standard entailment rules like conjunction elimination to get inferences like those shown in (26.d & e).
The type of opaque verbs like these cannot, therefore, be as simple as «s,e>,<e,t», but must be a functor over full noun phrase expressions.
Indeed, this possibility is implicit in the type-raising of transitive verbs required by the higher type accorded to full noun phrases in Chapter 6.
As we saw there, in order to maintain transitive verbs as functors over noun phrase denotations, it was necessary to raise their type from <e,<e,t» to <«e,t>,t>,<e,t».
While transparent verbs like like' are lexically decomposed into a complex expression that maintains the intuition that they denote simple relations between entities, this is not the case for opaque verbs like imagine which must be interpreted as functors over the intensions of noun phrases.
To define the type and possible denotations of intensional transitive verbs, we need first to ascertain the types of noun phrases in L1L.
Montague analysed noun phrases as denoting, not sets of sets of entities, as we did in Chapter 6, but sets of properties of individual concepts.
In other words, he translated noun phrases into expressions of type «s,«s,e>,t»,t>, rather than as expressions of type «e,t>,t>.
His analysis, however, seems much more complex than is actually required for the
301",319,301,10 Intensional Semantics,No info,No info,opaque context sgc womanj dog intension oiethev andsgc possible denotation imagine map characteristic function entity word possible imagine concept lady scottish golf champion concept ethel leibniz law context inference pattern invalid assumption imagine type imago lady scottish golf champion ethel lady scottish golf champion imago ethel opaque verb relation individual concept entity sufficient noun phrase direct object argument type predicate quantifier translation object noun phrase verb translation sentence unicorn parallel student variable object position intensional position unicorn imagine application standard entailment rule conjunction elimination inference type opaque verb simple full noun phrase expression possibility implicit transitive verb higher type full noun phrase order transitive verb functors noun phrase denotation necessary raise type transparent verb complex expression intuition denote simple relation entity opaque verb imagine functors intension noun phrase define type possible denotation intensional transitive verb first ascertain type noun phrase montague noun phrase denoting entity property individual concept word noun phrase expression type expression type analysis much complex
301,"10 lntensional semantics interpretation of noun phrases.
In the first place, there seems to be no reason to take
VP denotations (the arguments of subject NPs) to be sets of individual concepts, i.e.
to assign them the type «s,e>,t>.
The subject positions of most verbs are extensional and so require extensional arguments (of type e), not intensional ones (of type <s,e>).
For those verbs that require intensional subjects (e.g. appear; see below), the argument position of the VP must be a full intensional NP denotation in order to include quantifiers, and not just an individual concept.
Hence, we can maintain the translation of (most) VPs into one-place predicates.
Furthermore, it seems unnecessary to require noun phrases to apply to properties (denoted by expressions of type
<s,<e,t») rather than sets.
If the translations of noun phrases were intensional in their argument position we would expect there to be noun phrases that do not allow substitution of extensional equivalents in this position.
It seems likely, however, that there are no noun phrases of this sort and that wherever a noun phrase applies to a one-place predicate, truth is preserved if an extensionally equivalent predicate is substituted.
For example, it seems intuitively correct to say that if Every student sings well is true and that all those things that sing well are also those things that are happy then Every student is happy is also true.
Hence, we can maintain the assumption made in Chapter 6 that NPs denote extensional generalised quantifiers and so keep the same type in L^ as they have in LQ.
Keeping the type of noun phrases as «e,t>,t> means that the type of intensional transitive verbs must be « s , « e , t > , t » , < e , t » , denoting relations between the intensions of sets of sets of entities and sets of entities.
A verb like seek thus translates into the constant seek\ denoting a function from noun phrase intensions to sets of entities.
The translation of the syntactic rule generating VPs containing transitive verbs and their objects must thus combine the verb translation with the intension of the object NP, not its extension.
A VP containing a transitive verb and its object is translated as V'(ANP') and the sentence in (32.a) is translated into the LIL expression in (32.b) which is equivalent to (32.c) after lambda conversion.
(32) a.
b.
c.

Bertie sought a unicorn.
Past (kQ [Q(bertie')](seek'(A^P px [unicorn'(x) & P(x)]]))).
Past ((seek'(A^P [3x [unicorn'(x) & P(x)]]))(bertie')).

Unlike ordinary transitive verbs, verbs like seek are not further semantically decomposed and so no further reduction of (32.c) can take place.
Informally, (32.c) asserts of Bertie that he is seeking, not a specific unicorn, but the concept or idea of a unicorn.
Hence, he need be seeking no specific unicorn and no unicorns need exist for him to be seeking them.
Formally, (32.c) is true just in case at some time preceding the time of utterance in the actual world, the entity denoted by bertie' stood in a relation of seeking to the intension of a unicorn.
The latter is a function that picks out the set of sets at each index that include some unicorn, i.e. one that picks out the existential sublimations of unicorn' at each index.
Hence, [seek '(AXP [3x [unicorn '(x)
& PMJlXbertie')]""1*'™*. is true if, and only if, the function [seeky]M^ni maps the intension of the existential sublimation of unicorn\ i.e. z[XP [3x [unicorn'(x) &
P(x)]]]M>* onto a set that contains [bertie']M*wni at <w,,,i>.
Because s[XP [3x
[unicorn'(x) & P(x)]]]M& is that function that picks out the existential sublimations of [unicorn '] M * wn j at each index and not its particular existential sublimation at <w,,,i>, it follows that no specific entity need be being sought by Bertie at <wmi>.
302",320,302,10 Intensional Semantics,No info,No info,lntensional semantics interpretation noun phrase first place reason denotation argument subject np individual concept assign type subject position verb extensional extensional argument type intensional type verb intensional subject argument position full intensional denotation order quantifier individual concept translation vps predicate unnecessary require noun phrase property expression type set translation noun phrase intensional argument position noun phrase substitution extensional equivalent position likely noun phrase sort noun phrase predicate truth equivalent predicate correct say student sings true thing thing happy student happy true assumption np denote extensional type keeping type noun phrase mean type intensional transitive verb relation intension entity entity verb constant function noun phrase intension entity translation syntactic rule vps transitive verb object verb translation intension object extension transitive verb object anp sentence lil expression equivalent lambda conversion bertie unicorn bertie unicorn unicorn bertie ordinary transitive verb verb reduction place bertie specific unicorn concept idea unicorn need specific unicorn unicorn need true time time utterance actual world entity bertie relation intension unicorn latter function pick unicorn existential sublimation unicorn seek axp unicorn pmjlxbertie true function seeky map intension existential sublimation unicorn set bertie wni unicorn function existential sublimation unicorn particular existential sublimation specific entity need bertie wmi
302,"Interpreting opaque contexts
Furthermore, since the intension of an existential sublimation may include indices like the actual world at the present time where there are no unicorns, i.e. where [XP [3x
[unicorn'(x) & P(x)]]]M^wni is null, no unicorns need exist at the reference index for the expression in (32.c) to be true.
Hence, this analysis properly accounts for the invalidity of the entailment between (28.a) and (28.b) in its non-specific reading.
Because the object position of seekis an intensional one, Leibniz' Law is not valid and so we cannot infer from the truth of Bertie sought a unicorn that Bertie sought a gryphon is also true.
This analysis of verbs which have an opaque direct object position thus captures the semantic properties of non-specific readings.
As we have seen, however, sentences like Bertie sought a unicorn and Jo imagined the Ladies' Scottish Golf Champion are ambiguous between the non-specific reading analysed above, and a reading where
Bertie is seeking a specific unicorn and Jo is imagining a specific person who is the
Ladies' Scottish Golf Champion.
In these latter cases, one can infer the existence of an entity with the property specified by the object noun phrase and also that substitution of extensional equivalents is valid.
Since these are semantic properties associated with transparent transitive constructions (ensured by giving any quantifier in the object noun phrase wide scope over the verb), the simplest way to analyse specific readings of intensional verbs is to analyse them in the same way as transparent verbs.
Scope ambiguities between quantifiers in subject and object noun phrases and between the logical quantifiers and the tense operators were discussed in
Chapters 6 and 8.
Such ambiguities seem to be a general property of the semantics of natural language expressions: wherever sentences and the formulae into which they translate contain more than one operator the sentence has different readings according to the different scopes that the operators can have.
If this is a general property of natural languages then we would expect ambiguity between the scopes of the intension operator A and quantifiers contained in noun phrases to parallel scope variations of the sort already seen.
Since we have already identified an ambiguity in sentences containing opaque transitive verbs, it seems natural to treat them as deriving from differences in the scope of operators.
As discussed in Chapters 6 and 8, wide scope quantification can be derived in the semantics through the rule of quantifying in.
In order to derive the specific reading of the sentence Bertie sought a unicorn using this rule, wefirstcombine the predicate seek* with an expression containing a free variable of type e of the right type to combine with an intensional transitive verb.
This expression is the intension of the individual sublimation of a free variable of type e, i.e. AXQ [Q(z)].
The resulting expression, seekf(AXQ [Q(z)])> is then combined with the subject translation XP
[P(bertie')] to yield XP [P(bertie ')](seek f(AXQ [Q(z)]))- Finally, the lambda operator is used to abstract on the free individual variable z and the resulting expression is combined with the translation of a unicorn to give a formula with no free variables, i.e. ^P, [3y [unicorn'(y) & Pi(y)]](Xz [X?
[P(bertie')](seek'(A^Q [Q(z)]))]).
This derivation is shown in (33) in the form of a semantic analysis tree, each line of which shows a functor to the left combining with an argument expression to its right.
The types of the expressions being combined are written underneath to show that the combinations are valid according to the rule of functional application and the rule of quantifying in.
(Tense is ignored for the sake of simplicity.)

303",321,303,10 Intensional Semantics,No info,No info,opaque context intension existential sublimation index actual world present time unicorn unicorn null unicorn reference expression true analysis invalidity entailment object position seekis intensional leibniz law valid infer truth bertie unicorn bertie gryphon true analysis verb opaque direct object position semantic property reading sentence bertie unicorn lady scottish golf champion ambiguous reading bertie specific unicorn specific person lady scottish golf champion latter case infer existence entity property object noun phrase substitution extensional equivalent valid semantic property transparent transitive construction quantifier object noun phrase wide scope verb simplest way analyse specific intensional verb analyse way transparent verb scope ambiguity quantifier subject object noun phrase logical quantifier tense operator chapter ambiguity general property semantics natural language expression sentence formula translate operator sentence different reading different scope operator general property natural language ambiguity scope intension operator quantifier noun phrase parallel scope variation sort ambiguity sentence opaque transitive verb natural treat difference scope operator chapter wide scope quantification semantics order specific reading sentence bertie unicorn rule wefirstcombine predicate expression free variable type right type intensional transitive verb expression intension individual sublimation free variable type axq expression seekf subject translation bertie bertie axq lambda operator abstract free individual variable expression translation unicorn formula free variable unicorn bertie derivation form semantic analysis tree line show functor argument expression right type expression show combination valid rule functional application rule tense sake simplicity
303,"10 Intensional semantics
(33)
XP [By [unicorn'(y) & P (y) ]](Xz [XP [P(bertie')](seek'(^Q [Q(z)]))])

XP [3y [unicorn'(y) & P (y) ]]

XP [P(bertie')](seek'(A^Q

XP [P(bertie')] seek'

The expression derived in (33) is equivalent to the formula in (34.a), as can be shown by applying lambda conversion to it.
From the truth of this formula the truth of those in (34.b) and (34.c) can also be inferred by conjunction elimination.
(34) a.
b.
c.

3y [unicorn'(y) & Xz [(seek'(AXQ [Q(z)]))(bertie')](y)].
3y [unicorn'(x)].
3y [Xz [(seek'(AXQ [Q(z)]))(bertie')](y)]

Because the existential quantifier is outside the scope of A in (34.a), Leibniz' Law applies and so any extensionally equivalent expression may be substituted for unicorn' and maintain the truth value of the original formula.
If this formula is true and all unicorns are one-horned horses, then we can infer from the specific reading of Bertie sought a unicorn that Bertie sought a one-horned horse is also true.
The reason for this is that in the interpretation of (34.a) the extension of unicorn' is assessed at the reference index, i.e. at the world and time of utterance.
Hence, any expression extensionally equivalent to unicorn' at the relevant index may be substituted salva veritate.
The interpretation of (34.a) may, however, seem a bit strange: what is it to be seeking the concept of the individual sublimation of a variable?
Because there is one and only one individual sublimation for any individual at an index, being in a relation with an individual sublimation is tantamount to being in a relation with the individual that it is a sublimation of, as we saw in Chapter 6.
Furthermore, the concepts of individual sublimations are also unique to that individual.
The modal formula in (35) is thus valid in Ln, and it follows that predicating something of the concept of an individual sublimation is equivalent to predicating something of the individual itself.
Thus, to be seeking the concept of an individual sublimation where that individual is a unicorn is to be seeking an actual individual with that property.
Indeed, Montague provides a general formula to relate relations between entities and concepts of individual sublimations and the corresponding relations between entities.
This is
304",322,304,10 Intensional Semantics,No info,No info,intensional semantics bertie unicorn bertie bertie expression equivalent formula lambda conversion truth formula truth conjunction elimination unicorn seek axq bertie unicorn seek axq bertie existential quantifier scope leibniz law equivalent expression unicorn truth value original formula formula true unicorn horse infer specific reading bertie unicorn bertie horse true reason interpretation extension unicorn reference world time utterance expression equivalent unicorn relevant may salva veritate interpretation strange concept individual sublimation variable individual sublimation individual relation individual sublimation tantamount relation individual sublimation individual sublimation unique individual modal formula valid concept individual sublimation equivalent individual concept individual sublimation individual unicorn actual individual property montague general formula relate relation entity concept individual sublimation relation entity
304,"Interpreting opaque contexts defined in (36.a) which relates an expression 8 of type « s , « e , t > , t » , < e , t » to a corresponding expression & of type <e,<e,t».
How this applies to the example in (33) is shown in (36.b) to (36.f).
This takes the formula in (33) after the translation of
Bertie has combined with the predicate seek '(AXQ [Q(z)]) but before the object noun phrase translation is quantified in, i.e. the expression in (36.b).
Lambda conversion is applied to get (36.c) at which point the reduction in (36.a) can be applied to get the expression in (36.d).
Quantifying in the translation of a unicorn yields the expression in (36.e) which is equivalent after lambda conversion to the formula in (36.f).
VxVy D[(x = y) <-> (AA

(35)

(36) a.
5* =def Xy [Ax [d(AXJ> [P(y)])(x)]].
b.
XP [P(bertie')](seek'(AA,Q [Q(z)])).
c. (seek'(AAQ [Q(z)]))(bertie').
d. (seek\(z))(bertie').
e.
XP py [unicorn'(y) & P(y)]](Xz [(seek',(z))(bertie')]).
f.
By [unicorn'(y) & (seek\(y))(bertie')].
For reasons that will be discussed in Section 10.3.3, the A-expression Xz
[(seek'(AXQ [Q(z)]))(bertie')](y) in (34.c) cannot be reduced to (seek'(AXQ
[Q(y)]))(bertie').
However, the A-conversion can take place if seek'(AXQ [Q(z)]) is reduced to seek*(z) using the definition in (36.a).
The expression (seek*(y))(bertie') can be obtained from Xz [(seek*(z))(bertie ')](y)by A-conversion and so the full expression in (34.c) is equivalent to 3y [(seek*(y))(bertie')].
Hence, from the specific reading of
Bertie sought a unicorn, it can be inferred that there was something that Bertie sought, as required.
Exercise 10.4:
In order to maintain a regular correspondence between syntactic rules and translation, it is necessary now to assume that the rule combining any verb with its direct object translates as the application of the translation of the verb to the intension of that of the object, i.e. VP' = V'(ANP').
This entails that the translations of transparent transitive verbs must be of type « s , « e , t > , t » , < e , t » , the same as opaque transitive verbs.
In order to maintain the fact that such verbs basically define a relation between two entities, they can continue to be semantically decomposed, but must contain a variable over the intensions of noun phrases.
The translation for the verb like is the expression in i. below, an expression that takes the intension of a noun phrase, makes it extensional and applies this to the expression denoting the set of all things that are liked.
The output is an expression denoting the set of all entities that like things with the properties given by the object NP.
The two analyses described above for sentences containing intensional transitive verbs also applies to those containing transparent ones.
Give both derivations for the sentence in ii.
Is the ambiguity implied by the two derivations semantically significant?
i.
ii.

Xp [Xx Vp(Xy [like'(y)(x)])]].
Fiona liked a student.

305",323,305,10 Intensional Semantics,No info,No info,opaque context expression type expression type formula translation bertie predicate axq object noun phrase translation expression lambda conversion applied point reduction expression quantifying translation unicorn yield expression equivalent lambda conversion formula vxvy axj bertie aaq bertie bertie unicorn seek bertie unicorn bertie reason axq bertie seek axq bertie place axq reduced seek expression bertie seek bertie full expression equivalent bertie specific reading bertie bertie exercise order regular correspondence syntactic rule translation necessary assume rule verb direct object application translation verb intension anp entail translation transparent transitive verb opaque transitive verb order fact verb relation entity variable intension noun phrase translation verb expression expression intension noun phrase extensional expression thing output expression entity thing property object analysis sentence intensional transitive verb transparent derivation sentence ambiguity derivation significant fiona student
305,"10 Intensional semantics
10.3.2

Control verbs

The interpretation of sentences containing opaque transitive verbs given in Section
10.3.1 is one of the major achievements of Montague (1973).
It captures in a very elegant way the primary semantic properties of the non-specific readings of such sentences and also provides a means of accounting for their specific counterparts.
The general approach can be extended to account for verbs like want and try which take verb phrase objects which have an opaque reading (cf. the invalid inference patterns in Chapter 9).
Such verbs, called control verbs in the linguistic literature, may thus be analysed as denoting relations between properties and entities.
Hence, they translate into expressions of type «s,<e,t»,<e,t», as in the translation of the sentence in (37.a) given in (37.b).
(37) a.
b.

Jo wanted to find a secretary.
Past (want'(A>-y [3x [secretary'(x) & (find'(x))(y)]])(jo')).

In sentences containing verbs like want and try, the matrix subject is interpreted also as the subject of the complement verb phrase.
Thus, in (37.a), Jo is both the person doing the wanting and that doing thefinding,and this needs to be brought out by the interpretation of the formula in (37.b).
Since the identification of the subject of the matrix clause with the omitted subject of the subordinate infinitive is a lexical property of these verbs, we may use a meaning postulate to capture this relationship.
This appears in (38.a) and ensures that a relation between properties and entities, like want\ of type « s , < e , t » , < e , t » is always associated with a relation between propositions and entities, like want*, of type «s,t>,<e,t», where the subject argument functions also as the subject of the embedded proposition to which it is related.
According to this meaning postulate (which can also be represented as in
(38.b)), the formula in (37.b) is truth-conditionally equivalent to that in (38.c), which is interpreted as asserting of Jo that he wants it to be the case that hefindsa secretary.
(38) a.
b.
c.

If 8 is an expression of type «s,<e,t»,<e,t», P is an expression of type
<e,t>, and x an expression of type e, then 5(AP)(x) is truth-conditionally equivalent to 8*(AP(x))(x), where 5* is an expression of type «s,t>,<e,t».
VP [Vx [8(AP)(x) <-> 8*(AP(x))(x)]].
Past (want*(A3x [secretary'(x) & (find'(x))(jo')])(jo')).

Because the existential quantifier in (37.b) and (38.c) is in the scope of the intension operator, we cannot infer from the latter that there is a specific secretary that Jo wants to find, nor, for the same reason, can we substitute any predicate in (37.b) which is extensionally equivalent to Xy [3x [secretary '(x) & (find'(x))(y)]] or any formula in
(38.c) which has the same truth value as 3x [secretary '(x) & (find'(x)Xjo')].
Hence, we can account for the fact that if Jo wants tofinda unicorn it does not follow that he wants to find a gryphon.
The specific reading of (37.a) where there is a particular secretary that Jo wants to find can be achieved by quantifying in the translation of the object to yield the expression in (39.a) which, by (38.a), is equivalent to (39.b).
(This equivalence does not result from X-conversion, which is invalid in intensional contexts; see Section
10.3.3.)

306",324,306,10 Intensional Semantics,No info,No info,intensional semantics verb interpretation sentence opaque transitive verb major achievement montague capture elegant way primary semantic property reading sentence mean specific counterpart general approach extended account verb verb phrase object opaque invalid inference pattern verb control verb linguistic literature relation property entity translate expression type translation sentence secretary past want secretary sentence verb want matrix subject subject complement verb phrase person need interpretation formula identification subject matrix clause subject subordinate infinitive lexical property verb meaning postulate capture relationship relation property entity type relation proposition entity type subject argument function subject proposition meaning postulate formula equivalent interpreted want hefindsa secretary expression type expression type expression type equivalent expression type past want secretary existential quantifier scope intension operator infer latter specific secretary reason substitute predicate equivalent secretary formula truth value secretary xjo account fact tofinda unicorn follow gryphon specific particular secretary translation object yield expression equivalent equivalence invalid intensional context
306,"Interpreting opaque contexts
(39) a.
b.

3x [secretary'(x) & want'(AA,y [(find'(x))(y)])(jo')].
3x [secretary'(x) & wanf(A(find'(x))(jo'))(jo')].

We can infer from the truth of the formulae in (39) that there is a (specific) secretary that Jo wants to find and that expressions extensionally equivalent to secretary* may be substituted for it.
However, we are not in a position to substitute any other expression for the formula (find'(x))(jof) in (39.b) or the predicate Xy [(find'(x))(y)] in (39.a) because these are in the scope of the intension operator.
Thus, we cannot infer from either reading of (37.a) that Jo wants to kiss a secretary, even if the set of things that Jo finds at some index is the same as the set of things that he kisses, i.e. if
[Xy [(find(y))(jo')]]M*™ is the same as [Xy [(kiss'(y))(jo')]]M*™\
The analysis above provides a way of characterising the meaning of verbs like want in terms of relations between properties, propositions and entities.
It is also possible to provide an analysis of verbs like seem or appear within the intensional semantics developed so far.
The sentence in (4O.a) has a non-specific reading in which it cannot be inferred from the truth of (4O.a) that there exists a unicorn that is approaching nor indeed that anything at all is approaching.
Thus, it is the subject position of such verbs that is intensional when they occur with a VP complement and it is necessary to make sure that all quantifiers in their subject NPs are in the scope of the intension operator.
Hence, such verbs must denote relations between properties and the intensions of noun phrases, i.e. translate into expressions of the very complex type « s , < e , t » , « s , « e , t > , t » , t » .
(4O.b) thus provides the translation of (4O.a).
(40) a.
b.

A unicorn appears to be approaching.
(appear'(Aapproach'))(A^P [3x [unicorn'(x) & P(x)]]).

The sentence in (4O.a) is a paraphrase of that in (41.a) where the verb appear takes a full complement clause and has as its subject the dummy element it.
If we assume that the latter contributes nothing to the meaning of the sentence, we can interpret the verb appear as denoting a function from propositions to truth values, picking out just those propositions which appear to be true.
Translating this category of the verb as the expression appear* of type «s,t>,t>, we thus get (41.b) as the translation of (41.a).
(41) a.
b.

It appears that a unicorn is approaching.
appear*(A3x [unicorn'(x) & approach'(x)]).

The paraphrase relation between (4O.a) and (41.a), which depends on the lexical interpretations of the verb appear, can be captured by the meaning postulate in (42.a)
(with the formal representation in (42 .b)) which relates an expression, 5, of type
« s , < e , t » , < « s , < e , t » , t > , t » to another one, 8% of type «s,t>,t>.
The appropriate relation is stated as one of equivalence between formulae containing 8, predicated of a property, AP, and the intension of a noun phrase, @, and those containing 8* which functionally applies to the intension of the formula derived from applying the translation of the subject to that of the complement, i.e. AC#?(P)).
In this way, we can guarantee that (4O.a) and (41.a) are truth-conditionally equivalent.
(43) shows the steps that are needed to derive (41 .b) from the expression in (43.a) which is truth-conditionally equivalent to (4O.b) according to (42).
The formula in (43 .b) is derived by 'down-up (~A) cancellation' and that in (43.c) by X-conversion.
307",325,307,10 Intensional Semantics,No info,No info,opaque context secretary secretary wanf infer truth formula specific secretary expression equivalent secretary position substitute expression formula jof predicate find scope intension operator kiss secretary thing thing kiss kiss analysis way meaning verb term relation property proposition entity possible analysis verb intensional semantics sentence truth unicorn subject position verb intensional complement necessary quantifier subject np scope intension operator verb relation property intension noun phrase translate expression complex type translation unicorn aapproach unicorn sentence paraphrase verb full complement clause subject dummy element latter nothing sentence interpret verb function proposition truth value proposition true category verb expression type translation unicorn unicorn approach paraphrase relation lexical interpretation verb postulate formal representation expression type type appropriate relation equivalence formula property intension noun phrase intension formula translation subject complement way guarantee equivalent show step expression equivalent formula cancellation
307,"10 Intensional semantics
(42) a.
b.
(43) a.
b.
c.

If 8 is an expression of type « s , < e , t » , < « s , < e , t » , t > , t » , P is an expression of type <e,t>, and p an expression of type «s,<e,t»,t>, then
8( A P)(p) is truth-conditionally equivalent to 8*(ACp(P))), where 8* is an expression of type «s,t>,t>.
VP [Vp [8(AP)(p) <-> 8X A (>(P)))]].
appear*(ACAAP [3x [unicorn'(x) & P(x)]](approach'))).
appear*(A(^*P \Bx [unicorn*(x) & P(x)]](approach*))).
appear*(A(3x [unicorn'(x) & approach'(x)])).

There is more to the semantics of these verbs than is touched on here and the implications of the intensionality of subjects of verbs like appear deserve more consideration, since this requires verb phrases to act as functors over their subjects, rather than vice versa.
However, it should be clear that the analysis presented here does provide a reasonable basis for a satisfactory account of the opaque properties of these expressions and the way the properties denoted by complement VPs can be related to propositions involving subject noun phrases.
*Exercise 10.5:
The sentences in (4O.a) and (4O.a) appear to be three ways ambiguous.
The sentence in i. below best corresponds to the reading in (4O.b) and (4O.b).
Show how the reading in ii. may be derived using the quantifying in rule in Chapter 6.
What problems arise in trying to derive the reading that best approximates to the reading in iii. and what implications does such a reading have for noun phrase interpretation in the analysis developed in this book?
i.
It appears that there is a unicorn and that it is approaching.
ii.
There is a unicorn and it appears to be approaching.
iii.
There is something approaching and it appears to be a unicorn.

10.3.3

Propositional attitudes

Verbs of propositional attitude like believe, know, doubt and consider also create intensional contexts in their complement position, as we can see from the fact that the
Law of Substitution fails and ambiguities arise between de re and de dicto readings of the same sentence (cf. Section 9.1).
Because such verbs are opaque with respect to their complement clauses, they translate into LIL expressions that denote functions over propositions, in fact relations between propositions and entities, and so translate into expressions of type «s,t>,<e,t».
To translate English sentences like those in
(44) into the formulae in (45), the predicates translating the main verbs, believe or know, combine first with the intension of the formula translating their complement clause and then combine with the translation of the subject noun phrase to yield a formula.

308",326,308,10 Intensional Semantics,No info,No info,intensional semantics expression type expression type expression type equivalent acp expression type unicorn approach unicorn approach unicorn approach semantics verb implication intensionality subject verb consideration verb phrase act functors subject vice clear analysis reasonable basis satisfactory account opaque property expression way property complement vps related proposition subject noun phrase exercise sentence way ambiguous sentence best show reading quantifying rule problem derive reading best approximates implication noun phrase interpretation analysis book unicorn unicorn unicorn propositional attitude propositional attitude doubt intensional context complement position fact law substitution ambiguity dicto sentence verb opaque respect complement clause translate lil expression denote function proposition fact relation proposition entity translate expression type translate english sentence formula predicate main verb believe first intension formula complement clause translation subject noun phrase yield formula
308,"Interpreting opaque contexts
(44) a.
b.
c.
d.

Fiona believes that the Ladies' Scottish Golf Champion is wealthy.
A Glaswegian knows that Ethel is not wealthy.
Ethel knows that a Glaswegian is wealthy.
Every student believes that every lecturer is wealthy.

(45) a.
b.
c.
d.

Pres (believe' (APres (wealthy' (sgc')))(fiona')).
Pres (3x [glaswegian'(x) & know'(A(Pres (-wealthy'(ethel'))))(x)]).
Pres (know'(A(Pres (3x [glaswegian'(x) & wealthy'(x)])))(ethel')).
Pres (Vx [student'(x) -> believe'(A(Pres (Vy [lecturer'(y) -> wealthy'(y)])))(x)]).

Because the complements of the predicates believe' and know' in (45) are in the scope of the intension operator, Leibniz' Law does not hold in these positions, and so one cannot substitute extensionally equivalent expressions within the complement clause and preserve truth.
As an demonstration that this is so, consider the sentences in (46).
(46) a.
b.
c.

Jo believes that the Ladies' Scottish Golf Champion is wealthy.
Ethel is the Ladies' Scottish Golf Champion.
Jo believes that Ethel is wealthy.

The sentence in (46.c) is constructed from the other sentences in (46) by substitution into the complement ofbelieve.
As we have already seen, however, Jo's belief about the Ladies' Scottish Golf Champion in (46.a) is not the same as a belief about Ethel, despite the identity of these two entities at a particular index.
This can be proved by showing that the propositions denoted by The Ladies' Scottish Golf Champion is wealthy and Ethel is wealthy formally define different functions from indices to truth values.
If these functions differ, then the function denoted by believe' will not necessarily map them both onto the characteristic function of a set containing the entity denoted by the subject, Jo.
In other words, the sentence in (46.c) may fail to be true even though both (46.a) and (46.b) are true.
The non-equivalence of (46.a) and (46.c) may be illustrated by working through the interpretations of the complement clauses in (46) with respect to the model Mio.
(47) sets out the intension of the predicate wealthy' in this model.
(47)

F1(<wealthy') = {«w 1 ,[t 1 ,t 4 ]>,{MAN 2 ,WOMAN 2 }>,
«w 2 ,[t 1 ,t 2 ]>,{ DOG,WOMAN2}>,
«w 2 ,[t 3 ,t 4 ]>,{ WOMAN 2 }>,
«w 3 ,[t 1 ,t 3 ]>,0>,
«w 3 ,[t 4 ]>,{WOMAN 1 }>,
«w 4 ,[t 1 ]>,{MAN 2 }>,
«w 4 ,[t 2 ,t 3 ]>,{WOMAN 1 ,WOMAN 2 ,MAN 1 }>,
«w 4 ,[t 4 ]>,{MAN 2 }>}

The denotation of the proposition ^(wealthy'(etheV)) in M10 is that function that maps an index onto 1 if, and only if, the denotation of ethel' at that index is in the set of entities denoted by wealthy' at that index and maps the index onto 0, otherwise.
Since Aethel' denotes a constant function in M,0(cf. (30.a)), A(wealthy '(ethel')) picks out the set of indices at which WOMANi is in the extension ofwealthy'.
According to (47), Ethel is wealthy only in world w3 at moment [t4] and world w4 at interval [t2,t3]
309",327,309,10 Intensional Semantics,No info,No info,opaque context fiona belief lady scottish golf champion wealthy glaswegian ethel wealthy ethel glaswegian wealthy student belief lecturer wealthy pres apres wealthy sgc fiona pres glaswegian pres ethel pres pres glaswegian wealthy ethel pres student lecturer wealthy complement predicate believe scope intension operator leibniz law position substitute equivalent expression complement clause truth demonstration sentence belief lady scottish golf champion wealthy ethel lady scottish golf champion belief ethel wealthy sentence sentence substitution complement ofbelieve belief lady scottish golf champion belief ethel identity entity particular proposition lady scottish golf champion wealthy ethel wealthy different function index truth value function function believe characteristic function entity subject word sentence true true may interpretation complement clause respect model mio set intension predicate wealthy model wealthy man woman dog woman woman man woman woman man man denotation proposition wealthy ethev function denotation ethel entity wealthy map aethel constant function wealthy ethel pick index womani extension ofwealthy ethel wealthy world moment world interval
309,"10 Intensional semantics and so the proposition denoted by ^(wealthy'(ethel')) function represented in (48).
(48) in M J0 is the characteristic

3[wealthy' (ethel')

<w 2 ,[t 3 ]>
<w 2 ,[t 4 ]>
<w 3 ,[t 2 ]>
<w 3 ,[t 3 ]>
<w 3 ,[t 4 ]>
<w 4 ,[t 2 ]
<w 4 ,[t 3 ]>
<w 4 ,[t 4 ]>

The proposition denoted by A(wealthy'(sgc'))y on the other hand, is the characteristic function defining the set of indices <wn,i> at which the denotation of sgc' at <Wn,i> is in the set of entities denoted by wealthy at <Wn,i>.
Since the extension of sgc' changes from index to index, one needs first to ascertain its denotation at a particular index and then check to see if this is in the set of wealthy entities at that index.
Comparing the intension of sgc' in (3O.b) with (47), we can construct the characteristic function in (49) defining the proposition denoted by A(wealthy'(sgc')).
The function in (49) is the characteristic function of the set {<w2,[t!]>, <w2,[t2]>,
<w3,[t4]>, <w4,[t2]>, <w4,[t3]>} whilst that in (48) is the characteristic function of
{<w3,[t4]>,<w4,[t2]>,<w4,[t3]>}.
Since these two sets are different, the propositions denoted by Ethel is wealthy and The Ladies' Scottish Golf Champion is wealthy are different formal objects and so it is possible to believe (or know or doubt) one of them without believing (or knowing or doubting) the other.
Although the function denoted by the predicate believey may map the function in (49) onto the characteristic function of a set containing MAN b the extension of Jo, it does not follow that it maps the function denoted by ^(wealthy'(ethel')) onto a characteristic function of a set containing MAN t .
The proposition expressed by the sentence Jo believes that the

310",328,310,10 Intensional Semantics,No info,No info,intensional semantics proposition wealthy ethel function characteristic wealthy ethel proposition wealthy sgc hand characteristic function index denotation sgc entity wealthy extension sgc first ascertain denotation particular check wealthy entity intension sgc characteristic function proposition wealthy sgc function characteristic function characteristic function different proposition ethel wealthy lady scottish golf champion wealthy different formal object possible doubt function predicate believey function characteristic function man extension follow map function wealthy ethel characteristic function man proposition sentence belief
310,"Interpreting opaque contexts
Ladies' Scottish Golf Champion is wealthy may thus be true while that expressed by
Jo believes that Ethel is wealthy may be false, despite Ethel's being the Ladies'
Scottish Golf Champion at the reference index.
(49) s[ wealthy' (sgc')] M1°«

<w x ,[t 2 ]>

<w 2> [t 2 ]>
<w 2 ,[t 3 ]>
<w 2 ,[t 4 ]>
<w 3 ,[t 2 ]>
<w 3 ,[t 3 ]>
<w 3 ,[t 4 ]>
<w 4 ,[t 2 ]>
<w 4 ,[t 3 ]>
<w 4 ,[t 4 ]>
The fact that substitution is not valid in the complements of verbs like believe also accounts for why we cannot attribute a contradictory belief to Jo even if he happens to believe that Ethel is not wealthy, while also believing that the Ladies'
Scottish Golf Champion is wealthy.
If substitution were valid, (5O.b) would be guaranteed to be true by the truth of (5O.a) together with (46.a) and (46.b) by substitution and conjunction introduction.
The full inference pattern is set out in LIL formulae (ignoring the present tense operator for simplicity) in (51).
(5 La) is the translation of (46.a), (51.b) that of (5O.a), (51.c) is that of (46.b).
Substituting sgc' for ethel' into (51.b) yields the formula in (51.d) which together with (5La) leads to the formula in (5Le), the intended translation of (5O.b), via conjunction introduction.
Conjunction introduction, unlike substitution, is valid in intensional contexts provided that the contexts are kept constant.
Thus, if someone believes that <() and also believes that \j/ then they believe that <|) and \|/.
(50) a.
b.

Jo believes that Ethel is not wealthy.
Jo believes that the Ladies' Scottish Golf Champion is wealthy and that the
Ladies' Scottish Golf Champion is not wealthy.

311",329,311,10 Intensional Semantics,No info,No info,opaque context lady scottish golf champion wealthy true belief ethel wealthy ethel scottish golf champion reference wealthy sgc fact substitution valid complement verb attribute contradictory belief ethel wealthy scottish golf champion wealthy substitution valid true truth substitution conjunction full inference pattern lil formula present tense operator simplicity translation sgc ethel yield formula formula intended translation conjunction conjunction substitution valid intensional context context constant someone belief belief believe belief ethel wealthy belief lady scottish golf champion wealthy lady scottish golf champion wealthy
311,"10 Intensional semantics
(51) a.
b.
c.
d.
e.
believe'(A[wealthy'(sgc')])(jo').
believe'(A[~wealthy'(ethel')])(jo').
ethel' =sgc\ believe' (A[~wealthy' (sgc')] )(jo').
believe'(A[ wealthy'(sgc') & -wealthy'(sgc')])(jo').

As we have seen, the inference pattern in (51) is invalid, because the formula in (51 .d) cannot be inferred from (51.b) and (51.c) via substitution because of the intension operator.
The truth of (51.e), which ascribes the contradictory belief to Jo that the
Ladies' Scottish Golf Champion is both wealthy and unwealthy, thus does not follow from the truth of (51 .a), (51 .b) and (51 .c).
There is, however, a reading of (5O.b), that can be derived from the truth of the premises in (46.a), (46.b) and (5O.a), which does not attribute a contradictory belief to Jo.
In this reading, the first conjunct in (5O.b) is interpreted de dido, as in (51.a), but the second is interpreted de re.
In other words, Jo's belief about the Ladies'
Scottish Golf Champion being wealthy is taken as ascribing to Jo a belief about the wealth of whoever is named by the expression the Ladies' Scottish Golf Champion, whose identity he does not know but who exists within his 'belief worlds'.
His second belief, on the other hand, is interpreted as a belief about the particular person referred to by this expression at a particular index, i.e. Ethel.
Thus, while Jo believes de die to that the Ladies' Scottish Golf Champion is wealthy, he also believes de re, i.e. from the speaker's perspective, that she is not wealthy.
This second reading of (5O.b) can be derived in much the same way as the specific readings of opaque transitive verbs were derived in Section 10.2.2 through the use of the rule of quantifying in.
The de re reading of the sentence in (46.a), Jo believes that the Ladies' Scottish Golf Champion is wealthy, can be constructed by combining the predicate wealthy' translating the verb phrase is wealthy with the individual sublimation of a variable, i.e. XQ [Q(x)].
Once this is combined with the predicate believe' and the individual sublimation ofjo \ we get the formula in (52.a), which ^-converts into the expression in (52.b).
The rule of quantifying in allows us to abstract on the free variable x and combine the resulting predicate with the translation of the Ladies' Scottish Golf Champion to get (52.c), equivalent to the formula in (52.d).
(52) a.
b.
c.
d.

XP [P<jo')](believe'(A[~(XQ [Q(x)](wealthy'))])).
(believe' (A[~(wealthy'(x))]))(jo').
XQ [Q(sgc')]ax [(believe'(A[~(wealthy'(x))]))(jo')]).
Xx [believe'(A[~(wealthy'(x))])(jo')](sgc').

It might seem that lambda conversion can be applied one more time to (52.c) to derive the formula in (51.d) which represents the de dicto reading of Jo believes that the Ladies' Scottish Golf Champion is not wealthy, from which we could derive the contradictory formula in (51 .e) via conjunction introduction with (51 .a).
Like the Law of Substitution, however, the rule of Lambda Conversion is invalid in intensional contexts and must be revised to take account of this as in (53).
(53)

312

Xu [<|)](a) <-> (^u provided that u is not in the scope of operators Past and Fut.

A or the tense",330,312,10 Intensional Semantics,No info,No info,intensional semantics wealthy sgc ethel ethel sgc wealthy sgc sgc inference pattern invalid formula substitution intension operator truth contradictory belief lady scottish golf champion wealthy unwealthy truth truth premise attribute contradictory belief conjunct dido second word belief scottish golf champion wealthy belief wealth expression lady scottish golf champion identity world second belief hand belief particular person expression particular ethel belief die lady scottish golf champion wealthy belief speaker perspective wealthy second reading much way specific opaque transitive verb use rule sentence belief lady scottish golf champion wealthy predicate wealthy translating verb phrase wealthy individual sublimation variable predicate individual sublimation ofjo formula expression rule quantifying abstract free variable combine predicate translation lady scottish golf champion equivalent formula wealthy wealthy sgc wealthy wealthy sgc lambda conversion time derive formula dicto reading belief lady scottish golf champion wealthy contradictory formula conjunction law substitution lambda conversion invalid intensional context account scope operator fut tense
312,"Interpreting opaque contexts

To illustrate the fact that lambda conversion is not valid in intensional contexts and to show that (52.b) does indeed give the de re reading of (46.a), let us consider the interpretation of this formula with respect to Mi0 and the index <Wi,[t2]>.
The crucial point about this interpretation is that the denotation of sgc' is fixed by the reference index.
This follows because the rule interpreting function/argument structures in LIL given in (25.3) derives the interpretation of (54.a) from the application of the extension of the functor at <Wj,[t2]> to that of the argument at the same index, as shown in (54.b).
According to the function in (3O.b), the denotation in M10 of sgc' at
<W!,[t2]> is WOMANi.
Hence, by the definition of lambda conversion in Chapter 5, the result of applying the extension of the ^-expression in (54.b) to that of its argument sgc' is equivalent to the interpretation of the former with respect to a variable assignment function where the variable x has the value WOMAN!.
Thus,
(54.a) and (54.b) are equivalent to (54.c).
In other words, the formula in (52.c) is true at some co-ordinate if, and only if, WOMANi is in the set of things that Jo believes are not wealthy.
Since WOMAN! is Ethel and Jo believes that Ethel is not a wealthy woman, we conclude the de re reading of Jo believes the Ladies' Scottish Golf
Champion is not wealthy is true.
Since the de dicto reading is false (given the truth of
(46.a)), the de re and de dicto readings of this sentence represented by the formulae in (52.c) and (51.d) are thus truth-conditionally distinct.
(54) a.
b.
c.

[A,x [believe>(A[~wealthy'(x)])(jo')](sgc>)]M-8wl-ra.
[Xx [believe>(AhwealthyXx)])Go')]]M'8wl[t2i([(sgc')]M-8'wlit20.
[believe'(A[~wealthy'(x)])Go')]M<8WOMAN1/xwl[t21.

The difference in interpretation between the de re and de dicto readings of (46.a) can be best appreciated by considering what propositions Jo is asserted to believe in each case.
In the de re interpretation just discussed, the relevant proposition that Jo is said to believe is A[wealthy'(x)] wherex is assigned WOMANi as a value.
As we saw above, this proposition is given by the characteristic function of the set
{<w3,[t4]>,<W4,[t2]>,<W4,[t3]>}.
In the de dicto reading in (51.b), however, the proposition that Jo is said to believe is that denoted by ^[wealthy '(sgc')], the function in (49) that defines the set {<w 2 ,[tj>, <w2,[t2]>, <w3,[t4]>, <w4,[t2]>, <w4,[t3]>}.
The functions denoted by A[wealthy '(x)] and A[wealthy '(sgc')] are thus different and so Jo may believe one proposition and not the other without inconsistency.
We can thus see from this example that lambda conversion is indeed not valid in intensional contexts, because the non-converted formula has a different interpretation (and truth value in
Mio) from the formula that would result after lambda conversion.
Furthermore, because the referent of the embedded subject, the Ladies' Scottish Golf Champion, is determined by the reference index, the analysis adequately captures the fact that de re reference occurs outside the belief context and is therefore not dependent on the other beliefs of the referent of the subject of the main clause.
We are now in a position to provide the reading for the sentence in (5O.b) which does not ascribe a contradictory belief to Jo.
Recall that this sentence was constructed from a sentence ascribing to Jo a de dicto belief that the Ladies' Scottish Golf
Champion is wealthy and another ascribing to him a belief that Ethel is not wealthy.
Although direct substitution into an intensional context is not permitted, nevertheless if it is possible to ascribe a de re belief to someone, one can then substitute an
313",331,313,10 Intensional Semantics,No info,No info,opaque context illustrate fact lambda conversion valid intensional context show reading interpretation formula respect crucial point interpretation denotation sgc reference rule structure lil interpretation application extension functor argument function denotation sgc womani lambda conversion result extension argument sgc equivalent interpretation former respect variable assignment function variable value woman equivalent word formula true womani thing belief wealthy woman ethel belief ethel wealthy woman reading belief lady scottish golf champion wealthy true dicto false truth dicto sentence formula distinct believe sgc ahwealthyxx sgc difference interpretation dicto proposition believe interpretation relevant proposition wealthy wherex womani value proposition characteristic function dicto proposition believe wealthy sgc function defines function wealthy wealthy sgc different proposition inconsistency lambda conversion valid intensional context formula different interpretation truth value mio formula lambda conversion referent subject lady scottish golf champion reference analysis fact reference outside belief context dependent belief referent subject main clause position sentence contradictory belief recall sentence sentence dicto belief lady scottish golf champion wealthy belief ethel wealthy direct substitution intensional context possible ascribe belief someone substitute
313,"10 Intensional semantics extensionally equivalent expression for the directly referring expression.
This obviously follows from the fact that the latter appears outside the intensional context created by believe' and so is subject to the Law of Substitution.
In deriving the non-contradictory reading of (5O.b), therefore, we construct from the de dido belief about Ethel in (51.b), repeated in (55.b) below, the de re belief about Ethel in (55.c).
(55) a.
b.
c.
believe'(A[wealthy'(sgc')])(jo').
believe'(A[~wealthy'(ethel')])(jo').
Xx |>elieve'(A[~wealthy'(x)])Oo')](ethel').

It is not in general the case that the truth of the de re reading of a sentence is guaranteed by the truth of its de dicto counterpart.
For example, the de re counterpart to (55.a), Xx [believe '(^[wealthy '(x)])(jo ')](sgc'), is not true in M10 and so not entailed by the former.
However, where an expression, like etheV and other proper names, denotes a constant function the de re and de dicto readings of the same belief sentence turn out to be equivalent.
For example, A[-wealthy'(ethel')] denotes that proposition which picks out the set of indices at which it is true that the extension of ethel' is not in the set of wealthy entities in M10, i.e. {<Wi,[ti,tJ>, <W2,[ti,t4]>, <w3,[ti,t3]>,
<Wi,[ti]>, <w4,[t4]>}.
Since ethel' picks out the same entity at each index, i.e.
WOMANj, this proposition is equivalent to that denoted by A[-wealthy'(x)] where g(x) is WOMAN!.
Hence, where someone has a belief about a particular named individual, no semantic difference emerges between the de re and de dicto readings of the sentence.
In fact, it is a general property of intensional expressions that denote constant functions from indices to extensions that lambda conversion continues to apply, even in intensional contexts.
Hence, the rule of lambda conversion in (49) should be revised to allow the equivalence between Xu [<|)](a) and [ty]**"" where the argument, a, has a constant intension.
Returning to the derivation of the non-contradictory reading of (5O.b), we can validly infer the de re reading of Jo believes that Ethel is not wealthy in (55.c) from
(55.b) via backwards X-conversion.
In (55.c), because ethel' is outside the scope of the intension operator, any extensionally equivalent expression may be substituted for it salva veritate.
From (55.c) and the premiss in (56.a), therefore, we can construct
(56.b), the de re interpretation of Jo believes the Ladies' Scottish Golf Champion is not wealthy.
From this and the de dicto reading of Jo believes that the Ladies' Scottish
Golf Champion is wealthy in (55.a), we get (56.c), the desired reading of Jo believes that the Ladies' Scottish Golf Champion is wealthy and that the Ladies' Scottish Golf
Champion is not wealthy, which does not ascribe to Jo a contradictory belief about the
Ladies' Scottish Golf Champion.
(56) a.
b.
c.
ether = sgc\
Xx [believe'(A[~wealthy'(x)])(jo')](sgc').
Xx [believe'(A[wealthy'(sgc') & -wealthy'(x)])(jo')](sgc').

Individual constants with the semantic properties of sgc' are rare (and debatable) and phrases like the Ladies' Scottish Golf Champion and the President of the USSR ought more properly to be treated as definite noun phrases as in Chapter 6.
However, the properties of belief contexts ensured by the analysis discussed above carry over to sentences containing verbs ofpropositional attitude and quantified noun phrases: i.e. that substitution fails in de dicto readings and that belief sentences are
314",332,314,10 Intensional Semantics,No info,No info,intensional semantics equivalent expression expression fact latter intensional context subject law substitution dido belief ethel belief ethel believe wealthy sgc believe ethel elieve ethel general truth sentence truth dicto counterpart counterpart wealthy sgc true former expression proper name constant function dicto reading belief sentence equivalent ethel denotes proposition index true extension ethel wealthy entity ethel pick entity womanj proposition equivalent woman someone belief individual semantic difference reading sentence fact general property intensional expression denote constant function index extension lambda conversion intensional context rule lambda conversion allow equivalence argument constant intension derivation infer reading belief ethel wealthy ethel scope intension operator equivalent expression salva veritate premiss construct interpretation belief lady scottish golf champion wealthy dicto reading belief lady scottish golf champion wealthy reading belief lady scottish golf champion wealthy lady scottish golf champion wealthy contradictory belief lady scottish golf champion ether sgc wealthy sgc sgc individual constant semantic property sgc rare debatable phrase lady scottish golf champion president ussr definite noun phrase property belief context analysis sentence verb ofpropositional attitude noun phrase substitution dicto reading belief sentence
314,"Two problems ambiguous between de re andde dicto readings.
To illustrate this, let us work through both readings of the sentence in (57).
Since no concepts are introduced here that have not already been met, it will suffice to go over the main points of the analysis and leave readers to work out the details for themselves.
(57)

Fiona believes that a golf champion will be wealthy.

The derivation of the de dicto reading of (57) is straightforwardly derived without the application of the rule of quantifying in to get the translation in (58.a).
The interpretation of this formula ascribes to Fiona a belief that a golf champion, whoever they may be, will in the future be wealthy.
Because the existential quantifier is within the scope of the intension operator, no specific golf champion need be believed by
Fiona to be going to be wealthy, nor need there be at the time of utterance any golf champions at all for the formula to be true.
Furthermore, because the translation of the subordinate subject is within the scope of A no substitution of extensional equivalents may take place.
The de re reading of (57) shown in (58.b) is derived from the application of the rule of quantifying in.
Its interpretation states that there is some golf champion at the present time (and the actual world) of whom Fiona believes she will be wealthy.
Hence, there must be a specific person who is a golf champion and of whom Fiona holds her belief.
Furthermore, if all golf champions are currently secretaries then it follows from the truth of (58.b) that Fiona believes of a secretary that she will be wealthy.
Hence, again, the analysis presented above enables one to distinguish de re from de dicto beliefs and to account for the failure of substitution within such contexts.
(58) a.
b.

{de dicto)
Pres(believe'(A[Fut(3x [golf-champion' (x) & Pres(wealthy'(x))])])(fiona')).
(de re)
3x [golf-champion'(x) & Pres (believe'(A[Fut(wealthy'(x))])(fiona'))].

Exercise 10.6:
Work out the semantic derivation of the formula in (58.b) using the rule of quantifying in.
Interpreting the denotation of the predicate golf-champion' as the function in (30.b) with the entities replaced by unit sets of those entities (so that e.g.
[golf-champion']M1° s wiruJ is {WOMANj}), show that the complement propositions in
(58.a) and (58.b) do denote different propositions with respect to M10 and the index
<Wi,[t2]>.
Be careful to take full account of the tense operators in these formulae.

10.4

Two problems

The adoption of a co-ordinate semantics can thus solve the puzzles posed by the failure of expected entailments in certain contexts.
By treating intensionality as an operator over formulae, we can also, as discussed above, account for ambiguities in intensional contexts in terms of scope differences between different sorts of operator
(e.g. quantifiers and tense operators).
There are, however, two major problems that
315",333,315,10 Intensional Semantics,No info,No info,problem ambiguous andde dicto reading illustrate work sentence concept suffice main point analysis reader work detail fiona belief golf champion wealthy derivation dicto reading application rule translation interpretation formula fiona belief golf champion wealthy existential quantifier scope intension operator specific golf champion need fiona wealthy time utterance golf champion formula true furthermore translation subordinate subject scope substitution extensional equivalent place application rule interpretation state golf champion present time actual world fiona belief wealthy specific person golf champion fiona hold belief golf champion secretary truth fiona belief secretary wealthy analysis distinguish dicto belief account failure substitution context dicto pres fut pres wealthy fiona pres wealthy fiona exercise semantic derivation formula rule denotation predicate function entity unit entity wiruj womanj show complement proposition denote different proposition respect careful full account tense operator formula problem adoption semantics puzzle failure entailment certain context intensionality operator formula account ambiguity intensional context term scope difference different sort operator quantifier tense operator major problem
315,"10 Intensional semantics arise from the analysis of intensional contexts given in Section 10.3.
One has to do with the substitution of intensional equivalents and the other with referring to individuals at different indices.
10.4.1

Intensional equivalence

We have observed above that the substitution of extensional equivalents fails in intensional contexts.
However, it was also observed in Section 9.2 that for Frege the intension (Sinn) of an expression is determined by the intensions of its component parts.
Since the intensional semantics defined above preserves the version of the
Principle of Compositionality in Chapter 9, the version of Leibniz' Law in (59) does hold in LIL.
This states that two expressions are intersubstitutable in intensional contexts if (and only if) their intensions are identical.
(Aa = Ab)-»[<|> <-><)>»*].

(59)

Exercise 10.7:
Explain informally why (59) is valid in LIL.
Illustrate your answer by showing that the two sentences below are truth-conditionally equivalent in M10 under the assumption that 3[robert']M1°8 is the constant function that picks out MAN2 at every index.
i.
ii.

Jo believes that Bertie is wealthy,
Jo believes that Robert is wealthy.

The validity of (59) in LIL presents a serious problem for the analysis of verbs of propositional attitude with respect to propositions that are necessarily true.
In the technical sense of the term proposition given in this chapter, there is only one necessarily true proposition: the characteristic function that maps all possible indices
(i.e. W x I) onto 1.
Assuming that all logical and arithmetical truths are true at all indices, all the sentences in (60), therefore, denote the same proposition, i.e. the set
Wxl.
(60) a.
b.
c.

It is snowing or it is not snowing.
Four times four is sixteen.
All students are students.

Since there is only one necessarily true proposition, it follows that if someone believes or knows any necessarily true statement, then that person believes or knows all necessarily true statements.
Thus, once someone has grasped the fact that four times four is sixteen, then they know every arithmetically and logically necessary truth.
Not only do they then know the other sentences in (60) but also that the circumference of a circle is given by twice the radius of the circle times n and the law of modus ponens, and so on.
There are no new necessarily true statements to be believed or known.
This is patently absurd, of course.
People may believe or know some necessary truths but not others but no-one would argue that since they know that it is either raining or not raining, then they know all necessarily true statements about the Universe!
The primary problem with logically necessary statements in belief contexts is
316",334,316,10 Intensional Semantics,No info,No info,intensional semantics analysis intensional context substitution intensional equivalent individual different index intensional equivalence substitution extensional equivalent intensional context frege intension sinn expression intension component part intensional semantics preserve version principle compositionality version leibniz law hold lil state expression intersubstitutable intensional context intension identical exercise valid lil illustrate answer sentence equivalent assumption robert constant function pick belief bertie wealthy belief robert wealthy validity lil serious problem analysis propositional attitude respect proposition true technical sense term proposition true proposition characteristic function possible index logical arithmetical truth true index sentence denote proposition wxl time student student true proposition someone belief true statement person belief true statement someone fact time necessary truth sentence circle twice radius circle time law modus new true statement absurd course people necessary truth others raining raining true statement universe primary problem necessary statement belief context
316,"Two problems that there are not enough worlds to differentiate the different statements from one another.
As we have seen, contingent propositions are differentiated by the indices at which they are true which may differ from proposition to proposition.
However, if the set of possible worlds is the set of all logically possible worlds, then obviously there is no possible world in which a logically true formula is false.
Hence, the intensions of such formulae cannot be differentiated.
To remedy this, it has been suggested that the set of worlds in a model should include not only the logically possible worlds but also logically impossible ones, i.e. worlds where the laws of classical logic fail to hold.
These would include, for example, worlds where a sentence like It is raining or it is not raining is false or where it turns out not to be the case that four times four is sixteen.
This certainly allows for differentiation in the intensions of the logically true
(or logically false) statements, but only at the cost of introducing into the ontology worlds where the familiar rules of inference fail and which are thus so alien to our understanding that it is unlikely that we could ever comprehend them.
Other ways have been suggested to try and overcome the problem of intensional equivalence without undermining the whole basis of the possible worlds approach sketched in previous sections.
There is no space here to deal with them all in any detail and the reader is referred to the suggested reading for fuller information.
Most of them, however, involve the postulation of something more than an intension of the sort defined in this chapter.
For example, Cresswell (1985) develops some ideas of
Rudolf Carnap and David Lewis by defining a structural concept of meaning which interprets the objects of belief and knowledge as combinations of the intension of a formula plus all the intensions of its component parts.
In other words, the meaning of a formula <>
| in this sense is something like a semantic derivation of the sort we have been using in deriving scope differences using the rule of quantifying in (cf. e.g. (33) above).
Each node of the analysis tree, however, is labelled with the intension of some logical expression, rather than the expression itself.
The meaning of the sentence Jo is madin this system is thus something like (61 .a).
The difference in meaning between two logically true statements like It is raining or it is not raining and It is snowing or it is not snowing results from the differences in intension between the constants they contain, i.e. rain' and snow'.
Hence, one may believe or know (61.b) without believing or knowing (61.c), since these are different formal objects.
(61) a.
b.
c.

<s[Pres (mad>(jo'))]M'8,<j[XPP(jo')]M-8,3[mad']M-8».
<s[rain' v ~rain']M^<3[rain']M<8,3[~rain']M'8>>.
<s[snow' v-snow']M-8,<3[snow']M-8,3[-snow']M-8».

An alternative solution that does not involve complex intensional structures and which is somewhat closer to a linguist's intuitions about meaning was suggested in
Section 9.2.
This notion of the meaning of an expression defines it as the combination of the denotation of the expression, both its extension and its intension, and its sense, as defined in Chapter 7.
As briefly discussed in Section 9.3.2, the set of meaning postulates that determine the sense of an expression can be interpreted as an accessibility relation R* on possible worlds.
A world, wm, is Rz-accessible to another world, wn, if, and only if, all the meaning postulates associated with a hold in wm and wn.
Since different basic expressions are associated with different meaning postulates, they define different accessibility relations on the set of possible worlds.
For example, given the three meaning postulates in (62), Rtree> selects all those worlds in which trees
317",335,317,10 Intensional Semantics,No info,No info,problem enough world differentiate different statement contingent proposition index true proposition proposition possible world possible world possible world true formula false intension formula remedy world model possible world impossible world law classical logic fail hold world sentence false turn time differentiation intension true false statement cost ontology world familiar rule inference alien understanding unlikely way overcome problem intensional equivalence whole basis possible world approach previous section space deal detail reader fuller information postulation intension cresswell idea rudolf carnap david lewis structural concept meaning object belief knowledge combination intension formula intension component part word meaning formula sense semantic derivation scope difference rule node analysis tree intension logical expression expression meaning sentence madin system difference true statement result difference intension constant contain rain snow different formal object mad xpp mad rain rain snow snow alternative solution complex intensional structure linguist intuition meaning notion expression combination denotation expression extension intension sense meaning postulate determine sense expression accessibility relation possible world world world meaning postulate different basic expression different meaning postulate different accessibility relation possible world meaning postulate rtree selects world tree
317,"10 Intensional semantics are plants and not flowers (but where flowers may not be plants or plants may be animals) while Rpianf selects those in which no plants are animals (but where trees may be flowers and flowers may not be plants) and so on.
(62) a.
b.
c.
d.

Vx
Vx
Vx
Vx

[tree' (x) -> plant' (x)].
[tree' (x) -» -flower' (x)].
[plant'(x) -> -animal' (x)].
[flower'(x) -> plant'(x)].

The sense of a constant a may, therefore, be defined as the set of all indices <wm,i> such that wRaw' where wn is the reference world.
Generalising this to complex expressions, we can say that the sense of that expression is given by the set of indices where each world in each index is accessible to the reference world according to the sense relations of all the constants in the expression.
Symbolising the sense of an expression a as i[a]M8-wni, we can formally define sense as in (63).
Under this interpretation, the sense of a sentence like Every tree is a plant is that set of indices where trees are plants, are not flowers, and where plants are not animals, i.e. where each world is Rtree> and Rpianr accessible to this one.
(63)

The sense of an expression a, r[a]M* wn<*, is the set of indices, <wm,i>, such that wRciW*, wRc2w' ... and wRcnw' where Ci, c 2 ,..., Cn are the constants in a.
A sentence like Every tree is a plant, that conforms to the structure of a meaning postulate associated with the subject, is thus true at every index in its sense.
Hence, we can account for the apparent tautological (or analytic) properties of sentences like
Every bachelor is unmarried, since it expresses a true proposition at every time in every sensible world, where the latter is defined as a world in which all meaning postulates are true for every basic expression in the language.
Such sentences are not logical tautologies, however, because they are not true at every possible index and so can be distinguished from necessarily true sentences like Every tree is a plant or not a plant.
On the other hand, the sense of the latter sentence is, of course, the same as that of Every tree is a plant because both sentences contain exactly the same content expressions, i.e. tree' and plant'.
In order to distinguish the meanings of pairs of such sentences, we therefore need also to take into account their intensions as well as their senses.
We may then call the combination of the sense and the intension of an expression the meaning of that expression and formally define the concept as in (64).
(64)

The meaning of an expression oc, M[a]Mswni is the ordered pair
<z[a]M-8'wni,3[a]M«>.

This gives us sufficient structure to distinguish the meanings of logically true statements, since sentences containing different lexemes have different senses and those containing the same lexemes may have different intensions.
For example, the meaning of Every tree is a plant or not a plant differs from that of It is raining or it is not raining, because, while their intensions are identical, their senses differ because there are worlds which conform to the patterns on extensions specified by the meaning postulates associated with tree and plant that do not conform to those of rain and vice versa.
Furthermore, we can distinguish the meanings of two sentences which differ only in that they contain synonyms in the same position.
Thus, while Bertie has a red
318",336,318,10 Intensional Semantics,No info,No info,intensional semantics plant flower flower plant rpianf selects plant animal tree flower tree plant tree plant flower plant sense constant index wraw reference world complex expression sense expression index world accessible reference world sense relation constant expression symbolising sense expression sense interpretation sense sentence tree plant index tree plant flower plant animal world rpianr accessible sense expression index wrciw wrcnw constant sentence tree plant structure meaning postulate subject true sense apparent tautological analytic property sentence unmarried express true proposition time sensible world world meaning postulate true basic expression language sentence logical tautology true possible true sentence tree plant plant hand sense latter sentence course tree plant sentence content expression tree plant order distinguish meaning pair sentence account intension sens combination sense intension expression expression concept expression mswni pair sufficient structure distinguish meaning true statement sentence different lexeme different sens lexeme different intension meaning tree plant plant differs intension identical sens world conform pattern extension meaning postulate associated tree plant rain vice sentence synonym position bertie red
318,"Two problems pullover and Bertie has a red jumper both have the same sense, since jumper and pullover are synonyms (in British English), their intensions differ because there are indices that do not form part of the senses of these two words where Bertie's red jumper is not a pullover.
Taking the objects of belief and knowledge to be meanings in the sense of (64), therefore, solves the problem of the substitution of intensional equivalents into such contexts.
Whatever approach is adopted to solve this problem, however, it is clear that intensions in the technical sense are not sufficient to distinguish the meanings of all expressions.
On the other hand, as illustrated in the approach to meaning that I have just sketched, this failure is not in itself sufficient to reject the possible worlds approach to intensionality (and meaning) entirely.
10.4.2

Cross-world reference

A second problem for the theory of intension defined in this chapter has to do with the interpretation of proper names.
Indeed, this whole topic remains a thorny problem for linguists and philosophers which we can do no more than touch upon here.
Essentially the problem revolves around whether named individuals in one world exist in others and, if they do, how they can be identified from one world to the next.
In the model M10, the names Bertie, Fiona, Ethel, Jo and Chester are identified with (the individual sublimations of) individual constants that are assigned a constant intension by F10.
For example, bertie' denotes MAN2 and fiona' denotes WOMAN2 at every index in M10.
It has been cogently argued in the literature on this subject that this is the correct way to treat proper names, particularly as it allows one to refer to individuals with whom one has no direct acquaintance, like Queen Elizabeth II, or who may no longer be alive, like Socrates, or who may be fictional, like Jane Eyre.
If proper names always pick out the same entity at whatever world or time, they always successfully refer and guarantee that when people talk about Jane Eyre,
Socrates or Elizabeth Windsor they are talking about the same entity, even though that entity may not have corporeal existence in the actual world at the present time.
Under this interpretation, names are rigid designators and the formula in (65) holds true of any model.
(65)

3x [necessarily'(oc = x)], where a translates a proper name.

Because the existential operator is outside the scope of the modal adverb, (65) asserts that there is some entity in A that is associated with the constant a at every index and that this entity is the same one at every index.
Unfortunately, once names are taken to berigiddesignators, a familiar problem rears its ugly head.
If two names denote the same entity at one index, then by (65) they must denote the same entity at every index.
Thus, the Latin version of the Greek name for the Morning Star was Hesperus and that for the Evening Star was Phosphorus.
We happen to know now that Hesperus and Phosphorus denote the same entity, the planet
Venus.
If names are rigid designators, then both Hesperus and Phosphorus must denote the planet Venus at every index and so have the same intension.
Thus, by the revised version of Leibniz' Law in (59), the term Hesperus can be substituted for the term Phosphorus in all contexts and so, if the objects of belief are intensions, then we can infer from The ancients believed that Hesperus is Hesperus that The ancients believed that Hesperus is Phosphorus (in the de dicto reading), a conclusion that is not
319",337,319,10 Intensional Semantics,No info,No info,problem pullover bertie red jumper sense jumper pullover synonym british english intension index form part word bertie red jumper pullover object belief knowledge sense problem substitution intensional equivalent context approach solve problem clear intension technical sense sufficient distinguish expression hand approach meaning failure sufficient possible world approach intensionality second problem theory intension interpretation proper name whole topic thorny problem linguist philosopher touch problem individual world others world model name bertie fiona ethel chester individual sublimation individual constant constant intension bertie fiona denotes literature subject correct way proper name individual direct acquaintance queen elizabeth alive socrates fictional jane eyre proper name entity world time guarantee people jane eyre elizabeth windsor entity entity actual world present time interpretation name rigid designators formula true model proper name existential operator scope modal adverb entity constant entity berigiddesignators familiar problem ugly name denote entity entity latin version greek name morning star hesperus evening star phosphorus know hesperus phosphorus denote entity planet venus name rigid designators hesperus phosphorus planet venus intension version leibniz law term hesperus term phosphorus context object belief intension infer ancient believed hesperus hesperus ancient hesperus phosphorus dicto reading
319,"10 Intensional semantics intuitively justified, as we have seen.
A further problem arises with sentences that assert the counterfactual identity of two elements.
It is, for example, possible to imagine a person as being someone other than they are and making perfectly reasonable statements based on this assumption.
All the sentences in (66) are well formed and easily interpretable, yet the interpretation of names asrigiddesignators means that we cannot take the assumption of the identity of two entities that are not in fact identical as being true in any possible world at any time.
(66) a.
b.

Clark Kent might not have been Superman.
I could have been Shakespeare, if I had lived in the sixteenth century.

Yet another problem concerns the properties that individuals may have at different worlds or times.
For example, it is logically possible that at some index the entity denoted by Bertie, i.e. MAN2, could be a male human, at another a female frog, at another a dwarf tree, at another a Mozart sonata, and so on.
Yet in what sense could a piece of music in one world be identified as the same entity as a man in another?
It is not clear that we can use the notion of meaning suggested in Section 10.4.1 to help out here, because it is not clear that proper names have sense in the same way that other expressions do.
Indeed, it seems to be almost axiomatic in philosophy that names do not have sense.
This is not a topic that I wish to get embroiled in here, but it may be the case that one should follow Aristotle in distinguishing the essential properties of an entity from its accidental properties.
The essential properties of an individual may then be used to define an accessibility relation between worlds which excludes indices at which the individual in question does not have these properties.
In that case, we could take the meaning of a proper name to be the set of indices in which the essential properties of the individual hold coupled with its (constant) intension.
This could help in the cross-world identification of individuals, and, if identity is defined between essential properties, rather than referents, it might be possible to solve the problem of counterfactually equating distinct entities.
Other solutions to the problem of interpreting proper names can and have been put forward, but no one solution solves all the problems without posing more.
It is clear that treating names as rigid designators intensionally is not sufficient, but it is possible that future research could produce a definition of meaning for proper names within a semantics based on possible worlds that is robust enough to account for the persistence of reference across worlds and times, but does not have the unfortunate consequences mentioned above.
10.5

Postscript

With this discussion of Montague's theory of intensionality, we come to the end of our excursion into formal semantics.
It would seem appropriate, therefore, to end this chapter with a short review of the theory presented in the preceding chapters with respect to the criteria of adequacy discussed in Chapter 1.
With regard to the criteria for assessing the adequacy of semantic theories, the theory of interpretation defined in Section 10.2 comes out well.
First and foremost, the Principle of Compositionality is adhered to throughout, since the denotations of all expressions are constructed from the intensional or extensional denotations of
320",338,320,10 Intensional Semantics,No info,No info,intensional semantics problem sentence assert counterfactual identity element possible imagine person someone reasonable statement assumption sentence interpretable interpretation name asrigiddesignators assumption identity entity fact identical true possible world time clark kent superman sixteenth century problem concern property individual different world time possible entity bertie human female frog dwarf tree mozart sonata sense music world entity man clear use notion meaning clear proper name sense way expression axiomatic philosophy name sense topic wish aristotle essential property entity accidental property essential property individual define accessibility relation world index individual question property proper name set index essential property individual hold constant intension identification individual identity essential property referent problem distinct entity solution problem proper name solution problem clear name rigid designators sufficient possible future research proper name semantics possible world robust enough account persistence reference world time unfortunate consequence discussion montague theory intensionality end excursion formal semantics appropriate end short review theory chapter respect criterion adequacy regard criterion adequacy semantic theory theory interpretation first foremost principle compositionality denotation expression intensional extensional denotation
320,"Postscript their component parts, depending on how these are put together.
The information contained in an expression is not lost during its interpretation, and information not connected with the subparts of the expression does not arbitrarily contribute to the meaning of that expression.
Apparent counterexamples to the Principle are treated in terms of intensions which allows a fully regular way of building up denotations in terms of functors and their arguments.
The theory, therefore, provides an account of the way the meanings of expressions are built up from the meanings of their parts.
The theory also provides an account of ambiguity.
It predicts where this will occur: i.e. in expressions with homonyms and in those that contain more than one expression that translates into a logical operator.
The interaction of the propositional connectives is determined by syntactic structure, while scope ambiguities involving the other operators are handled by the Rule of Quantifying In.
The semantics proposed for the operators ensures that genuinely ambiguous expressions in the object language receive more than one set of truth-conditions.
On the other hand, many genuinely non-ambiguous sentences (even those that are structurally ambiguous) are assigned only one set of truth-conditions, as required.
The interaction of tense, aspect and modal operators, however, with each other and with the quantifiers may, as we have seen, provide too many readings for a single sentence, which is clearly a problem that needs to be resolved.
In Chapter 7 and subsequently, it has also been shown how truth-conditional semantics can account for relations of entailment, paraphrase and contradiction between sentences in English.
The use of meaning postulates, interpreted as constraints on the extensions of related lexemes and phrases, provides the basis for a theory of sense, as the notion is generally used by linguists, rather than logicians.
As discussed in this chapter and Chapter 9, it is possible to treat sense relations defined by meaning postulates as structuring the domain of possible worlds in terms of their accessibility to one another and, in so doing, to provide the basis of an account of anomaly and the likelihood of a sentence expressing a true proposition.
This is achieved within an explicit and fully formulated theory of denotation, with both extensions and intensions determined formally in terms of the entities of a model and worlds (that may be thought of as possible alternative states-of-affairs) and times.
Each basic expression in the object language is associated with a denotation in a model and the model theory determines how the denotations of all composite expressions are built up compositionally from these.
Hence, the way linguistic expressions tie up with the world and convey information about possible or actual situations is made fully explicit within the theory.
Furthermore, in the course of this book, a theory has been provided of the core truth-conditional meanings of a number of constructions in English.
These include: basic declarative sentences; negative sentences and sentences co-ordinated by and and or, simple passives; intersective adjectives; quantifiers, both classical and non-classical; grammatical tense and grammatical and lexical aspect; the modal adverbs necessarily and possibly and the modal verbs must and may; sentences of propositional attitude; control verbs and transitive verbs with a referentially opaque direct object position.
There are, of course, many constructions that were omitted from the discussion (most notable anaphora) and there remain many problems with the theory of semantics presented in the text.
However, formal semantics is now a thriving field of linguistics and is constantly being developed to analyse more constructions
321",339,321,10 Intensional Semantics,No info,No info,component part information expression interpretation information subpart expression expression apparent counterexample principle term intension regular way building denotation term functors argument theory account way expression part theory account ambiguity predicts expression homonym expression logical operator interaction propositional connective syntactic structure scope ambiguity operator rule semantics operator ambiguous expression object language hand many sentence ambiguous set interaction tense aspect modal operator quantifier many single sentence problem semantics account relation entailment paraphrase contradiction sentence english use meaning postulate constraint extension lexeme phrase basis theory sense notion linguist logician possible treat sense relation meaning postulate domain possible world term accessibility basis account likelihood sentence true proposition explicit theory denotation extension intension term entity model world possible alternative time basic expression object language denotation model model theory denotation composite expression compositionally way linguistic expression tie world information possible actual situation explicit theory course book theory core meaning number construction english basic declarative sentence negative sentence sentence simple passive intersective adjective classical grammatical tense grammatical lexical aspect modal adverb modal verb propositional attitude control verb transitive verb referentially direct object position course many construction discussion notable anaphora many problem theory semantics text formal semantics field linguistics analyse construction
321,"10 Intensional semantics and to solve the problems that emerge.
Indeed, there are now many variants of
Montague's basic theory: some are primarily relatively compatible extensions to the theory and some are fairly radical revisions of it.
Yet the theory presented in this introductory book remains the basis for much of the research that is carried out within formal semantics and there is no doubt that Montague's conviction that the syntax of natural languages is as amenable to formal interpretation as that of logical languages has introduced a valuable and robust strand of research into linguistic semantics.
10.6

Further reading

Lewis (1972) provides a general discussion of the programme adopted by Montague and discussed in this chapter.
Montague discusses his intensional logic and its interpretation in Montague (1970a; 1970b; 1973), with the latter presenting the information in the form given in this chapter.
Montague's general theory is discussed in Dowty (1979: ch.
1) and Dowty, Wall and Peters (1981: ch.
8) and the logic and its interpretation are sketched in McCawley (1981: 401-406), Allwood, Andersen and
Dahl (1977: ch.
8) and Chierchia and McConnell-Ginet (1990: 208-219) and given a fuller discussion in Dowty, Wall and Peters (1981: ch.
6).
The status of intensions as mathematical or psychological entities is discussed in Partee (1979) and Dowty (1979: ch.
8).
Further discussion of the applications of the logic to intensional constructions in English presented in this chapter can be found in Chierchia and McConnell-Ginet
(1990:234-255) (modality, complement sentences and infinitives); McCawley (1981:
406-424) (intensional argument positions in e.g. seek and change)', Dowty, Wall and
Peters (1981: ch.
7) (which discusses the grammar of Montague (1973)); Bach(1979),
Klein and Sag (1985) and Dowty (1985) (on control verbs).
See also van Benthem
(1988), the articles in Heny (1981), and, in a slightly different framework, Keenan and
Faltz (1985), for discussions of different aspects of intensionality.
The problem of intensional equivalence has generated a good deal of debate.
Cresswell (1985b) provides the approach to the problems of prepositional attitude verbs using structured meanings discussed in the text and this is taken up in Chierchia (1989).
A radically different approach is taken in Barwise and Perry (1983) where the use of possible worlds is rejected entirely and subsequent developments in situation semantics have substantially revised the semantic programme that developed out of Montague's work
(see, for example, Barwise (1986), the articles in Cooper, Mukai and Perry (1990) and, for some general discussion of the early form of the theory, the papers in Linguistics and Philosophy 8, no. 1).
The analysis of proper names also remains controversial; see
Kripke (1980).
For representative examples of current developments in formal semantics, see the papers in Chierchia, Partee and Turner (1989a; 1989b), Cooper,
Mukai and Perry (1990) and current issues of the journal Linguistics and Philosophy.

322",340,322,ANSWERS TO SELECTED EXERCISES,No info,No info,intensional semantics problem many variant montague basic theory compatible extension theory radical revision theory introductory book basis much research formal semantics montague conviction syntax natural language amenable formal interpretation logical language valuable robust strand research linguistic semantics lewis general discussion programme montague montague intensional logic interpretation montague latter information form montague general theory dowty dowty wall peter logic interpretation mccawley allwood andersen dahl fuller discussion dowty wall peter status intension mathematical psychological entity partee dowty discussion application logic intensional construction english modality complement sentence infinitive mccawley intensional argument position dowty wall peter discus grammar montague bach klein dowty control verb van benthem article heny different framework keenan faltz discussion different aspect intensionality problem intensional equivalence good deal debate cresswell approach problem prepositional attitude verb structured meaning text different approach barwise perry possible world subsequent development situation semantics semantic programme montague work barwise article cooper mukai perry general discussion early form theory paper linguistics philosophy analysis proper name controversial kripke representative example current development formal semantics paper chierchia partee turner cooper mukai perry current issue journal linguistics philosophy
